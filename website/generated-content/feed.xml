<?xml version="1.0" encoding="UTF-8"?>
<!--
 Licensed under the Apache License, Version 2.0 (the "License");
 you may not use this file except in compliance with the License.
 You may obtain a copy of the License at
   http://www.apache.org/licenses/LICENSE-2.0
 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License. See accompanying LICENSE file.
-->
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Apache Beam</title>
    <description>Apache Beam is an open source, unified model and set of language-specific SDKs for defining and executing data processing workflows, and also data ingestion and integration flows, supporting Enterprise Integration Patterns (EIPs) and Domain Specific Languages (DSLs). Dataflow pipelines simplify the mechanics of large-scale batch and streaming data processing and can run on a number of runtimes like Apache Flink, Apache Spark, and Google Cloud Dataflow (a cloud service). Beam also brings DSL in different languages, allowing users to easily implement their data integration processes.
</description>
    <link>https://beam.apache.org/</link>
    <atom:link href="https://beam.apache.org/feed.xml" rel="self" type="application/rss+xml"/>
    <generator>Jekyll v3.6.3</generator>
    
      <item>
        <title>Beam Digital Summit is Coming, and it's Coming Fast!</title>
        <description>&lt;!--
Licensed under the Apache License, Version 2.0 (the &quot;License&quot;);
you may not use this file except in compliance with the License.
You may obtain a copy of the License at
http://www.apache.org/licenses/LICENSE-2.0
Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an &quot;AS IS&quot; BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
--&gt;

&lt;p&gt;As some of you are already aware, the 2020 edition of the Beam Summit will be completely &lt;strong&gt;digital and free&lt;/strong&gt;. And as you would expect from the Apache Beam community, it is coming in fast; the Beam Digital Summit will be from &lt;strong&gt;June 15th to 19th&lt;/strong&gt;, one moth away! The conference will be spread across the course of one week with a couple of hours of program each day.&lt;/p&gt;

&lt;!--more--&gt;

&lt;p&gt;&lt;img class=&quot;center-block&quot; src=&quot;/images/blog/beamsummit/beamsummit-digital.png&quot; alt=&quot;Beam Summit Digital 2020&quot; /&gt;&lt;/p&gt;

&lt;p&gt;While we would have loved to see all of you in person, we have to accept that 2020 will not be the year for that. So, we are looking at this as an opportunity to have a bigger and more inclusive event, where people who would normally not be able to travel to the summit will now be able to join, learn and share with the rest of the community.&lt;/p&gt;

&lt;h2 id=&quot;providing-you-the-best-experience-possible&quot;&gt;Providing you the best experience possible&lt;/h2&gt;

&lt;p&gt;We are going to great lengths to ensure that we provide the Beam community with the best possible experience in an online event. From audio/video quality, to an adequate schedule for our community, to making it as easy as possible to register to the event and join the sessions, to setting up ways for the community to interact and network with each other. The team behind the organization of the Beam Summit has been working on these things, and we are also teaming up with an event production company with experience in online events who are bringing in their knowledge.&lt;/p&gt;

&lt;p&gt;So, what we want to say with this is: We will have a great event! And if you have any ideas on how to make it better, please let us know.&lt;/p&gt;

&lt;h2 id=&quot;ways-to-participate-and-help&quot;&gt;Ways to participate and help&lt;/h2&gt;

&lt;p&gt;As all things Beam, this is a community effort. The door is open for participation:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Submit a proposal to talk. Please check out the &lt;strong&gt;&lt;a href=&quot;https://sessionize.com/beam-digital-summit-2020/&quot;&gt;Call for Papers&lt;/a&gt;&lt;/strong&gt; and submit a talk. The deadline for submissions is &lt;em&gt;May 20th&lt;/em&gt;!&lt;/li&gt;
  &lt;li&gt;Register to join as an attendee. Registration is now open at the &lt;strong&gt;&lt;a href=&quot;https://crowdcast.io/e/beamsummit&quot;&gt;registration page&lt;/a&gt;&lt;/strong&gt;. Registration is free!&lt;/li&gt;
  &lt;li&gt;Consider sponsoring the event. If your company is interested in engaging with members of the community please check out our &lt;a href=&quot;https://drive.google.com/open?id=1EbijvZKpkWwWyMryLY9sJfyZzZk1k44v&quot;&gt;sponsoring prospectus&lt;/a&gt;.&lt;/li&gt;
  &lt;li&gt;Help us get the word out. Please make sure to let your colleagues and friends in the data engineering field (and beyond!) know about the Beam Summit.&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;follow-up-and-more-information&quot;&gt;Follow up and more information&lt;/h2&gt;

&lt;p&gt;While we will use the Crowdcast platform to broadcast the event, we will still have a full event website at &lt;a href=&quot;https://beamsummit.org&quot;&gt;beamsummit.org&lt;/a&gt; with details about the schedule, speakers, FAQ and everything else you need from an event. We are currently working on updating the website and will publish all event details in the next couple of weeks.&lt;/p&gt;

&lt;p&gt;Please also follow us on &lt;a href=&quot;https://twitter.com/beamsummit&quot;&gt;Twitter&lt;/a&gt; or &lt;a href=&quot;https://www.linkedin.com/company/beam-summit/&quot;&gt;LinkedIn&lt;/a&gt; to get event updates.&lt;/p&gt;
</description>
        <pubDate>Fri, 08 May 2020 01:00:01 -0700</pubDate>
        <link>https://beam.apache.org/blog/2020/05/08/beam-summit-digital-2020.html</link>
        <guid isPermaLink="true">https://beam.apache.org/blog/2020/05/08/beam-summit-digital-2020.html</guid>
        
        
        <category>blog</category>
        
      </item>
    
      <item>
        <title>Apache Beam 2.20.0</title>
        <description>&lt;!--
Licensed under the Apache License, Version 2.0 (the &quot;License&quot;);
you may not use this file except in compliance with the License.
You may obtain a copy of the License at
http://www.apache.org/licenses/LICENSE-2.0
Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an &quot;AS IS&quot; BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
--&gt;

&lt;p&gt;We are happy to present the new 2.20.0 release of Beam. This release includes both improvements and new functionality.
See the &lt;a href=&quot;/get-started/downloads/#2190-2020-02-04&quot;&gt;download page&lt;/a&gt; for this release.&lt;!--more--&gt;
For more information on changes in 2.20.0, check out the
&lt;a href=&quot;https://issues.apache.org/jira/secure/ReleaseNote.jspa?projectId=12319527&amp;amp;version=12346780&quot;&gt;detailed release notes&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&quot;ios&quot;&gt;I/Os&lt;/h3&gt;
&lt;p&gt;Python SDK: . (#10223).&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://issues.apache.org/jira/browse/BEAM-8561&quot;&gt;BEAM-8561&lt;/a&gt; Adds support for Thrift encoded data via ThriftIO&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://issues.apache.org/jira/browse/BEAM-7310&quot;&gt;BEAM-7310&lt;/a&gt; KafkaIO supports schema resolution using Confluent Schema Registry&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://issues.apache.org/jira/browse/BEAM-7246&quot;&gt;BEAM-7246&lt;/a&gt; Support for Google Cloud Spanner. This is an experimental module for reading and writing data from Google Cloud Spanner&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://issues.apache.org/jira/browse/BEAM-8399&quot;&gt;BEAM-8399&lt;/a&gt; Adds support for standard HDFS URLs (with server name)&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;new-features--improvements&quot;&gt;New Features / Improvements&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://issues.apache.org/jira/browse/BEAM-9146&quot;&gt;BEAM-9146&lt;/a&gt; New AnnotateVideo &amp;amp; AnnotateVideoWithContext PTransform’s that integrates GCP Video Intelligence functionality&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://issues.apache.org/jira/browse/BEAM-9247&quot;&gt;BEAM-9247&lt;/a&gt; New AnnotateImage &amp;amp; AnnotateImageWithContext PTransform’s for element-wise &amp;amp; batch image annotation using Google Cloud Vision API&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://issues.apache.org/jira/browse/BEAM-9258&quot;&gt;BEAM-9258&lt;/a&gt; Added a PTransform for inspection and deidentification of text using Google Cloud DLP&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://issues.apache.org/jira/browse/BEAM-9248&quot;&gt;BEAM-9248&lt;/a&gt; New AnnotateText PTransform that integrates Google Cloud Natural Language functionality&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://issues.apache.org/jira/browse/BEAM-9305&quot;&gt;BEAM-9305&lt;/a&gt; ReadFromBigQuery now supports value providers for the query string&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://issues.apache.org/jira/browse/BEAM-8841&quot;&gt;BEAM-8841&lt;/a&gt; Added ability to write to BigQuery via Avro file loads&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://issues.apache.org/jira/browse/BEAM-9228&quot;&gt;BEAM-9228&lt;/a&gt; Direct runner for FnApi supports further parallelism&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://issues.apache.org/jira/browse/BEAM-8550&quot;&gt;BEAM-8550&lt;/a&gt; Support for @RequiresTimeSortedInput in Flink and Spark&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://issues.apache.org/jira/browse/BEAM-6857&quot;&gt;BEAM-6857&lt;/a&gt; Added support for dynamic timers&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;breaking-changes&quot;&gt;Breaking Changes&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://issues.apache.org/jira/browse/BEAM-3453&quot;&gt;BEAM-3453&lt;/a&gt; Backwards incompatible change in ReadFromPubSub(topic=) in Python&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://issues.apache.org/jira/browse/BEAM-9310&quot;&gt;BEAM-9310&lt;/a&gt; SpannerAccessor in Java is now package-private to reduce API surface&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://issues.apache.org/jira/browse/BEAM-8616&quot;&gt;BEAM-8616&lt;/a&gt; ParquetIO hadoop dependency should be now provided by the users&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://issues.apache.org/jira/browse/BEAM-9063&quot;&gt;BEAM-9063&lt;/a&gt; Docker images will be deployed to apache/beam repositories from 2.20&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;bugfixes&quot;&gt;Bugfixes&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://issues.apache.org/jira/browse/BEAM-9579&quot;&gt;BEAM-9579&lt;/a&gt; Fixed numpy operators in ApproximateQuantiles&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://issues.apache.org/jira/browse/BEAM-9277&quot;&gt;BEAM-9277&lt;/a&gt; Fixed exception when running in IPython notebook&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://issues.apache.org/jira/browse/BEAM-1833&quot;&gt;BEAM-1833&lt;/a&gt; Restructure Python pipeline construction to better follow the Runner API&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://issues.apache.org/jira/browse/BEAM-9225&quot;&gt;BEAM-9225&lt;/a&gt; Fixed Flink uberjar job termination bug&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://issues.apache.org/jira/browse/BEAM-9503&quot;&gt;BEAM-9503&lt;/a&gt; Fixed SyntaxError in process worker startup&lt;/li&gt;
  &lt;li&gt;Various bug fixes and performance improvements.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;known-issues&quot;&gt;Known Issues&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://issues.apache.org/jira/browse/BEAM-9322&quot;&gt;BEAM-9322&lt;/a&gt; Python SDK ignores manually set PCollection tags&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://issues.apache.org/jira/browse/BEAM-9445&quot;&gt;BEAM-9445&lt;/a&gt; Python SDK pre_optimize=all experiment may cause error&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://issues.apache.org/jira/browse/BEAM-9725&quot;&gt;BEAM-9725&lt;/a&gt; Python SDK performance regression for reshuffle transform&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;list-of-contributors&quot;&gt;List of Contributors&lt;/h2&gt;

&lt;p&gt;According to git shortlog, the following people contributed to the 2.20.0 release. Thank you to all contributors!&lt;/p&gt;

&lt;p&gt;Ahmet Altay, Alex Amato, Alexey Romanenko, Andrew Pilloud, Ankur Goenka, Anton Kedin, Boyuan Zhang, Brian Hulette, Brian Martin, Chamikara Jayalath
, Charles Chen, Craig Chambers, Daniel Oliveira, David Moravek, David Rieber, Dustin Rhodes, Etienne Chauchot, Gleb Kanterov, Hai Lu, Heejong Lee
, Ismaël Mejía, J Ross Thomson, Jan Lukavský, Jason Kuster, Jean-Baptiste Onofré, Jeff Klukas, João Cabrita, Juan Rael, Juta, Kasia Kucharczyk
, Kengo Seki, Kenneth Jung, Kenneth Knowles, Kyle Weaver, Kyle Winkelman, Lukas Drbal, Marek Simunek, Mark Liu, Maximilian Michels, Melissa Pashniak
, Michael Luckey, Michal Walenia, Mike Pedersen, Mikhail Gryzykhin, Niel Markwick, Pablo Estrada, Pascal Gula, Rehman Murad Ali, Reuven Lax, Rob, Robbe Sneyders
, Robert Bradshaw, Robert Burke, Rui Wang, Ruoyun Huang, Ryan Williams, Sam Rohde, Sam Whittle, Scott Wegner, Shoaib Zafar, Thomas Weise, Tianyang Hu, Tyler Akidau
, Udi Meiri, Valentyn Tymofieiev, Xinyu Liu, XuMingmin, ttanay, tvalentyn, Łukasz Gajowy&lt;/p&gt;
</description>
        <pubDate>Wed, 15 Apr 2020 01:00:01 -0700</pubDate>
        <link>https://beam.apache.org/blog/2020/04/15/beam-2.20.0.html</link>
        <guid isPermaLink="true">https://beam.apache.org/blog/2020/04/15/beam-2.20.0.html</guid>
        
        
        <category>blog</category>
        
      </item>
    
      <item>
        <title>Apache Beam 2.19.0</title>
        <description>&lt;!--
Licensed under the Apache License, Version 2.0 (the &quot;License&quot;);
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an &quot;AS IS&quot; BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
--&gt;

&lt;p&gt;We are happy to present the new 2.19.0 release of Beam. This release includes both improvements and new functionality.
See the &lt;a href=&quot;/get-started/downloads/#2190-2020-02-04&quot;&gt;download page&lt;/a&gt; for this release.&lt;!--more--&gt;
For more information on changes in 2.19.0, check out the
&lt;a href=&quot;https://issues.apache.org/jira/secure/ReleaseNote.jspa?projectId=12319527&amp;amp;version=12346582&quot;&gt;detailed release notes&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;highlights&quot;&gt;Highlights&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;Multiple improvements made into Python SDK harness: 
 &lt;a href=&quot;https://issues.apache.org/jira/browse/BEAM-8624&quot;&gt;BEAM-8624&lt;/a&gt;, 
 &lt;a href=&quot;https://issues.apache.org/jira/browse/BEAM-8623&quot;&gt;BEAM-8623&lt;/a&gt;, 
 &lt;a href=&quot;https://issues.apache.org/jira/browse/BEAM-7949&quot;&gt;BEAM-7949&lt;/a&gt;, 
 &lt;a href=&quot;https://issues.apache.org/jira/browse/BEAM-8935&quot;&gt;BEAM-8935&lt;/a&gt;, 
 &lt;a href=&quot;https://issues.apache.org/jira/browse/BEAM-8816&quot;&gt;BEAM-8816&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;ios&quot;&gt;I/Os&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://issues.apache.org/jira/browse/BEAM-1440&quot;&gt;BEAM-1440&lt;/a&gt; Create a BigQuery source (that implements iobase.BoundedSource) for Python SDK&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://issues.apache.org/jira/browse/BEAM-2572&quot;&gt;BEAM-2572&lt;/a&gt; Implement an S3 filesystem for Python SDK&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://issues.apache.org/jira/browse/BEAM-5192&quot;&gt;BEAM-5192&lt;/a&gt; Support Elasticsearch 7.x&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://issues.apache.org/jira/browse/BEAM-8745&quot;&gt;BEAM-8745&lt;/a&gt; More fine-grained controls for the size of a BigQuery Load job&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://issues.apache.org/jira/browse/BEAM-8801&quot;&gt;BEAM-8801&lt;/a&gt; PubsubMessageToRow should not check useFlatSchema() in processElement&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://issues.apache.org/jira/browse/BEAM-8953&quot;&gt;BEAM-8953&lt;/a&gt; Extend ParquetIO.Read/ReadFiles.Builder to support Avro GenericData model&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://issues.apache.org/jira/browse/BEAM-8946&quot;&gt;BEAM-8946&lt;/a&gt; Report collection size from MongoDBIOIT&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://issues.apache.org/jira/browse/BEAM-8978&quot;&gt;BEAM-8978&lt;/a&gt; Report saved data size from HadoopFormatIOIT&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;new-features--improvements&quot;&gt;New Features / Improvements&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://issues.apache.org/jira/browse/BEAM-6008&quot;&gt;BEAM-6008&lt;/a&gt; Improve error reporting in Java/Python PortableRunner&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://issues.apache.org/jira/browse/BEAM-8296&quot;&gt;BEAM-8296&lt;/a&gt; Containerize the Spark job server&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://issues.apache.org/jira/browse/BEAM-8746&quot;&gt;BEAM-8746&lt;/a&gt; Allow the local job service to work from inside docker&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://issues.apache.org/jira/browse/BEAM-8837&quot;&gt;BEAM-8837&lt;/a&gt; PCollectionVisualizationTest: possible bug&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://issues.apache.org/jira/browse/BEAM-8139&quot;&gt;BEAM-8139&lt;/a&gt; Execute portable Spark application jar&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://issues.apache.org/jira/browse/BEAM-9019&quot;&gt;BEAM-9019&lt;/a&gt; Improve Spark Encoders (wrappers of beam coders)&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://issues.apache.org/jira/browse/BEAM-9053&quot;&gt;BEAM-9053&lt;/a&gt; Improve error message when unable to get the correct filesystem for specified path in Python SDK) Improve error message when unable to get the correct filesystem for specified path in Python SDK&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://issues.apache.org/jira/browse/BEAM-9055&quot;&gt;BEAM-9055&lt;/a&gt; Unify the config names of Fn Data API across languages&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;sql&quot;&gt;SQL&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://issues.apache.org/jira/browse/BEAM-5690&quot;&gt;BEAM-5690&lt;/a&gt; Issue with GroupByKey in BeamSql using SparkRunner&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://issues.apache.org/jira/browse/BEAM-8993&quot;&gt;BEAM-8993&lt;/a&gt; [SQL] MongoDb should use predicate push-down&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://issues.apache.org/jira/browse/BEAM-8844&quot;&gt;BEAM-8844&lt;/a&gt; [SQL] Create performance tests for BigQueryTable&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://issues.apache.org/jira/browse/BEAM-9023&quot;&gt;BEAM-9023&lt;/a&gt; Upgrade to ZetaSQL 2019.12.1&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;breaking-changes&quot;&gt;Breaking Changes&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://issues.apache.org/jira/browse/BEAM-8989&quot;&gt;BEAM-8989&lt;/a&gt; Backwards incompatible change in ParDo.getSideInputs (caught by failure when running Apache Nemo quickstart)&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://issues.apache.org/jira/browse/BEAM-8402&quot;&gt;BEAM-8402&lt;/a&gt; Backwards incompatible change related to how Environments are represented in Python &lt;code class=&quot;highlighter-rouge&quot;&gt;DirectRunner&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://issues.apache.org/jira/browse/BEAM-9218&quot;&gt;BEAM-9218&lt;/a&gt; Template staging broken on Beam 2.18.0&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;dependency-changes&quot;&gt;Dependency Changes&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://issues.apache.org/jira/browse/BEAM-8696&quot;&gt;BEAM-8696&lt;/a&gt; Beam Dependency Update Request: com.google.protobuf:protobuf-java&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://issues.apache.org/jira/browse/BEAM-8701&quot;&gt;BEAM-8701&lt;/a&gt; Beam Dependency Update Request: commons-io:commons-io&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://issues.apache.org/jira/browse/BEAM-8716&quot;&gt;BEAM-8716&lt;/a&gt; Beam Dependency Update Request: org.apache.commons:commons-csv&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://issues.apache.org/jira/browse/BEAM-8717&quot;&gt;BEAM-8717&lt;/a&gt; Beam Dependency Update Request: org.apache.commons:commons-lang3&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://issues.apache.org/jira/browse/BEAM-8749&quot;&gt;BEAM-8749&lt;/a&gt; Beam Dependency Update Request: com.datastax.cassandra:cassandra-driver-mapping&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://issues.apache.org/jira/browse/BEAM-5546&quot;&gt;BEAM-5546&lt;/a&gt; Beam Dependency Update Request: commons-codec:commons-codec&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;bugfixes&quot;&gt;Bugfixes&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://issues.apache.org/jira/browse/BEAM-9123&quot;&gt;BEAM-9123&lt;/a&gt; HadoopResourceId returns wrong directory name&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://issues.apache.org/jira/browse/BEAM-8962&quot;&gt;BEAM-8962&lt;/a&gt; FlinkMetricContainer causes churn in the JobManager and lets the web frontend malfunction&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://issues.apache.org/jira/browse/BEAM-5495&quot;&gt;BEAM-5495&lt;/a&gt; PipelineResources algorithm is not working in most environments&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://issues.apache.org/jira/browse/BEAM-8025&quot;&gt;BEAM-8025&lt;/a&gt; Cassandra IO classMethod test is flaky&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://issues.apache.org/jira/browse/BEAM-8577&quot;&gt;BEAM-8577&lt;/a&gt; FileSystems may have not be initialized during ResourceId deserialization&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://issues.apache.org/jira/browse/BEAM-8582&quot;&gt;BEAM-8582&lt;/a&gt; Python SDK emits duplicate records for Default and AfterWatermark triggers&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://issues.apache.org/jira/browse/BEAM-8943&quot;&gt;BEAM-8943&lt;/a&gt; SDK harness servers don’t shut down properly when SDK harness environment cleanup fails&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://issues.apache.org/jira/browse/BEAM-8995&quot;&gt;BEAM-8995&lt;/a&gt; apache_beam.io.gcp.bigquery_read_it_test failing on Py3.5 PC with: TypeError: the JSON object must be str, not ‘bytes’&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://issues.apache.org/jira/browse/BEAM-8999&quot;&gt;BEAM-8999&lt;/a&gt; PGBKCVOperation does not respect timestamp combiners&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://issues.apache.org/jira/browse/BEAM-9050&quot;&gt;BEAM-9050&lt;/a&gt; Beam pickler doesn’t pickle classes that have &lt;strong&gt;module&lt;/strong&gt; set to None.&lt;/li&gt;
  &lt;li&gt;&lt;/li&gt;
  &lt;li&gt;Various bug fixes and performance improvements.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;list-of-contributors&quot;&gt;List of Contributors&lt;/h2&gt;

&lt;p&gt;According to git shortlog, the following people contributed to the 2.19.0 release. Thank you to all contributors!&lt;/p&gt;

&lt;p&gt;Ahmet Altay, Alex Amato, Alexey Romanenko, Andrew Pilloud, Ankur Goenka, Anton Kedin, Boyuan Zhang, Brian Hulette, Brian Martin, Chamikara Jayalath, Charles Chen, Craig Chambers, Daniel Oliveira, David Moravek, David Rieber, Dustin Rhodes, Etienne Chauchot, Gleb Kanterov, Hai Lu, Heejong Lee, Ismaël Mejía, Jan Lukavský, Jason Kuster, Jean-Baptiste Onofré, Jeff Klukas, João Cabrita, J Ross Thomson, Juan Rael, Juta, Kasia Kucharczyk, Kengo Seki, Kenneth Jung, Kenneth Knowles, Kyle Weaver, Kyle Winkelman, Lukas Drbal, Łukasz Gajowy, Marek Simunek, Mark Liu, Maximilian Michels, Melissa Pashniak, Michael Luckey, Michal Walenia, Mike Pedersen, Mikhail Gryzykhin, Niel Markwick, Pablo Estrada, Pascal Gula, Reuven Lax, Rob, Robbe Sneyders, Robert Bradshaw, Robert Burke, Rui Wang, Ruoyun Huang, Ryan Williams, Sam Rohde, Sam Whittle, Scott Wegner, Thomas Weise, Tianyang Hu, ttanay, tvalentyn, Tyler Akidau, Udi Meiri, Valentyn Tymofieiev, Xinyu Liu, XuMingmin&lt;/p&gt;
</description>
        <pubDate>Tue, 04 Feb 2020 00:00:01 -0800</pubDate>
        <link>https://beam.apache.org/blog/2020/02/04/beam-2.19.0.html</link>
        <guid isPermaLink="true">https://beam.apache.org/blog/2020/02/04/beam-2.19.0.html</guid>
        
        
        <category>blog</category>
        
      </item>
    
      <item>
        <title>Apache Beam 2.18.0</title>
        <description>&lt;!--
Licensed under the Apache License, Version 2.0 (the &quot;License&quot;);
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an &quot;AS IS&quot; BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
--&gt;

&lt;p&gt;We are happy to present the new 2.18.0 release of Beam. This release includes both improvements and new functionality.
See the &lt;a href=&quot;/get-started/downloads/#2180-2020-01-23&quot;&gt;download page&lt;/a&gt; for this release.&lt;!--more--&gt;
For more information on changes in 2.18.0, check out the
&lt;a href=&quot;https://issues.apache.org/jira/secure/ReleaseNote.jspa?version=12346383&amp;amp;projectId=12319527&quot;&gt;detailed release notes&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;highlights&quot;&gt;Highlights&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://issues.apache.org/jira/browse/BEAM-8470&quot;&gt;BEAM-8470&lt;/a&gt; - Create a new Spark runner based on Spark Structured streaming framework&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;ios&quot;&gt;I/Os&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://issues.apache.org/jira/browse/BEAM-7636&quot;&gt;BEAM-7636&lt;/a&gt; - Added SqsIO v2 support.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://issues.apache.org/jira/browse/BEAM-8513&quot;&gt;BEAM-8513&lt;/a&gt; - RabbitMqIO: Allow reads from exchange-bound queue without declaring the exchange.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://issues.apache.org/jira/browse/BEAM-8540&quot;&gt;BEAM-8540&lt;/a&gt; - Fix CSVSink example in FileIO docs&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;new-features--improvements&quot;&gt;New Features / Improvements&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://issues.apache.org/jira/browse/BEAM-5878&quot;&gt;BEAM-5878&lt;/a&gt; - Added support DoFns with Keyword-only arguments in Python 3.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://issues.apache.org/jira/browse/BEAM-6756&quot;&gt;BEAM-6756&lt;/a&gt; - Improved support for lazy iterables in schemas (Java).&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://issues.apache.org/jira/browse/BEAM-4776&quot;&gt;BEAM-4776&lt;/a&gt; AND &lt;a href=&quot;https://issues.apache.org/jira/browse/BEAM-4777&quot;&gt;BEAM-4777&lt;/a&gt; - Added metrics supports to portable runners.&lt;/li&gt;
  &lt;li&gt;Various improvements to Interactive Beam: &lt;a href=&quot;https://issues.apache.org/jira/browse/BEAM-7760&quot;&gt;BEAM-7760&lt;/a&gt;, &lt;a href=&quot;https://issues.apache.org/jira/browse/BEAM-8379&quot;&gt;BEAM-8379&lt;/a&gt;, &lt;a href=&quot;https://issues.apache.org/jira/browse/BEAM-8016&quot;&gt;BEAM-8016&lt;/a&gt;, &lt;a href=&quot;https://issues.apache.org/jira/browse/BEAM-8016&quot;&gt;BEAM-8016&lt;/a&gt;.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://issues.apache.org/jira/browse/BEAM-8658&quot;&gt;BEAM-8658&lt;/a&gt; - Optionally set artifact staging port in FlinkUberJarJobServer.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://issues.apache.org/jira/browse/BEAM-8660&quot;&gt;BEAM-8660&lt;/a&gt; - Override returned artifact staging endpoint&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;sql&quot;&gt;SQL&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://issues.apache.org/jira/browse/BEAM-8343&quot;&gt;BEAM-8343&lt;/a&gt; - [SQL] Add means for IO APIs to support predicate and/or project push-down when running SQL pipelines. And &lt;a href=&quot;https://issues.apache.org/jira/browse/BEAM-8468&quot;&gt;BEAM-8468&lt;/a&gt;, &lt;a href=&quot;https://issues.apache.org/jira/browse/BEAM-8365&quot;&gt;BEAM-8365&lt;/a&gt;, &lt;a href=&quot;https://issues.apache.org/jira/browse/BEAM-8508&quot;&gt;BEAM-8508&lt;/a&gt;.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://issues.apache.org/jira/browse/BEAM-8427&quot;&gt;BEAM-8427&lt;/a&gt; - [SQL] Add support for MongoDB source.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://issues.apache.org/jira/browse/BEAM-8456&quot;&gt;BEAM-8456&lt;/a&gt; - Add pipeline option to control truncate of BigQuery data processed by Beam SQL.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;breaking-changes&quot;&gt;Breaking Changes&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://issues.apache.org/jira/browse/BEAM-8814&quot;&gt;BEAM-8814&lt;/a&gt; - –no_auth flag changed to boolean type.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;deprecations&quot;&gt;Deprecations&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://issues.apache.org/jira/browse/BEAM-8252&quot;&gt;BEAM-8252&lt;/a&gt; AND &lt;a href=&quot;https://issues.apache.org/jira/browse/BEAM-8254&quot;&gt;BEAM-8254&lt;/a&gt; Add worker_region and worker_zone options. Deprecated –zone flag and –worker_region experiment argument.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;dependency-changes&quot;&gt;Dependency Changes&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://issues.apache.org/jira/browse/BEAM-7078&quot;&gt;BEAM-7078&lt;/a&gt; - com.amazonaws:amazon-kinesis-client updated to 1.13.0.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://issues.apache.org/jira/browse/BEAM-8822&quot;&gt;BEAM-8822&lt;/a&gt; - Upgrade Hadoop dependencies to version 2.8.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;bugfixes&quot;&gt;Bugfixes&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://issues.apache.org/jira/browse/BEAM-7917&quot;&gt;BEAM-7917&lt;/a&gt; - Python datastore v1new fails on retry.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://issues.apache.org/jira/browse/BEAM-7981&quot;&gt;BEAM-7981&lt;/a&gt; - ParDo function wrapper doesn’t support Iterable output types.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://issues.apache.org/jira/browse/BEAM-8146&quot;&gt;BEAM-8146&lt;/a&gt; - SchemaCoder/RowCoder have no equals() function.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://issues.apache.org/jira/browse/BEAM-8347&quot;&gt;BEAM-8347&lt;/a&gt; - UnboundedRabbitMqReader can fail to advance watermark if no new data comes in.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://issues.apache.org/jira/browse/BEAM-8352&quot;&gt;BEAM-8352&lt;/a&gt; - Reading records in background may lead to OOM errors&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://issues.apache.org/jira/browse/BEAM-8480&quot;&gt;BEAM-8480&lt;/a&gt; - Explicitly set restriction coder for bounded reader wrapper SDF.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://issues.apache.org/jira/browse/BEAM-8515&quot;&gt;BEAM-8515&lt;/a&gt; - Ensure that ValueProvider types have equals/hashCode implemented for comparison reasons.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://issues.apache.org/jira/browse/BEAM-8579&quot;&gt;BEAM-8579&lt;/a&gt; - Strip UTF-8 BOM bytes (if present) in TextSource.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://issues.apache.org/jira/browse/BEAM-8657&quot;&gt;BEAM-8657&lt;/a&gt; - Not doing Combiner lifting for data-driven triggers.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://issues.apache.org/jira/browse/BEAM-8663&quot;&gt;BEAM-8663&lt;/a&gt; - BundleBasedRunner Stacked Bundles don’t respect PaneInfo.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://issues.apache.org/jira/browse/BEAM-8667&quot;&gt;BEAM-8667&lt;/a&gt; - Data channel should to avoid unlimited buffering in Python SDK.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://issues.apache.org/jira/browse/BEAM-8802&quot;&gt;BEAM-8802&lt;/a&gt; - Timestamp combiner not respected across bundles in streaming mode.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://issues.apache.org/jira/browse/BEAM-8803&quot;&gt;BEAM-8803&lt;/a&gt; - Default behaviour for Python BQ Streaming inserts sink should be to retry always.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://issues.apache.org/jira/browse/BEAM-8825&quot;&gt;BEAM-8825&lt;/a&gt; - OOM when writing large numbers of ‘narrow’ rows.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://issues.apache.org/jira/browse/BEAM-8835&quot;&gt;BEAM-8835&lt;/a&gt; - Artifact retrieval fails with FlinkUberJarJobServer&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://issues.apache.org/jira/browse/BEAM-8836&quot;&gt;BEAM-8836&lt;/a&gt; - ExternalTransform is not providing a unique name&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://issues.apache.org/jira/browse/BEAM-8884&quot;&gt;BEAM-8884&lt;/a&gt; - Python MongoDBIO TypeError when splitting.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://issues.apache.org/jira/browse/BEAM-9041&quot;&gt;BEAM-9041&lt;/a&gt; - SchemaCoder equals should not rely on from/toRowFunction equality.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://issues.apache.org/jira/browse/BEAM-9042&quot;&gt;BEAM-9042&lt;/a&gt; - AvroUtils.schemaCoder(schema) produces a not serializable SchemaCoder.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://issues.apache.org/jira/browse/BEAM-9065&quot;&gt;BEAM-9065&lt;/a&gt; - Spark runner accumulates metrics (incorrectly) between runs.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://issues.apache.org/jira/browse/BEAM-6303&quot;&gt;BEAM-6303&lt;/a&gt; - Add .parquet extension to files in ParquetIO.&lt;/li&gt;
  &lt;li&gt;Various bug fixes and performance improvements.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;known-issues&quot;&gt;Known Issues&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://issues.apache.org/jira/browse/BEAM-8882&quot;&gt;BEAM-8882&lt;/a&gt; - Python: &lt;code class=&quot;highlighter-rouge&quot;&gt;beam.Create&lt;/code&gt; no longer preserves order unless &lt;code class=&quot;highlighter-rouge&quot;&gt;reshuffle=False&lt;/code&gt; is passed in as an argument.&lt;/p&gt;

    &lt;p&gt;You may encounter this issue when using DirectRunner.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://issues.apache.org/jira/browse/BEAM-9065&quot;&gt;BEAM-9065&lt;/a&gt; - Spark runner accumulates metrics (incorrectly) between runs&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://issues.apache.org/jira/browse/BEAM-9123&quot;&gt;BEAM-9123&lt;/a&gt; - HadoopResourceId returns wrong directory name&lt;/li&gt;
  &lt;li&gt;See a full list of open &lt;a href=&quot;https://issues.apache.org/jira/issues/?jql=project%20%3D%20BEAM%20AND%20affectedVersion%20%3D%202.18.0%20ORDER%20BY%20priority%20DESC%2C%20updated%20DESC&quot;&gt;issues that affect&lt;/a&gt; this version.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://issues.apache.org/jira/browse/BEAM-9144&quot;&gt;BEAM-9144&lt;/a&gt; - If you are using Avro 1.9.x with Beam you should not upgrade to this version. There is an issue with timestamp conversions. A fix will be available in the next release.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;list-of-contributors&quot;&gt;List of Contributors&lt;/h2&gt;

&lt;p&gt;According to git shortlog, the following people contributed to the 2.18.0 release. Thank you to all contributors!&lt;/p&gt;

&lt;p&gt;Ahmet Altay, Aizhamal Nurmamat kyzy, Alan Myrvold, Alexey Romanenko, Alex Van Boxel, Andre Araujo, Andrew Crites, Andrew Pilloud, Aryan Naraghi, Boyuan Zhang, Brian Hulette, bumblebee-coming, Cerny Ondrej, Chad Dombrova, Chamikara Jayalath, Changming Ma, Chun Yang, cmachgodaddy, Colm O hEigeartaigh, Craig Chambers, Daniel Oliveira, Daniel Robert, David Cavazos, David Moravek, David Song, dependabot[bot], Derek, Dmytro Sadovnychyi, Elliotte Rusty Harold, Etienne Chauchot, Hai Lu, Henry Suryawirawan, Ismaël Mejía, Jack Whelpton, Jan Lukavský, Jean-Baptiste Onofré, Jeff Klukas, Jincheng Sun, Jing, Jing Chen, Joe Tsai, Jonathan Alvarez-Gutierrez, Kamil Wasilewski, KangZhiDong, Kasia Kucharczyk, Kenneth Knowles, kirillkozlov, Kirill Kozlov, Kyle Weaver, liumomo315, lostluck, Łukasz Gajowy, Luke Cwik, Mark Liu, Maximilian Michels, Michal Walenia, Mikhail Gryzykhin, Niel Markwick, Ning Kang, nlofeudo, pabloem, Pablo Estrada, Pankaj Gudlani, Piotr Szczepanik, Primevenn, Reuven Lax, Robert Bradshaw, Robert Burke, Rui Wang, Ruoyun Huang, RusOr10n, Ryan Skraba, Saikat Maitra, sambvfx, Sam Rohde, Samuel Husso, Stefano, Steve Koonce, Steve Niemitz, sunjincheng121, Thomas Weise, Tianyang Hu, Tim Robertson, Tomo Suzuki, tvalentyn, Udi Meiri, Valentyn Tymofieiev, Viola Lyu, Wenjia Liu, Yichi Zhang, Yifan Zou, yoshiki.obata, Yueyang Qiu, ziel, 康智冬&lt;/p&gt;
</description>
        <pubDate>Thu, 23 Jan 2020 00:00:01 -0800</pubDate>
        <link>https://beam.apache.org/blog/2020/01/13/beam-2.18.0.html</link>
        <guid isPermaLink="true">https://beam.apache.org/blog/2020/01/13/beam-2.18.0.html</guid>
        
        
        <category>blog</category>
        
      </item>
    
      <item>
        <title>Apache Beam 2.17.0</title>
        <description>&lt;!--
Licensed under the Apache License, Version 2.0 (the &quot;License&quot;);
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an &quot;AS IS&quot; BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
--&gt;

&lt;p&gt;We are happy to present the new 2.17.0 release of Beam. This release includes both improvements and new functionality.
Users of the MongoDbIO connector are encouraged to upgrade to this release to address a &lt;a href=&quot;/security/CVE-2020-1929/&quot;&gt;security vulnerability&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;See the &lt;a href=&quot;/get-started/downloads/#2170-2020-01-06&quot;&gt;download page&lt;/a&gt; for this release.&lt;!--more--&gt;
For more information on changes in 2.17.0, check out the
&lt;a href=&quot;https://issues.apache.org/jira/secure/ReleaseNote.jspa?version=12345970&amp;amp;projectId=12319527&quot;&gt;detailed release notes&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;highlights&quot;&gt;Highlights&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://issues.apache.org/jira/browse/BEAM-7962&quot;&gt;BEAM-7962&lt;/a&gt; - Drop support for Flink 1.5 and 1.6&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://issues.apache.org/jira/browse/BEAM-7635&quot;&gt;BEAM-7635&lt;/a&gt; - Migrate SnsIO to AWS SDK for Java 2&lt;/li&gt;
  &lt;li&gt;Improved usability for portable Flink Runner
    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;https://issues.apache.org/jira/browse/BEAM-8183&quot;&gt;BEAM-8183&lt;/a&gt; - Optionally bundle multiple pipelines into a single Flink jar.&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;https://issues.apache.org/jira/browse/BEAM-8372&quot;&gt;BEAM-8372&lt;/a&gt; - Allow submission of Flink UberJar directly to flink cluster.&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;https://issues.apache.org/jira/browse/BEAM-8471&quot;&gt;BEAM-8471&lt;/a&gt; - Flink native job submission for portable pipelines.&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;https://issues.apache.org/jira/browse/BEAM-8312&quot;&gt;BEAM-8312&lt;/a&gt; - Flink portable pipeline jars do not need to stage artifacts remotely.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;new-features--improvements&quot;&gt;New Features / Improvements&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://issues.apache.org/jira/browse/BEAM-7730&quot;&gt;BEAM-7730&lt;/a&gt; - Add Flink 1.9 build target and Make FlinkRunner compatible with Flink 1.9.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://issues.apache.org/jira/browse/BEAM-7990&quot;&gt;BEAM-7990&lt;/a&gt; - Add ability to read parquet files into PCollection of pyarrow.Table.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://issues.apache.org/jira/browse/BEAM-8355&quot;&gt;BEAM-8355&lt;/a&gt; - Make BooleanCoder a standard coder.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://issues.apache.org/jira/browse/BEAM-8394&quot;&gt;BEAM-8394&lt;/a&gt; - Add withDataSourceConfiguration() method in JdbcIO.ReadRows class.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://issues.apache.org/jira/browse/BEAM-5428&quot;&gt;BEAM-5428&lt;/a&gt; - Implement cross-bundle state caching.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://issues.apache.org/jira/browse/BEAM-5967&quot;&gt;BEAM-5967&lt;/a&gt; - Add handling of DynamicMessage in ProtoCoder.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://issues.apache.org/jira/browse/BEAM-7473&quot;&gt;BEAM-7473&lt;/a&gt; - Update RestrictionTracker within Python to not be required to be thread safe.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://issues.apache.org/jira/browse/BEAM-7920&quot;&gt;BEAM-7920&lt;/a&gt; - Added AvroTableProvider to Beam SQL.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://issues.apache.org/jira/browse/BEAM-8098&quot;&gt;BEAM-8098&lt;/a&gt; - Improve documentation on BigQueryIO.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://issues.apache.org/jira/browse/BEAM-8100&quot;&gt;BEAM-8100&lt;/a&gt; - Add exception handling to Json transforms in Java SDK.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://issues.apache.org/jira/browse/BEAM-8306&quot;&gt;BEAM-8306&lt;/a&gt; - Improve estimation of data byte size reading from source in ElasticsearchIO.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://issues.apache.org/jira/browse/BEAM-8351&quot;&gt;BEAM-8351&lt;/a&gt; - Support passing in arbitrary KV pairs to sdk worker via external environment config.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://issues.apache.org/jira/browse/BEAM-8396&quot;&gt;BEAM-8396&lt;/a&gt; - Default to LOOPBACK mode for local flink (spark, …) runner.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://issues.apache.org/jira/browse/BEAM-8410&quot;&gt;BEAM-8410&lt;/a&gt; - JdbcIO should support setConnectionInitSqls in its DataSource.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://issues.apache.org/jira/browse/BEAM-8609&quot;&gt;BEAM-8609&lt;/a&gt; - Add HllCount to Java transform catalog.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://issues.apache.org/jira/browse/BEAM-8861&quot;&gt;BEAM-8861&lt;/a&gt; - Disallow self-signed certificates by default in ElasticsearchIO.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;dependency-changes&quot;&gt;Dependency Changes&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://issues.apache.org/jira/browse/BEAM-8285&quot;&gt;BEAM-8285&lt;/a&gt; - Upgrade ZetaSQL to 2019.09.1.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://issues.apache.org/jira/browse/BEAM-8392&quot;&gt;BEAM-8392&lt;/a&gt; - Upgrade pyarrow version bounds: 0.15.1&amp;lt;= to &amp;lt;0.16.0.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://issues.apache.org/jira/browse/BEAM-5895&quot;&gt;BEAM-5895&lt;/a&gt; - Upgrade com.rabbitmq:amqp-client to 5.7.3.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://issues.apache.org/jira/browse/BEAM-6896&quot;&gt;BEAM-6896&lt;/a&gt; - Upgrade PyYAML version bounds: 3.12&amp;lt;= to &amp;lt;6.0.0.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;bugfixes&quot;&gt;Bugfixes&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;[BEAM-8819] - AvroCoder for SpecificRecords is not serialized correctly since 2.13.0&lt;/li&gt;
  &lt;li&gt;Various bug fixes and performance improvements.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;known-issues&quot;&gt;Known Issues&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://issues.apache.org/jira/browse/BEAM-8989&quot;&gt;BEAM-8989&lt;/a&gt; Apache Nemo
runner broken due to backwards incompatible change since 2.16.0.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;list-of-contributors&quot;&gt;List of Contributors&lt;/h2&gt;

&lt;p&gt;According to git shortlog, the following people contributed to the 2.17.0 release. Thank you to all contributors!&lt;/p&gt;

&lt;p&gt;Ahmet Altay, Alan Myrvold, Alexey Romanenko, Andre-Philippe Paquet, Andrew
Pilloud, angulartist, Ankit Jhalaria, Ankur Goenka, Anton Kedin, Aryan Naraghi,
Aurélien Geron, B M VISHWAS, Bartok Jozsef, Boyuan Zhang, Brian Hulette, Cerny
Ondrej, Chad Dombrova, Chamikara Jayalath, ChethanU, cmach, Colm O hEigeartaigh,
Cyrus Maden, Daniel Oliveira, Daniel Robert, Dante, David Cavazos, David
Moravek, David Yan, Enrico Canzonieri, Etienne Chauchot, gxercavins, Hai Lu,
Hannah Jiang, Ian Lance Taylor, Ismaël Mejía, Israel Herraiz, James Wen, Jan
Lukavský, Jean-Baptiste Onofré, Jeff Klukas, jesusrv1103, Jofre, Kai Jiang,
Kamil Wasilewski, Kasia Kucharczyk, Kenneth Knowles, Kirill Kozlov,
kirillkozlov, Kohki YAMAGIWA, Kyle Weaver, Leonardo Alves Miguel, lloigor,
lostluck, Luis Enrique Ortíz Ramirez, Luke Cwik, Mark Liu, Maximilian Michels,
Michal Walenia, Mikhail Gryzykhin, mrociorg, Nicolas Delsaux, Ning Kang, NING
KANG, Pablo Estrada, pabloem, Piotr Szczepanik, rahul8383, Rakesh Kumar, Renat
Nasyrov, Reuven Lax, Robert Bradshaw, Robert Burke, Rui Wang, Ruslan Altynnikov,
Ryan Skraba, Salman Raza, Saul Chavez, Sebastian Jambor, sunjincheng121, Tatu
Saloranta, tchiarato, Thomas Weise, Tomo Suzuki, Tudor Marian, tvalentyn, Udi
Meiri, Valentyn Tymofieiev, Viola Lyu, Vishwas, Yichi Zhang, Yifan Zou, Yueyang
Qiu, Łukasz Gajowy&lt;/p&gt;

</description>
        <pubDate>Mon, 06 Jan 2020 00:00:01 -0800</pubDate>
        <link>https://beam.apache.org/blog/2020/01/06/beam-2.17.0.html</link>
        <guid isPermaLink="true">https://beam.apache.org/blog/2020/01/06/beam-2.17.0.html</guid>
        
        
        <category>blog</category>
        
      </item>
    
      <item>
        <title>Apache Beam 2.16.0</title>
        <description>&lt;!--
Licensed under the Apache License, Version 2.0 (the &quot;License&quot;);
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an &quot;AS IS&quot; BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
--&gt;

&lt;p&gt;We are happy to present the new 2.16.0 release of Beam. This release includes both improvements and new functionality.
See the &lt;a href=&quot;/get-started/downloads/#2160-2019-10-07&quot;&gt;download page&lt;/a&gt; for this release.&lt;!--more--&gt;
For more information on changes in 2.16.0, check out the
&lt;a href=&quot;https://issues.apache.org/jira/secure/ReleaseNote.jspa?projectId=12319527&amp;amp;version=12345494&quot;&gt;detailed release notes&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;highlights&quot;&gt;Highlights&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;Customizable Docker container images released and supported by Beam portable runners on Python 2.7, 3.5, 3.6, 3.7. (&lt;a href=&quot;https://issues.apache.org/jira/browse/BEAM-7907&quot;&gt;BEAM-7907&lt;/a&gt;)&lt;/li&gt;
  &lt;li&gt;Integration improvements for Python Streaming on Dataflow including service features like autoscaling, drain, update, streaming engine and counter updates.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;new-features--improvements&quot;&gt;New Features / Improvements&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;A new count distinct transform based on BigQuery compatible HyperLogLog++ implementation. (&lt;a href=&quot;https://issues.apache.org/jira/browse/BEAM-7013&quot;&gt;BEAM-7013&lt;/a&gt;)&lt;/li&gt;
  &lt;li&gt;Element counters in the Web UI graph representations for transforms for Python streaming jobs in Google Cloud Dataflow. (&lt;a href=&quot;https://issues.apache.org/jira/browse/BEAM-7045&quot;&gt;BEAM-7045&lt;/a&gt;)&lt;/li&gt;
  &lt;li&gt;Add SetState in Python sdk. (&lt;a href=&quot;https://issues.apache.org/jira/browse/BEAM-7741&quot;&gt;BEAM-7741&lt;/a&gt;)&lt;/li&gt;
  &lt;li&gt;Add hot key detection to Dataflow Runner. (&lt;a href=&quot;https://issues.apache.org/jira/browse/BEAM-7820&quot;&gt;BEAM-7820&lt;/a&gt;)&lt;/li&gt;
  &lt;li&gt;Add ability to get the list of submitted jobs from gRPC JobService. (&lt;a href=&quot;https://issues.apache.org/jira/browse/BEAM-7927&quot;&gt;BEAM-7927&lt;/a&gt;)&lt;/li&gt;
  &lt;li&gt;Portable Flink pipelines can now be bundled into executable jars. (&lt;a href=&quot;https://issues.apache.org/jira/browse/BEAM-7966&quot;&gt;BEAM-7966&lt;/a&gt;, &lt;a href=&quot;https://issues.apache.org/jira/browse/BEAM-7967&quot;&gt;BEAM-7967&lt;/a&gt;)&lt;/li&gt;
  &lt;li&gt;SQL join selection should be done in planner, not in expansion to PTransform. (&lt;a href=&quot;https://issues.apache.org/jira/browse/BEAM-6114&quot;&gt;BEAM-6114&lt;/a&gt;)&lt;/li&gt;
  &lt;li&gt;A Python Sink for BigQuery with File Loads in Streaming. (&lt;a href=&quot;https://issues.apache.org/jira/browse/BEAM-6611&quot;&gt;BEAM-6611&lt;/a&gt;)&lt;/li&gt;
  &lt;li&gt;Python BigQuery sink should be able to handle 15TB load job quota. (&lt;a href=&quot;https://issues.apache.org/jira/browse/BEAM-7588&quot;&gt;BEAM-7588&lt;/a&gt;)&lt;/li&gt;
  &lt;li&gt;Spark portable runner: reuse SDK harness. (&lt;a href=&quot;https://issues.apache.org/jira/browse/BEAM-7600&quot;&gt;BEAM-7600&lt;/a&gt;)&lt;/li&gt;
  &lt;li&gt;BigQuery File Loads to work well with load job size limits. (&lt;a href=&quot;https://issues.apache.org/jira/browse/BEAM-7742&quot;&gt;BEAM-7742&lt;/a&gt;)&lt;/li&gt;
  &lt;li&gt;External environment with containerized worker pool. (&lt;a href=&quot;https://issues.apache.org/jira/browse/BEAM-7980&quot;&gt;BEAM-7980&lt;/a&gt;)&lt;/li&gt;
  &lt;li&gt;Use OffsetRange as restriction for OffsetRestrictionTracker. (&lt;a href=&quot;https://issues.apache.org/jira/browse/BEAM-8014&quot;&gt;BEAM-8014&lt;/a&gt;)&lt;/li&gt;
  &lt;li&gt;Get logs for SDK worker Docker containers. (&lt;a href=&quot;https://issues.apache.org/jira/browse/BEAM-8015&quot;&gt;BEAM-8015&lt;/a&gt;)&lt;/li&gt;
  &lt;li&gt;PCollection boundedness is tracked and propagated in python sdk. (&lt;a href=&quot;https://issues.apache.org/jira/browse/BEAM-8088&quot;&gt;BEAM-8088&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;dependency-changes&quot;&gt;Dependency Changes&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;Upgrade “com.amazonaws:amazon-kinesis-producer” to version 0.13.1. (&lt;a href=&quot;https://issues.apache.org/jira/browse/BEAM-7894&quot;&gt;BEAM-7894&lt;/a&gt;)&lt;/li&gt;
  &lt;li&gt;Upgrade to joda time 2.10.3 to get updated TZDB. (&lt;a href=&quot;https://issues.apache.org/jira/browse/BEAM-8161&quot;&gt;BEAM-8161&lt;/a&gt;)&lt;/li&gt;
  &lt;li&gt;Upgrade Jackson to version 2.9.10. (&lt;a href=&quot;https://issues.apache.org/jira/browse/BEAM-8299&quot;&gt;BEAM-8299&lt;/a&gt;)&lt;/li&gt;
  &lt;li&gt;Upgrade grpcio minimum required version to 1.12.1. (&lt;a href=&quot;https://issues.apache.org/jira/browse/BEAM-7986&quot;&gt;BEAM-7986&lt;/a&gt;)&lt;/li&gt;
  &lt;li&gt;Upgrade funcsigs minimum required version to 1.0.2 in Python2. (&lt;a href=&quot;https://issues.apache.org/jira/browse/BEAM-7060&quot;&gt;BEAM-7060&lt;/a&gt;)&lt;/li&gt;
  &lt;li&gt;Upgrade google-cloud-pubsub maximum required version to 1.0.0. (&lt;a href=&quot;https://issues.apache.org/jira/browse/BEAM-5539&quot;&gt;BEAM-5539&lt;/a&gt;)&lt;/li&gt;
  &lt;li&gt;Upgrade google-cloud-bigtable maximum required version to 1.0.0. (&lt;a href=&quot;https://issues.apache.org/jira/browse/BEAM-5539&quot;&gt;BEAM-5539&lt;/a&gt;)&lt;/li&gt;
  &lt;li&gt;Upgrade dill version to 0.3.0. (&lt;a href=&quot;https://issues.apache.org/jira/browse/BEAM-8324&quot;&gt;BEAM-8324&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;bugfixes&quot;&gt;Bugfixes&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;Various bug fixes and performance improvements.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;known-issues&quot;&gt;Known Issues&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;Given that Python 2 will reach EOL on Jan 1 2020, Python 2 users of Beam will now receive a warning that new releases of Apache Beam will soon support Python 3 only.&lt;/li&gt;
  &lt;li&gt;Filesystems not properly registered using FileIO.write in FlinkRunner. (&lt;a href=&quot;https://issues.apache.org/jira/browse/BEAM-8303&quot;&gt;BEAM-8303&lt;/a&gt;)&lt;/li&gt;
  &lt;li&gt;Performance regression in Java DirectRunner in streaming mode. (&lt;a href=&quot;https://issues.apache.org/jira/browse/BEAM-8363&quot;&gt;BEAM-8363&lt;/a&gt;)&lt;/li&gt;
  &lt;li&gt;Can’t install the Python SDK on macOS 10.15. (&lt;a href=&quot;https://issues.apache.org/jira/browse/BEAM-8368&quot;&gt;BEAM-8368&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;list-of-contributors&quot;&gt;List of Contributors&lt;/h2&gt;

&lt;p&gt;According to git shortlog, the following people contributed to the 2.16.0 release. Thank you to all contributors!&lt;/p&gt;

&lt;p&gt;Ahmet Altay, Alex Van Boxel, Alexey Romanenko, Alexey Strokach, Alireza Samadian,
Andre-Philippe Paquet, Andrew Pilloud, Ankur Goenka, Anton Kedin, Aryan Naraghi,
B M VISHWAS, Bartok Jozsef, Bill Neubauer, Boyuan Zhang, Brian Hulette, Bruno Volpato,
Chad Dombrova, Chamikara Jayalath, Charith Ellawala, Charles Chen, Claire McGinty,
Cyrus Maden, Daniel Oliveira, Dante, David Cavazos, David Moravek, David Yan,
Dominic Mitchell, Elias Djurfeldt, Enrico Canzonieri, Etienne Chauchot, Gleb Kanterov,
Hai Lu, Hannah Jiang, Heejong Lee, Ian Lance Taylor, Ismaël Mejía, Jack Whelpton,
James Wen, Jan Lukavský, Jean-Baptiste Onofré, Jofre, Kai Jiang, Kamil Wasilewski,
Kasia Kucharczyk, Kenneth Jung, Kenneth Knowles, Kirill Kozlov, Kohki YAMAGIWA,
Kyle Weaver, Kyle Winkelman, Ludovic Post, Luis Enrique Ortíz Ramirez, Luke Cwik,
Mark Liu, Maximilian Michels, Michal Walenia, Mike Kaplinskiy, Mikhail Gryzykhin,
NING KANG, Oliver Henlich, Pablo Estrada, Rakesh Kumar, Renat Nasyrov, Reuven Lax,
Robert Bradshaw, Robert Burke, Rui Wang, Ruoyun Huang, Ryan Skraba, Sahith Nallapareddy,
Salman Raza, Sam Rohde, Saul Chavez, Shoaib, Shoaib Zafar, Slava Chernyak, Tanay Tummalapalli,
Thinh Ha, Thomas Weise, Tianzi Cai, Tim van der Lippe, Tomer Zeltzer, Tudor Marian,
Udi Meiri, Valentyn Tymofieiev, Yichi Zhang, Yifan Zou, Yueyang Qiu, gxercavins,
jesusrv1103, lostluck, matt-darwin, mrociorg, ostrokach, parahul, rahul8383, rosetn,
sunjincheng121, the1plummie, ttanay, tvalentyn, venn001, yoshiki.obata, Łukasz Gajowy&lt;/p&gt;
</description>
        <pubDate>Mon, 07 Oct 2019 01:00:01 -0700</pubDate>
        <link>https://beam.apache.org/blog/2019/10/07/beam-2.16.0.html</link>
        <guid isPermaLink="true">https://beam.apache.org/blog/2019/10/07/beam-2.16.0.html</guid>
        
        
        <category>blog</category>
        
      </item>
    
      <item>
        <title>Google Summer of Code '19</title>
        <description>&lt;!--
Licensed under the Apache License, Version 2.0 (the &quot;License&quot;);
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an &quot;AS IS&quot; BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
--&gt;

&lt;p&gt;Google Summer of Code was an amazing learning experience for me.
I contributed to open source, learned about Apache Beam’s internals and worked with the best engineers in the world.&lt;/p&gt;

&lt;!--more--&gt;

&lt;h2 id=&quot;motivation&quot;&gt;Motivation&lt;/h2&gt;
&lt;p&gt;Two of my friends had participated in GSoC in 2018. I was intrigued by their experience.
The idea of working on open-source software that could potentially be used by developers across the world, while being mentored by the best people in a field was exciting!
So, I decided to give Google Summer of Code a shot this year.&lt;/p&gt;

&lt;h2 id=&quot;what-is-google-summer-of-code&quot;&gt;What is Google Summer of Code?&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;https://summerofcode.withgoogle.com/&quot;&gt;Google Summer of Code&lt;/a&gt; is a global program hosted by Google focused on introducing students to open source software development.
Students work on a 3 month programming project with an open source organization during their break from university.&lt;/p&gt;

&lt;h2 id=&quot;why-apache-beam&quot;&gt;Why Apache Beam?&lt;/h2&gt;
&lt;p&gt;While interning at &lt;a href=&quot;https://atlan.com/&quot;&gt;Atlan&lt;/a&gt;, I discovered the field of Data Engineering. I found the challenges and the discussions of the engineers there interesting. While researching for my internship project, I came across the Streaming Systems book. It introduced me to the unified model of Apache Beam for Batch and Streaming Systems, which I was fascinated by.
I wanted to explore Data Engineering, so for GSoC, I wanted to work on a project in that field. Towards the end of my internship, I started contributing to Apache Airflow(very cool project) and Apache Beam, hoping one of them would participate in GSoC. I got lucky!&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://youtu.be/U2eWLb-LD44&quot;&gt;Also, Spotify’s Discover Weekly uses Apache Beam!&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;preparation&quot;&gt;Preparation&lt;/h2&gt;
&lt;p&gt;I had already read the &lt;a href=&quot;http://streamingsystems.net/&quot;&gt;Streaming Systems book&lt;/a&gt;. So, I had an idea of the concepts that Beam is built on, but had never actually used Beam.
Before actually submitting a proposal, I went through a bunch of resources to make sure I had a concrete understanding of Beam.
I read the &lt;a href=&quot;https://www.oreilly.com/ideas/the-world-beyond-batch-streaming-101&quot;&gt;Streaming 101&lt;/a&gt; and &lt;a href=&quot;https://www.oreilly.com/ideas/the-world-beyond-batch-streaming-102&quot;&gt;Streaming 102&lt;/a&gt; blogs by Tyler Akidau. They are the perfect introduction to Beam’s unified model for Batch and Streaming.
In addition, I watched all Beam talks on YouTube. You can find them on the &lt;a href=&quot;https://beam.apache.org/documentation/resources/videos-and-podcasts/&quot;&gt;Beam Website&lt;/a&gt;.
Beam has really good documentation. The &lt;a href=&quot;https://beam.apache.org/documentation/programming-guide/&quot;&gt;Programming Guide&lt;/a&gt; lays out all of Beam’s concepts really well. &lt;a href=&quot;https://beam.apache.org/documentation/runtime/model&quot;&gt;Beam’s execution model&lt;/a&gt; is also documented well and is a must-read to understand how Beam processes data.
&lt;a href=&quot;https://www.waitingforcode.com/apache-beam&quot;&gt;waitingforcode.com&lt;/a&gt; also has good blog posts about Beam concepts.
To get a better sense of the Beam codebase, I played around with it and worked on some PRs to understand Beam better and got familiar with the test suite and workflows.&lt;/p&gt;

&lt;h2 id=&quot;gsoc-journey&quot;&gt;GSoC Journey&lt;/h2&gt;
&lt;p&gt;GSoC has 2 phases. The first is the Community Bonding period in which students get familiar with the project and the community. The other is the actual Coding Period in which students work on their projects. Since the Coding Period has three evaluations spaced out by a month, I divided my project into three parts focusing on the implementation, tests, and documentation or improvements.&lt;/p&gt;

&lt;h3 id=&quot;project&quot;&gt;Project&lt;/h3&gt;
&lt;p&gt;My project(&lt;a href=&quot;https://issues.apache.org/jira/browse/BEAM-6611&quot;&gt;BEAM-6611&lt;/a&gt;) added support for File Loads method of inserting data into BigQuery for streaming pipelines. It builds on PR - &lt;a href=&quot;https://github.com/apache/beam/pull/7655&quot;&gt;#7655&lt;/a&gt; for &lt;a href=&quot;https://issues.apache.org/jira/browse/BEAM-6553&quot;&gt;BEAM-6553&lt;/a&gt; that added support in the Python SDK for writing to BigQuery using File Loads method for Batch pipelines. Streaming pipelines with non-default Windowing, Triggering and Accumulation mode can write data to BigQuery using file loads method. In case of failure, the pipeline will fail atomically. This means that each record will be loaded into BigQuery at-most-once.
You can find my proposal &lt;a href=&quot;https://docs.google.com/document/d/15Peyd3Z_wu5rvGWw8lMLpZuTyyreM_JOAEFFWvF97YY/edit?usp=sharing&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&quot;community-bonding&quot;&gt;Community Bonding&lt;/h3&gt;
&lt;p&gt;When GSoC started, my semester end exams had not yet finished. As a result, I couldn’t get much done. I worked on three PTransforms for the Python SDK - Latest, WithKeys and Reify.&lt;/p&gt;

&lt;h3 id=&quot;coding-period-i&quot;&gt;Coding Period I&lt;/h3&gt;
&lt;p&gt;In this period, I wrote some Integration Tests for the BigQuery sink using Streaming Inserts in streaming mode. I worked on a failing integration test for my project. I also finished the implementation of my project. But, one PostCommit test didn’t pass. I realized that the matcher for the Integration Test that queried BigQuery for the results was intended to be used in Batch mode. So, I wrote a version of the matcher to work in streaming mode.&lt;/p&gt;

&lt;h3 id=&quot;coding-period-ii&quot;&gt;Coding Period II&lt;/h3&gt;
&lt;p&gt;Even after I had added the matcher for streaming mode, the PostComit tests did not pass. A test was being run even though it was not specified. I isolated the failure to a &lt;a href=&quot;https://nose.readthedocs.io/en/latest/doc_tests/test_multiprocess/multiprocess.html#other-differences-in-test-running&quot;&gt;limitation&lt;/a&gt; of the multiprocess plugin for &lt;a href=&quot;https://nose.readthedocs.io/en/latest/&quot;&gt;nose(a Python test framework)&lt;/a&gt; due to which it found more tests than had been specified. It took me a while to figure this out. In this period, changes for my project got merged.
I also worked on small issues related to testing.&lt;/p&gt;

&lt;p&gt;This period was marked by a few exciting events:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Ending up in the top #100 contributors to apache/beam.&lt;/li&gt;
  &lt;li&gt;My first ever PR Review on an open source project.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;https://pbs.twimg.com/media/D_XNSC-UIAUmswG?format=png&amp;amp;name=small&quot; alt=&quot;Weird flex but ok&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;coding-period-iii&quot;&gt;Coding Period III&lt;/h3&gt;
&lt;p&gt;This was the final coding period before the program ended. Since my project was merged earlier than expected, my mentor suggested another issue(&lt;a href=&quot;https://issues.apache.org/jira/browse/BEAM-7742&quot;&gt;BEAM-7742&lt;/a&gt;) in the same area - BigQueryIO, that I found interesting. So, I worked on partitioning written files in BigQuery to ensure that all load jobs triggered adhere to the load job size limitations specified for BigQuery.
While working on my project, I was using a pipeline that uses PubSub as a source and BigQuery as a sink to validate my changes. My mentor suggested we add them to the Beam test suite as it would be the ultimate test for BigQueryIO. I also worked on adding this test to Beam.&lt;/p&gt;

&lt;p&gt;You can find the list of PRs I worked on &lt;a href=&quot;https://github.com/apache/beam/pulls?utf8=%E2%9C%93&amp;amp;q=is%3Apr+author%3Attanay&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;GSoC has been a lesson in discipline and goal-setting for me. Deciding what I wanted to work on and how much I wanted to get done each week was an important lesson.
I had never worked remotely, so this was a new experience. Although I struggled with it initially, I appreciate the flexibility that it comes with.
I also had a lot of fun learning about Apache Beam’s internals, and other tools in the same ecosystem.
This was also the first time I had written code with a test-first approach.&lt;/p&gt;

&lt;p&gt;I thank my mentor - Pablo Estrada, Apache Beam, The Apache Software Foundation and Google Summer of Code for this opportunity. I am also grateful to my mentor for helping me with everything I needed and more, and the Apache Beam community for being supportive and encouraging.&lt;/p&gt;

&lt;p&gt;With the right effort, perseverance, conviction, and a plan, anything is possible. Anything.&lt;/p&gt;
</description>
        <pubDate>Wed, 04 Sep 2019 01:00:01 -0700</pubDate>
        <link>https://beam.apache.org/blog/2019/09/04/gsoc-19.html</link>
        <guid isPermaLink="true">https://beam.apache.org/blog/2019/09/04/gsoc-19.html</guid>
        
        
        <category>blog</category>
        
        <category>gsoc</category>
        
      </item>
    
      <item>
        <title>Apache Beam 2.15.0</title>
        <description>&lt;!--
Licensed under the Apache License, Version 2.0 (the &quot;License&quot;);
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an &quot;AS IS&quot; BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
--&gt;

&lt;p&gt;We are happy to present the new 2.15.0 release of Beam. This release includes both improvements and new functionality.
See the &lt;a href=&quot;/get-started/downloads/#2150-2019-08-22&quot;&gt;download page&lt;/a&gt; for this release.&lt;!--more--&gt;
For more information on changes in 2.15.0, check out the
&lt;a href=&quot;https://issues.apache.org/jira/secure/ReleaseNote.jspa?projectId=12319527&amp;amp;version=12345489&quot;&gt;detailed release notes&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;highlights&quot;&gt;Highlights&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;Vendored Guava was upgraded to version 26.0.&lt;/li&gt;
  &lt;li&gt;Support multi-process execution on the FnApiRunner for Python. (&lt;a href=&quot;https://issues.apache.org/jira/browse/BEAM-3645&quot;&gt;BEAM-3645&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;ios&quot;&gt;I/Os&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;Add AvroIO.sink for IndexedRecord (FileIO compatible). (&lt;a href=&quot;https://issues.apache.org/jira/browse/BEAM-6480&quot;&gt;BEAM-6480&lt;/a&gt;)&lt;/li&gt;
  &lt;li&gt;Add support for writing to BigQuery clustered tables. (&lt;a href=&quot;https://issues.apache.org/jira/browse/BEAM-5191&quot;&gt;BEAM-5191&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;new-features--improvements&quot;&gt;New Features / Improvements&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;Support ParquetTable in SQL. (&lt;a href=&quot;https://issues.apache.org/jira/browse/BEAM-7728&quot;&gt;BEAM-7728&lt;/a&gt;)&lt;/li&gt;
  &lt;li&gt;Add hot key detection to Dataflow Runner. (&lt;a href=&quot;https://issues.apache.org/jira/browse/BEAM-7820&quot;&gt;BEAM-7820&lt;/a&gt;)&lt;/li&gt;
  &lt;li&gt;Support schemas in the JDBC sink. (&lt;a href=&quot;https://issues.apache.org/jira/browse/BEAM-6675&quot;&gt;BEAM-6675&lt;/a&gt;)&lt;/li&gt;
  &lt;li&gt;Report GCS throttling time to Dataflow autoscaler for better autoscaling. (&lt;a href=&quot;https://issues.apache.org/jira/browse/BEAM-7667&quot;&gt;BEAM-7667&lt;/a&gt;)&lt;/li&gt;
  &lt;li&gt;Support transform_name_mapping option in Python SDK for &lt;code class=&quot;highlighter-rouge&quot;&gt;--update&lt;/code&gt; use. (&lt;a href=&quot;https://issues.apache.org/jira/browse/BEAM-7761&quot;&gt;BEAM-7761&lt;/a&gt;)&lt;/li&gt;
  &lt;li&gt;Dependency: Upgrade Jackson databind to version 2.9.9.3 (&lt;a href=&quot;https://issues.apache.org/jira/browse/BEAM-7880&quot;&gt;BEAM-7880&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;bugfixes&quot;&gt;Bugfixes&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;Various bug fixes and performance improvements.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;known-issues&quot;&gt;Known Issues&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://issues.apache.org/jira/browse/BEAM-7616&quot;&gt;BEAM-7616&lt;/a&gt; urlopen calls may get stuck. (Regression from 2.14.0)&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://issues.apache.org/jira/browse/BEAM-8111&quot;&gt;BEAM-8111&lt;/a&gt; SchemaCoder fails on Dataflow, preventing the use of SqlTransform and schema-aware transforms. (Regression from 2.14.0)&lt;/li&gt;
  &lt;li&gt;(&lt;a href=&quot;https://issues.apache.org/jira/browse/BEAM-8368&quot;&gt;BEAM-8368&lt;/a&gt;) Can’t install the Python SDK on macOS 10.15.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;breaking-changes&quot;&gt;Breaking Changes&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;--region&lt;/code&gt; flag will be a required flag in the future for Dataflow. A warning is added to warn for this future change. (&lt;a href=&quot;https://issues.apache.org/jira/browse/BEAM-7833&quot;&gt;BEAM-7833&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;list-of-contributors&quot;&gt;List of Contributors&lt;/h2&gt;

&lt;p&gt;According to git shortlog, the following people contributed to the 2.15.0 release. Thank you to all contributors!&lt;/p&gt;

&lt;p&gt;Ahmet Altay, Alexey Romanenko, Alex Goos, Alireza Samadian, Andrew Pilloud, Ankur Goenka,
Anton Kedin, Aryan Naraghi, Bartok Jozsef, bmv126, B M VISHWAS, Boyuan Zhang,
Brian Hulette, brucearctor, Cade Markegard, Cam Mach, Chad Dombrova,
Chaim Turkel, Chamikara Jayalath, Charith Ellawala, Claire McGinty, Craig Chambers,
Daniel Oliveira, David Cavazos, David Moravek, Dominic Mitchell, Dustin Rhodes,
Etienne Chauchot, Filipe Regadas, Gleb Kanterov, Gunnar Schulze, Hannah Jiang,
Heejong Lee, Henry Suryawirawan, Ismaël Mejía, Ivo Galic, Jan Lukavský,
Jawad, Juta, Juta Staes, Kai Jiang, Kamil Wasilewski, Kasia Kucharczyk,
Kenneth Jung, Kenneth Knowles, Kyle Weaver, Lily Li, Logan HAUSPIE, lostluck,
Łukasz Gajowy, Luke Cwik, Mark Liu, Matt Helm, Maximilian Michels,
Michael Luckey, Mikhail Gryzykhin, Neville Li, Nicholas Rucci, pabloem,
Pablo Estrada, Paul King, Paul Suganthan, Raheel Khan, Rakesh Kumar,
Reza Rokni, Robert Bradshaw, Robert Burke, rosetn, Rui Wang, Ryan Skraba, RyanSkraba,
Sahith Nallapareddy, Sam Rohde, Sam Whittle, Steve Niemitz, Tanay Tummalapalli, Thomas Weise,
Tianyang Hu, ttanay, tvalentyn, Udi Meiri, Valentyn Tymofieiev, Wout Scheepers,
yanzhi, Yekut, Yichi Zhang, Yifan Zou, yoshiki.obata, Yueyang Qiu, Yunqing Zhou&lt;/p&gt;
</description>
        <pubDate>Thu, 22 Aug 2019 01:00:01 -0700</pubDate>
        <link>https://beam.apache.org/blog/2019/08/22/beam-2.15.0.html</link>
        <guid isPermaLink="true">https://beam.apache.org/blog/2019/08/22/beam-2.15.0.html</guid>
        
        
        <category>blog</category>
        
      </item>
    
      <item>
        <title>Apache Beam 2.14.0</title>
        <description>&lt;!--
Licensed under the Apache License, Version 2.0 (the &quot;License&quot;);
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an &quot;AS IS&quot; BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
--&gt;

&lt;p&gt;We are happy to present the new 2.14.0 release of Beam. This release includes both improvements and new functionality.
See the &lt;a href=&quot;/get-started/downloads/#2140-2019-08-01&quot;&gt;download page&lt;/a&gt; for this release.&lt;!--more--&gt;
For more information on changes in 2.14.0, check out the
&lt;a href=&quot;https://issues.apache.org/jira/secure/ReleaseNote.jspa?projectId=12319527&amp;amp;version=12345431&quot;&gt;detailed release notes&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;highlights&quot;&gt;Highlights&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;Python 3 support is extended to Python 3.6 and 3.7; in addition to various other Python 3 &lt;a href=&quot;https://issues.apache.org/jira/browse/BEAM-1251?focusedCommentId=16890504&amp;amp;page=com.atlassian.jira.plugin.system.issuetabpanels%3Acomment-tabpanel#comment-16890504&quot;&gt;improvements&lt;/a&gt;.&lt;/li&gt;
  &lt;li&gt;Spark portable runner (batch) now &lt;a href=&quot;https://lists.apache.org/thread.html/c43678fc24c9a1dc9f48c51c51950aedcb9bc0fd3b633df16c3d595a@%3Cuser.beam.apache.org%3E&quot;&gt;available&lt;/a&gt; for Java, Python, Go.&lt;/li&gt;
  &lt;li&gt;Added new runner: Hazelcast Jet Runner. (&lt;a href=&quot;https://issues.apache.org/jira/browse/BEAM-7305&quot;&gt;BEAM-7305&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;ios&quot;&gt;I/Os&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;Schema support added to BigQuery reads. (Java) (&lt;a href=&quot;https://issues.apache.org/jira/browse/BEAM-6673&quot;&gt;BEAM-6673&lt;/a&gt;)&lt;/li&gt;
  &lt;li&gt;Schema support added to JDBC source. (Java) (&lt;a href=&quot;https://issues.apache.org/jira/browse/BEAM-6674&quot;&gt;BEAM-6674&lt;/a&gt;)&lt;/li&gt;
  &lt;li&gt;BigQuery support for &lt;code class=&quot;highlighter-rouge&quot;&gt;bytes&lt;/code&gt; is fixed. (Python 3) (&lt;a href=&quot;https://issues.apache.org/jira/browse/BEAM-6769&quot;&gt;BEAM-6769&lt;/a&gt;)&lt;/li&gt;
  &lt;li&gt;Added DynamoDB IO. (Java) (&lt;a href=&quot;https://issues.apache.org/jira/browse/BEAM-7043&quot;&gt;BEAM-7043&lt;/a&gt;)&lt;/li&gt;
  &lt;li&gt;Added support unbounded reads with HCatalogIO (Java) (&lt;a href=&quot;https://issues.apache.org/jira/browse/BEAM-7450&quot;&gt;BEAM-7450&lt;/a&gt;)&lt;/li&gt;
  &lt;li&gt;Added BoundedSource wrapper for SDF. (Python) (&lt;a href=&quot;https://issues.apache.org/jira/browse/BEAM-7443&quot;&gt;BEAM-7443&lt;/a&gt;)&lt;/li&gt;
  &lt;li&gt;Added support for INCRBY/DECRBY operations in RedisIO. (&lt;a href=&quot;https://issues.apache.org/jira/browse/BEAM-7286&quot;&gt;BEAM-7286&lt;/a&gt;)&lt;/li&gt;
  &lt;li&gt;Added Support for ValueProvider defined GCS Location for WriteToBigQuery with File Loads. (Java) ((&lt;a href=&quot;https://issues.apache.org/jira/browse/BEAM-7603&quot;&gt;BEAM-7603&lt;/a&gt;))&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;new-features--improvements&quot;&gt;New Features / Improvements&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;Python SDK add support for DoFn &lt;code class=&quot;highlighter-rouge&quot;&gt;setup&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;teardown&lt;/code&gt; methods. (&lt;a href=&quot;https://issues.apache.org/jira/browse/BEAM-562&quot;&gt;BEAM-562&lt;/a&gt;)&lt;/li&gt;
  &lt;li&gt;Python SDK adds new transforms: &lt;a href=&quot;https://issues.apache.org/jira/browse/BEAM-6693&quot;&gt;ApproximateUnique&lt;/a&gt;, &lt;a href=&quot;https://issues.apache.org/jira/browse/BEAM-6695&quot;&gt;Latest&lt;/a&gt;, &lt;a href=&quot;https://issues.apache.org/jira/browse/BEAM-7019&quot;&gt;Reify&lt;/a&gt;, &lt;a href=&quot;https://issues.apache.org/jira/browse/BEAM-7021&quot;&gt;ToString&lt;/a&gt;, &lt;a href=&quot;https://issues.apache.org/jira/browse/BEAM-7023&quot;&gt;WithKeys&lt;/a&gt;.&lt;/li&gt;
  &lt;li&gt;Added hook for user-defined JVM initialization in workers. (&lt;a href=&quot;https://issues.apache.org/jira/browse/BEAM-6872&quot;&gt;BEAM-6872&lt;/a&gt;)&lt;/li&gt;
  &lt;li&gt;Added support for SQL Row Estimation for BigQueryTable. (&lt;a href=&quot;https://issues.apache.org/jira/browse/BEAM-7513&quot;&gt;BEAM-7513&lt;/a&gt;)&lt;/li&gt;
  &lt;li&gt;Auto sharding of streaming sinks in FlinkRunner. (&lt;a href=&quot;https://issues.apache.org/jira/browse/BEAM-5865&quot;&gt;BEAM-5865&lt;/a&gt;)&lt;/li&gt;
  &lt;li&gt;Removed the Hadoop dependency from the external sorter. (&lt;a href=&quot;https://issues.apache.org/jira/browse/BEAM-7268&quot;&gt;BEAM-7268&lt;/a&gt;)&lt;/li&gt;
  &lt;li&gt;Added option to expire portable SDK worker environments. (&lt;a href=&quot;https://issues.apache.org/jira/browse/BEAM-7348&quot;&gt;BEAM-7348&lt;/a&gt;)&lt;/li&gt;
  &lt;li&gt;Beam does not relocate Guava anymore and depends only on its own vendored version of Guava. (&lt;a href=&quot;https://issues.apache.org/jira/browse/BEAM-6620&quot;&gt;BEAM-6620&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;breaking-changes&quot;&gt;Breaking Changes&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;Deprecated set/getClientConfiguration in Jdbc IO. (&lt;a href=&quot;https://issues.apache.org/jira/browse/BEAM-7263&quot;&gt;BEAM-7263&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;bugfixes&quot;&gt;Bugfixes&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;Fixed reading of concatenated compressed files. (Python) (&lt;a href=&quot;https://issues.apache.org/jira/browse/BEAM-6952&quot;&gt;BEAM-6952&lt;/a&gt;)&lt;/li&gt;
  &lt;li&gt;Fixed re-scaling issues on Flink &amp;gt;= 1.6 versions. (&lt;a href=&quot;https://issues.apache.org/jira/browse/BEAM-7144&quot;&gt;BEAM-7144&lt;/a&gt;)&lt;/li&gt;
  &lt;li&gt;Fixed SQL EXCEPT DISTINCT behavior. (&lt;a href=&quot;https://issues.apache.org/jira/browse/BEAM-7194&quot;&gt;BEAM-7194&lt;/a&gt;)&lt;/li&gt;
  &lt;li&gt;Fixed OOM issues with bounded Reads for Flink Runner. (&lt;a href=&quot;https://issues.apache.org/jira/browse/BEAM-7442&quot;&gt;BEAM-7442&lt;/a&gt;)&lt;/li&gt;
  &lt;li&gt;Fixed HdfsFileSystem to correctly match directories. (&lt;a href=&quot;https://issues.apache.org/jira/browse/BEAM-7561&quot;&gt;BEAM-7561&lt;/a&gt;)&lt;/li&gt;
  &lt;li&gt;Upgraded Spark runner to use spark version 2.4.3. (&lt;a href=&quot;https://issues.apache.org/jira/browse/BEAM-7265&quot;&gt;BEAM-7265&lt;/a&gt;)&lt;/li&gt;
  &lt;li&gt;Upgraded Jackson to version 2.9.9. (&lt;a href=&quot;https://issues.apache.org/jira/browse/BEAM-7465&quot;&gt;BEAM-7465&lt;/a&gt;)&lt;/li&gt;
  &lt;li&gt;Various other bug fixes and performance improvements.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;known-issues&quot;&gt;Known Issues&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;Do &lt;strong&gt;NOT&lt;/strong&gt; use Python MongoDB source in this release. Python MongoDB source &lt;a href=&quot;https://issues.apache.org/jira/browse/BEAM-5148&quot;&gt;added&lt;/a&gt; in this release has a known issue that can result in data loss. See (&lt;a href=&quot;https://issues.apache.org/jira/browse/BEAM-7866&quot;&gt;BEAM-7866&lt;/a&gt;) for details.&lt;/li&gt;
  &lt;li&gt;Can’t install the Python SDK on macOS 10.15. See (&lt;a href=&quot;https://issues.apache.org/jira/browse/BEAM-8368&quot;&gt;BEAM-8368&lt;/a&gt;) for details.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;list-of-contributors&quot;&gt;List of Contributors&lt;/h2&gt;

&lt;p&gt;According to git shortlog, the following people contributed to the 2.14.0 release. Thank you to all contributors!&lt;/p&gt;

&lt;p&gt;Ahmet Altay, Aizhamal Nurmamat kyzy, Ajo Thomas, Alex Amato, Alexey Romanenko, 
Alexey Strokach, Alex Van Boxel, Alireza Samadian, Andrew Pilloud, 
Ankit Jhalaria, Ankur Goenka, Anton Kedin, Aryan Naraghi, Bartok Jozsef, 
Bora Kaplan, Boyuan Zhang, Brian Hulette, Cam Mach, Chamikara Jayalath, 
Charith Ellawala, Charles Chen, Colm O hEigeartaigh, Cyrus Maden, 
Daniel Mills, Daniel Oliveira, David Cavazos, David Moravek, David Yan, 
Daniel Lescohier, Elwin Arens, Etienne Chauchot, Fábio Franco Uechi, 
Finch Keung, Frederik Bode, Gregory Kovelman, Graham Polley, Hai Lu, Hannah Jiang, 
Harshit Dwivedi, Harsh Vardhan, Heejong Lee, Henry Suryawirawan, 
Ismaël Mejía, Jan Lukavský, Jean-Baptiste Onofré, Jozef Vilcek, Juta, Kai Jiang, 
Kamil Wu, Kasia Kucharczyk, Kenneth Knowles, Kyle Weaver, Lara Schmidt, 
Łukasz Gajowy, Luke Cwik, Manu Zhang, Mark Liu, Matthias Baetens, 
Maximilian Michels, Melissa Pashniak, Michael Luckey, Michal Walenia, 
Mikhail Gryzykhin, Ming Liang, Neville Li, Pablo Estrada, Paul Suganthan, 
Peter Backx, Rakesh Kumar, Rasmi Elasmar, Reuven Lax, Reza Rokni, Robbe Sneyders, 
Robert Bradshaw, Robert Burke, Rose Nguyen, Rui Wang, Ruoyun Huang, 
Shoaib Zafar, Slava Chernyak, Steve Niemitz, Tanay Tummalapalli, Thomas Weise, 
Tim Robertson, Tim van der Lippe, Udi Meiri, Valentyn Tymofieiev, Varun Dhussa, 
Viktor Gerdin, Yichi Zhang, Yifan Mai, Yifan Zou, Yueyang Qiu.&lt;/p&gt;
</description>
        <pubDate>Wed, 31 Jul 2019 01:00:01 -0700</pubDate>
        <link>https://beam.apache.org/blog/2019/07/31/beam-2.14.0.html</link>
        <guid isPermaLink="true">https://beam.apache.org/blog/2019/07/31/beam-2.14.0.html</guid>
        
        
        <category>blog</category>
        
      </item>
    
      <item>
        <title>Looping timers in Apache Beam</title>
        <description>&lt;!--
Licensed under the Apache License, Version 2.0 (the &quot;License&quot;);
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an &quot;AS IS&quot; BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
--&gt;

&lt;p&gt;Apache Beam’s primitives let you build expressive data pipelines, suitable for a
variety of use cases. One specific use case is the analysis of time series data
in which continuous sequences across window boundaries are important. A few fun
challenges arise as you tackle this type of data and in this blog we will
explore one of those in more detail and make use of the Timer API
(&lt;a href=&quot;/blog/2017/08/28/timely-processing.html&quot;&gt;blog post&lt;/a&gt;)
using the “looping timer” pattern.&lt;/p&gt;

&lt;!--more--&gt;

&lt;p&gt;With Beam in streaming mode, you can take streams of data and build analytical
transforms to produce results on the data. But for time series data, the absence
of data is useful information. So how can we produce results in the absence of
data?&lt;/p&gt;

&lt;p&gt;Let’s use a more concrete example to illustrate the requirement. Imagine you
have a simple pipeline that sums the number of events coming from an IoT device
every minute. We would like to produce the value 0 when no data has been seen
within a specific time interval. So why can this get tricky? Well it is easy to
build a simple pipeline that counts events as they arrive, but when there is no
event, there is nothing to count!&lt;/p&gt;

&lt;p&gt;Let’s build a simple pipeline to work with:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  // We will start our timer at 1 sec from the fixed upper boundary of our
  // minute window
  Instant now = Instant.parse(&quot;2000-01-01T00:00:59Z&quot;);

  // ----- Create some dummy data

  // Create 3 elements, incrementing by 1 minute and leaving a time gap between
  // element 2 and element 3
  TimestampedValue&amp;lt;KV&amp;lt;String, Integer&amp;gt;&amp;gt; time_1 =
    TimestampedValue.of(KV.of(&quot;Key_A&quot;, 1), now);

  TimestampedValue&amp;lt;KV&amp;lt;String, Integer&amp;gt;&amp;gt; time_2 =
    TimestampedValue.of(KV.of(&quot;Key_A&quot;, 2),
    now.plus(Duration.standardMinutes(1)));

  // No Value for start time + 2 mins
  TimestampedValue&amp;lt;KV&amp;lt;String, Integer&amp;gt;&amp;gt; time_3 =
    TimestampedValue.of(KV.of(&quot;Key_A&quot;, 3),
    now.plus(Duration.standardMinutes(3)));

  // Create pipeline
  PipelineOptions options = PipelineOptionsFactory.fromArgs(args).withValidation()
    .as(PipelineOptions.class);

  Pipeline p = Pipeline.create(options);

  // Apply a fixed window of duration 1 min and Sum the results
  p.apply(Create.timestamped(time_1, time_2, time_3))
   .apply(
      Window.&amp;lt;KV&amp;lt;String,Integer&amp;gt;&amp;gt;into(
FixedWindows.&amp;lt;Integer&amp;gt;of(Duration.standardMinutes(1))))
        .apply(Sum.integersPerKey())
        .apply(ParDo.of(new DoFn&amp;lt;KV&amp;lt;String, Integer&amp;gt;, KV&amp;lt;String, Integer&amp;gt;&amp;gt;() {

          @ProcessElement public void process(ProcessContext c) {
            LOG.info(&quot;Value is {} timestamp is {}&quot;, c.element(), c.timestamp());
          }
       }));

  p.run();
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Running that pipeline will result in the following output:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;INFO  LoopingTimer  - Value is KV{Key_A, 1} timestamp is 2000-01-01T00:00:59.999Z
INFO  LoopingTimer  - Value is KV{Key_A, 3} timestamp is 2000-01-01T00:03:59.999Z
INFO  LoopingTimer  - Value is KV{Key_A, 2} timestamp is 2000-01-01T00:01:59.999Z
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;blockquote&gt;
  &lt;p&gt;Note: The lack of order in the output should be expected, however the
key-window tuple is correctly computed.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;As expected, we see output in each of the interval windows which had a data
point with a timestamp between the minimum and maximum value of the window.
There was a data point at timestamps  00:00:59,  00:01:59 and  00:03:59, which
fell into the following interval windows.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;[00:00:00, 00:00:59.999)&lt;/li&gt;
  &lt;li&gt;[00:01:00, 00:01:59.999)&lt;/li&gt;
  &lt;li&gt;[00:03:00, 00:03:59.999)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;But as there was no data between  00:02:00 and  00:02:59, no value is produced
for interval window  [00:02:00,00:02:59.999).&lt;/p&gt;

&lt;p&gt;How can we get Beam to output values for that missing window? First, let’s walk
through some options that do not make use of the Timer API.&lt;/p&gt;

&lt;h2 id=&quot;option-1-external-heartbeat&quot;&gt;Option 1: External heartbeat&lt;/h2&gt;

&lt;p&gt;We can use an external system to emit a value for each time interval and inject
it into the stream of data that Beam consumes. This simple option moves any
complexity out of the Beam pipeline. But using an external system means we need
to monitor this system and perform other maintenance tasks in tandem with the
Beam pipeline.&lt;/p&gt;

&lt;h2 id=&quot;option-2-use-a-generated-source-in-the-beam-pipeline&quot;&gt;Option 2: Use a generated source in the Beam pipeline&lt;/h2&gt;

&lt;p&gt;We can use a generating source to emit the value using this code snippet:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;pipeline.apply(GenerateSequence.
            from(0).withRate(1,Duration.standardSeconds(1L)))
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;We can then:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Use a DoFn to convert the value to zero.&lt;/li&gt;
  &lt;li&gt;Flatten this value with the real source.&lt;/li&gt;
  &lt;li&gt;Produce a PCollection which has ticks in every time interval.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;This is also a simple way of producing a value in each time interval.&lt;/p&gt;

&lt;h2 id=&quot;option-1--2-the-problem-with-multiple-keys&quot;&gt;Option 1 &amp;amp; 2 The problem with multiple keys&lt;/h2&gt;

&lt;p&gt;Both options 1 and 2 work well for the case where there the pipeline processes a
single key. Let’s now deal with the case where instead of 1 IoT device, there
are 1000s or 100,000s of these devices, each with a unique key. To make option 1
or option 2 work in this scenario, we need to carry out an extra step: creating
a FanOut DoFn. Each tick needs to be distributed to all the potential keys, so
we need to create a FanOut DoFn that takes the dummy value and generates a
key-value pair for every available key.&lt;/p&gt;

&lt;p&gt;For example, let’s assume we have 3 keys for 3 IoT devices, {key1,key2,key3}.
Using the method we outlined in Option 2 when we get the first element from
GenerateSequence, we need to create a loop in the DoFn that generates 3
key-value pairs. These pairs become the heartbeat value for each of the IoT
devices.&lt;/p&gt;

&lt;p&gt;And things get a lot more fun when we need to deal with lots of IoT devices,
with a list of keys that are dynamically changing. We would need to add a
transform that does a Distinct operation and feed the data produced as a
side-input into the FanOut DoFn.&lt;/p&gt;

&lt;h2 id=&quot;option-3-implementing-a-heartbeat-using-beam-timers&quot;&gt;Option 3: Implementing a heartbeat using Beam timers&lt;/h2&gt;

&lt;p&gt;So how do timers help? Well let’s have a look at a new transform:&lt;/p&gt;

&lt;p&gt;Edit: Looping Timer State changed from Boolean to Long to allow for min value check.&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;LoopingStatefulTimer&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;DoFn&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;KV&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Integer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;KV&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Integer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;Instant&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;stopTimerTime&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;LoopingStatefulTimer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Instant&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;stopTime&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;){&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;stopTimerTime&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;stopTime&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;nd&quot;&gt;@StateId&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;loopingTimerTime&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;StateSpec&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ValueState&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Long&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;loopingTimerTime&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;StateSpecs&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;BigEndianLongCoder&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;of&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt;

    &lt;span class=&quot;nd&quot;&gt;@StateId&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;key&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;StateSpec&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ValueState&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;key&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;StateSpecs&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;StringUtf8Coder&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;of&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt;

    &lt;span class=&quot;nd&quot;&gt;@TimerId&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;loopingTimer&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;TimerSpec&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;loopingTimer&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;TimerSpecs&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;timer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;TimeDomain&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;EVENT_TIME&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;

    &lt;span class=&quot;nd&quot;&gt;@ProcessElement&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;process&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ProcessContext&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nd&quot;&gt;@StateId&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;key&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ValueState&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;nd&quot;&gt;@StateId&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;loopingTimerTime&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ValueState&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Long&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;loopingTimerTime&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;nd&quot;&gt;@TimerId&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;loopingTimer&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Timer&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;loopingTimer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;

      &lt;span class=&quot;c1&quot;&gt;// If the timer has been set already, or if the value is smaller than&lt;/span&gt;
      &lt;span class=&quot;c1&quot;&gt;// the current element + window duration, do not set&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;Long&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;currentTimerValue&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;loopingTimerTime&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;read&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;Instant&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;nextTimerTimeBasedOnCurrentElement&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;timestamp&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;plus&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Duration&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;standardMinutes&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;));&lt;/span&gt;

      &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;currentTimerValue&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;currentTimerValue&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;
          &lt;span class=&quot;n&quot;&gt;nextTimerTimeBasedOnCurrentElement&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getMillis&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;())&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;loopingTimer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;set&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;nextTimerTimeBasedOnCurrentElement&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;loopingTimerTime&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;write&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;nextTimerTimeBasedOnCurrentElement&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getMillis&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt;
      &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

      &lt;span class=&quot;c1&quot;&gt;// We need this value so that we can output a value for the correct key in OnTimer&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;read&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;write&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;element&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getKey&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt;
      &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

      &lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;output&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;element&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;nd&quot;&gt;@OnTimer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;loopingTimer&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;onTimer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;OnTimerContext&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;nd&quot;&gt;@StateId&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;key&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ValueState&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;nd&quot;&gt;@TimerId&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;loopingTimer&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Timer&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;loopingTimer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;

      &lt;span class=&quot;n&quot;&gt;LOG&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;info&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Timer @ {} fired&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;timestamp&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;output&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;KV&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;of&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;read&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(),&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;));&lt;/span&gt;

      &lt;span class=&quot;c1&quot;&gt;// If we do not put in a “time to live” value, then the timer would loop forever&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;Instant&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;nextTimer&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;timestamp&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;plus&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Duration&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;standardMinutes&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;));&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;nextTimer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;isBefore&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;stopTimerTime&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;loopingTimer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;set&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;nextTimer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
      &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;LOG&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;info&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;
            &lt;span class=&quot;s&quot;&gt;&quot;Timer not being set as exceeded Stop Timer value {} &quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;stopTimerTime&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
      &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;There are two data values that the state API needs to keep:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;A boolean &lt;code class=&quot;highlighter-rouge&quot;&gt;timeRunning&lt;/code&gt; value used to avoid resetting the timer if it’s
already running.&lt;/li&gt;
  &lt;li&gt;A “&lt;em&gt;key&lt;/em&gt;” state object value that allows us to store the key that we are
working with. This information will be needed in the &lt;code class=&quot;highlighter-rouge&quot;&gt;OnTimer&lt;/code&gt; event later.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;We also have a Timer with the ID &lt;code class=&quot;highlighter-rouge&quot;&gt;**loopingTimer**&lt;/code&gt; that acts as our per
interval alarm clock. Note that the timer is an &lt;em&gt;event timer&lt;/em&gt;. It fires based on
the watermark, not on the passage of time as the pipeline runs.&lt;/p&gt;

&lt;p&gt;Next, let’s unpack what’s happening in the @ProcessElement block:&lt;/p&gt;

&lt;p&gt;The first element to come to this block will:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Set the state of the &lt;code class=&quot;highlighter-rouge&quot;&gt;timerRunner&lt;/code&gt; to True.&lt;/li&gt;
  &lt;li&gt;Write the value of the key from the key-value pair into the key StateValue.&lt;/li&gt;
  &lt;li&gt;The code sets the value of the timer to fire one minute after the elements
timestamp. Note that the maximum value allowed for this timestamp is
XX:XX:59.999. This places the maximum alarm value at the upper boundary of
the next time interval.&lt;/li&gt;
  &lt;li&gt;Finally, we output the data from the &lt;code class=&quot;highlighter-rouge&quot;&gt;@ProcessElement&lt;/code&gt; block using
&lt;code class=&quot;highlighter-rouge&quot;&gt;c.output&lt;/code&gt;.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;In the @OnTimer block, the following occurs:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;The code emits a value with the key pulled from our key StateValue and a
value of 0. The timestamp of the event corresponds to  the event time of the
timer firing.&lt;/li&gt;
  &lt;li&gt;We set a new timer for one minute from now, unless we are past the
&lt;code class=&quot;highlighter-rouge&quot;&gt;stopTimerTime&lt;/code&gt; value. Your use case will normally have more complex stopping
conditions, but we use a simple condition here to allow us to keep the
illustrated code simple. The topic of stopping conditions is discussed in
more detail later.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;And that’s it, let’s add our transform back into the pipeline:&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  &lt;span class=&quot;c1&quot;&gt;// Apply a fixed window of duration 1 min and Sum the results&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;apply&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Create&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;timestamped&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;time_1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;time_2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;time_3&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;apply&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;Window&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;KV&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Integer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;into&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;FixedWindows&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Integer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;of&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Duration&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;standardMinutes&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))))&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// We use a combiner to reduce the number of calls in keyed state&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// from all elements to 1 per FixedWindow&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;apply&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Sum&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;integersPerKey&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;())&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;apply&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Window&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;into&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;GlobalWindows&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()))&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;apply&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ParDo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;of&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;LoopingStatefulTimer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Instant&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;parse&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;2000-01-01T00:04:00Z&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))))&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;apply&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Window&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;into&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;FixedWindows&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;of&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Duration&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;standardMinutes&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))))&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;apply&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Sum&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;integersPerKey&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;())&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;apply&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ParDo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;of&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;DoFn&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;KV&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Integer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;KV&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Integer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;

      &lt;span class=&quot;nd&quot;&gt;@ProcessElement&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;process&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ProcessContext&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;

        &lt;span class=&quot;n&quot;&gt;LOG&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;info&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Value is {} timestamp is {}&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;element&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;timestamp&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt;

     &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}));&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ol&gt;
  &lt;li&gt;In the first part of the pipeline we create FixedWindows and reduce the value
per key down to a single Sum.&lt;/li&gt;
  &lt;li&gt;Next we re-window the output into a GlobalWindow. Since state and timers are
per window, they must be set within the window boundary. We want the looping
timer to span all the fixed windows, so we set it up in the global window.&lt;/li&gt;
  &lt;li&gt;We then add our LoopingStatefulTimer DoFn.&lt;/li&gt;
  &lt;li&gt;Finally, we reapply the FixedWindows and Sum our values.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;This pipeline ensures that a value of zero exists for each interval window, even
if the Source of the pipeline emitted a value in the minimum and maximum
boundaries of the interval window. This means that we can mark the absence of
data.&lt;/p&gt;

&lt;p&gt;You might question why we use two reducers with multiple &lt;code class=&quot;highlighter-rouge&quot;&gt;Sum.integersPerKey&lt;/code&gt;.
Why not just use one? Functionally, using one would also produce the correct
result. However, putting two &lt;code class=&quot;highlighter-rouge&quot;&gt;Sum.integersPerKey&lt;/code&gt; gives us a nice performance
advantage. It reduces the number of elements from many to just one per time
interval. This can reduce the number of reads of the State API during the
&lt;code class=&quot;highlighter-rouge&quot;&gt;@ProcessElement&lt;/code&gt; calls.&lt;/p&gt;

&lt;p&gt;Here is the logging output of running our modified pipeline:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;INFO  LoopingTimer  - Timer @ 2000-01-01T00:01:59.999Z fired
INFO  LoopingTimer  - Timer @ 2000-01-01T00:02:59.999Z fired
INFO  LoopingTimer  - Timer @ 2000-01-01T00:03:59.999Z fired
INFO  LoopingTimer  - Timer not being set as exceeded Stop Timer value 2000-01-01T00:04:00.000Z
INFO  LoopingTimer  - Value is KV{Key_A, 1} timestamp is 2000-01-01T00:00:59.999Z
INFO  LoopingTimer  - Value is KV{Key_A, 0} timestamp is 2000-01-01T00:02:59.999Z
INFO  LoopingTimer  - Value is KV{Key_A, 2} timestamp is 2000-01-01T00:01:59.999Z
INFO  LoopingTimer  - Value is KV{Key_A, 3} timestamp is 2000-01-01T00:03:59.999Z
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Yay! We now have output from the time interval [00:01:00, 00:01:59.999), even
though the source dataset has no elements in that interval.&lt;/p&gt;

&lt;p&gt;In this blog, we covered one of the fun areas around time series use cases and
worked through several options, including an advanced use case of the Timer API.
Happy looping everyone!&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; Looping timers is an interesting new use case for the Timer API and
runners will need to add support for it with all of their more advanced
feature sets. You can experiment with this pattern today using the
DirectRunner. For other runners, please look out for their release notes on
support for dealing with this use case in production.&lt;/p&gt;

&lt;p&gt;(&lt;a href=&quot;/documentation/runners/capability-matrix/&quot;&gt;Capability Matrix&lt;/a&gt;)&lt;/p&gt;

&lt;p&gt;Runner specific notes:
Google Cloud Dataflow Runners Drain feature does not support looping timers (Link to matrix)&lt;/p&gt;
</description>
        <pubDate>Tue, 11 Jun 2019 01:00:01 -0700</pubDate>
        <link>https://beam.apache.org/blog/2019/06/11/looping-timers.html</link>
        <guid isPermaLink="true">https://beam.apache.org/blog/2019/06/11/looping-timers.html</guid>
        
        
        <category>blog</category>
        
      </item>
    
  </channel>
</rss>
