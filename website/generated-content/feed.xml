<?xml version="1.0" encoding="UTF-8"?>
<!--
 Licensed under the Apache License, Version 2.0 (the "License");
 you may not use this file except in compliance with the License.
 You may obtain a copy of the License at
   http://www.apache.org/licenses/LICENSE-2.0
 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License. See accompanying LICENSE file.
-->
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Apache Beam</title>
    <description>Apache Beam is an open source, unified model and set of language-specific SDKs for defining and executing data processing workflows, and also data ingestion and integration flows, supporting Enterprise Integration Patterns (EIPs) and Domain Specific Languages (DSLs). Dataflow pipelines simplify the mechanics of large-scale batch and streaming data processing and can run on a number of runtimes like Apache Flink, Apache Spark, and Google Cloud Dataflow (a cloud service). Beam also brings DSL in different languages, allowing users to easily implement their data integration processes.
</description>
    <link>https://beam.apache.org/</link>
    <atom:link href="https://beam.apache.org/feed.xml" rel="self" type="application/rss+xml"/>
    <generator>Jekyll v3.6.3</generator>
    
      <item>
        <title>Apache Beam 2.16.0</title>
        <description>&lt;!--
Licensed under the Apache License, Version 2.0 (the &quot;License&quot;);
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an &quot;AS IS&quot; BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
--&gt;

&lt;p&gt;We are happy to present the new 2.16.0 release of Beam. This release includes both improvements and new functionality.
See the &lt;a href=&quot;/get-started/downloads/#2160-2019-10-07&quot;&gt;download page&lt;/a&gt; for this release.&lt;!--more--&gt;
For more information on changes in 2.16.0, check out the
&lt;a href=&quot;https://issues.apache.org/jira/secure/ReleaseNote.jspa?projectId=12319527&amp;amp;version=12345494&quot;&gt;detailed release notes&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;highlights&quot;&gt;Highlights&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;Customizable Docker container images released and supported by Beam portable runners on Python 2.7, 3.5, 3.6, 3.7. (&lt;a href=&quot;https://issues.apache.org/jira/browse/BEAM-7907&quot;&gt;BEAM-7907&lt;/a&gt;)&lt;/li&gt;
  &lt;li&gt;Integration improvements for Python Streaming on Dataflow including service features like autoscaling, drain, update, streaming engine and counter updates.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;new-features--improvements&quot;&gt;New Features / Improvements&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;A new count distinct transform based on BigQuery compatible HyperLogLog++ implementation. (&lt;a href=&quot;https://issues.apache.org/jira/browse/BEAM-7013&quot;&gt;BEAM-7013&lt;/a&gt;)&lt;/li&gt;
  &lt;li&gt;Element counters in the Web UI graph representations for transforms for Python streaming jobs in Google Cloud Dataflow. (&lt;a href=&quot;https://issues.apache.org/jira/browse/BEAM-7045&quot;&gt;BEAM-7045&lt;/a&gt;)&lt;/li&gt;
  &lt;li&gt;Add SetState in Python sdk. (&lt;a href=&quot;https://issues.apache.org/jira/browse/BEAM-7741&quot;&gt;BEAM-7741&lt;/a&gt;)&lt;/li&gt;
  &lt;li&gt;Add hot key detection to Dataflow Runner. (&lt;a href=&quot;https://issues.apache.org/jira/browse/BEAM-7820&quot;&gt;BEAM-7820&lt;/a&gt;)&lt;/li&gt;
  &lt;li&gt;Add ability to get the list of submitted jobs from gRPC JobService. (&lt;a href=&quot;https://issues.apache.org/jira/browse/BEAM-7927&quot;&gt;BEAM-7927&lt;/a&gt;)&lt;/li&gt;
  &lt;li&gt;Portable Flink pipelines can now be bundled into executable jars. (&lt;a href=&quot;https://issues.apache.org/jira/browse/BEAM-7966&quot;&gt;BEAM-7966&lt;/a&gt;, &lt;a href=&quot;https://issues.apache.org/jira/browse/BEAM-7967&quot;&gt;BEAM-7967&lt;/a&gt;)&lt;/li&gt;
  &lt;li&gt;SQL join selection should be done in planner, not in expansion to PTransform. (&lt;a href=&quot;https://issues.apache.org/jira/browse/BEAM-6114&quot;&gt;BEAM-6114&lt;/a&gt;)&lt;/li&gt;
  &lt;li&gt;A Python Sink for BigQuery with File Loads in Streaming. (&lt;a href=&quot;https://issues.apache.org/jira/browse/BEAM-6611&quot;&gt;BEAM-6611&lt;/a&gt;)&lt;/li&gt;
  &lt;li&gt;Python BigQuery sink should be able to handle 15TB load job quota. (&lt;a href=&quot;https://issues.apache.org/jira/browse/BEAM-7588&quot;&gt;BEAM-7588&lt;/a&gt;)&lt;/li&gt;
  &lt;li&gt;Spark portable runner: reuse SDK harness. (&lt;a href=&quot;https://issues.apache.org/jira/browse/BEAM-7600&quot;&gt;BEAM-7600&lt;/a&gt;)&lt;/li&gt;
  &lt;li&gt;BigQuery File Loads to work well with load job size limits. (&lt;a href=&quot;https://issues.apache.org/jira/browse/BEAM-7742&quot;&gt;BEAM-7742&lt;/a&gt;)&lt;/li&gt;
  &lt;li&gt;External environment with containerized worker pool. (&lt;a href=&quot;https://issues.apache.org/jira/browse/BEAM-7980&quot;&gt;BEAM-7980&lt;/a&gt;)&lt;/li&gt;
  &lt;li&gt;Use OffsetRange as restriction for OffsetRestrictionTracker. (&lt;a href=&quot;https://issues.apache.org/jira/browse/BEAM-8014&quot;&gt;BEAM-8014&lt;/a&gt;)&lt;/li&gt;
  &lt;li&gt;Get logs for SDK worker Docker containers. (&lt;a href=&quot;https://issues.apache.org/jira/browse/BEAM-8015&quot;&gt;BEAM-8015&lt;/a&gt;)&lt;/li&gt;
  &lt;li&gt;PCollection boundedness is tracked and propagated in python sdk. (&lt;a href=&quot;https://issues.apache.org/jira/browse/BEAM-8088&quot;&gt;BEAM-8088&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;dependency-changes&quot;&gt;Dependency Changes&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;Upgrade “com.amazonaws:amazon-kinesis-producer” to version 0.13.1. (&lt;a href=&quot;https://issues.apache.org/jira/browse/BEAM-7894&quot;&gt;BEAM-7894&lt;/a&gt;)&lt;/li&gt;
  &lt;li&gt;Upgrade to joda time 2.10.3 to get updated TZDB. (&lt;a href=&quot;https://issues.apache.org/jira/browse/BEAM-8161&quot;&gt;BEAM-8161&lt;/a&gt;)&lt;/li&gt;
  &lt;li&gt;Upgrade Jackson to version 2.9.10. (&lt;a href=&quot;https://issues.apache.org/jira/browse/BEAM-8299&quot;&gt;BEAM-8299&lt;/a&gt;)&lt;/li&gt;
  &lt;li&gt;Upgrade grpcio minimum required version to 1.12.1. (&lt;a href=&quot;https://issues.apache.org/jira/browse/BEAM-7986&quot;&gt;BEAM-7986&lt;/a&gt;)&lt;/li&gt;
  &lt;li&gt;Upgrade funcsigs minimum required version to 1.0.2 in Python2. (&lt;a href=&quot;https://issues.apache.org/jira/browse/BEAM-7060&quot;&gt;BEAM-7060&lt;/a&gt;)&lt;/li&gt;
  &lt;li&gt;Upgrade google-cloud-pubsub maximum required version to 1.0.0. (&lt;a href=&quot;https://issues.apache.org/jira/browse/BEAM-5539&quot;&gt;BEAM-5539&lt;/a&gt;)&lt;/li&gt;
  &lt;li&gt;Upgrade google-cloud-bigtable maximum required version to 1.0.0. (&lt;a href=&quot;https://issues.apache.org/jira/browse/BEAM-5539&quot;&gt;BEAM-5539&lt;/a&gt;)&lt;/li&gt;
  &lt;li&gt;Upgrade dill version to 0.3.0. (&lt;a href=&quot;https://issues.apache.org/jira/browse/BEAM-8324&quot;&gt;BEAM-8324&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;bugfixes&quot;&gt;Bugfixes&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;Various bug fixes and performance improvements.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;known-issues&quot;&gt;Known Issues&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;Given that Python 2 will reach EOL on Jan 1 2020, Python 2 users of Beam will now receive a warning that new releases of Apache Beam will soon support Python 3 only.&lt;/li&gt;
  &lt;li&gt;Filesystems not properly registered using FileIO.write in FlinkRunner. (&lt;a href=&quot;https://issues.apache.org/jira/browse/BEAM-8303&quot;&gt;BEAM-8303&lt;/a&gt;)&lt;/li&gt;
  &lt;li&gt;Performance regression in Java DirectRunner in streaming mode. (&lt;a href=&quot;https://issues.apache.org/jira/browse/BEAM-8363&quot;&gt;BEAM-8363&lt;/a&gt;)&lt;/li&gt;
  &lt;li&gt;Can’t install the Python SDK on macOS 10.15. (&lt;a href=&quot;https://issues.apache.org/jira/browse/BEAM-8368&quot;&gt;BEAM-8368&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;list-of-contributors&quot;&gt;List of Contributors&lt;/h2&gt;

&lt;p&gt;According to git shortlog, the following people contributed to the 2.16.0 release. Thank you to all contributors!&lt;/p&gt;

&lt;p&gt;Ahmet Altay, Alex Van Boxel, Alexey Romanenko, Alexey Strokach, Alireza Samadian,
Andre-Philippe Paquet, Andrew Pilloud, Ankur Goenka, Anton Kedin, Aryan Naraghi,
B M VISHWAS, Bartok Jozsef, Bill Neubauer, Boyuan Zhang, Brian Hulette, Bruno Volpato,
Chad Dombrova, Chamikara Jayalath, Charith Ellawala, Charles Chen, Claire McGinty,
Cyrus Maden, Daniel Oliveira, Dante, David Cavazos, David Moravek, David Yan,
Dominic Mitchell, Elias Djurfeldt, Enrico Canzonieri, Etienne Chauchot, Gleb Kanterov,
Hai Lu, Hannah Jiang, Heejong Lee, Ian Lance Taylor, Ismaël Mejía, Jack Whelpton,
James Wen, Jan Lukavský, Jean-Baptiste Onofré, Jofre, Kai Jiang, Kamil Wasilewski,
Kasia Kucharczyk, Kenneth Jung, Kenneth Knowles, Kirill Kozlov, Kohki YAMAGIWA,
Kyle Weaver, Kyle Winkelman, Ludovic Post, Luis Enrique Ortíz Ramirez, Luke Cwik,
Mark Liu, Maximilian Michels, Michal Walenia, Mike Kaplinskiy, Mikhail Gryzykhin,
NING KANG, Oliver Henlich, Pablo Estrada, Rakesh Kumar, Renat Nasyrov, Reuven Lax,
Robert Bradshaw, Robert Burke, Rui Wang, Ruoyun Huang, Ryan Skraba, Sahith Nallapareddy,
Salman Raza, Sam Rohde, Saul Chavez, Shoaib, Shoaib Zafar, Slava Chernyak, Tanay Tummalapalli,
Thinh Ha, Thomas Weise, Tianzi Cai, Tim van der Lippe, Tomer Zeltzer, Tudor Marian,
Udi Meiri, Valentyn Tymofieiev, Yichi Zhang, Yifan Zou, Yueyang Qiu, gxercavins,
jesusrv1103, lostluck, matt-darwin, mrociorg, ostrokach, parahul, rahul8383, rosetn,
sunjincheng121, the1plummie, ttanay, tvalentyn, venn001, yoshiki.obata, Łukasz Gajowy&lt;/p&gt;
</description>
        <pubDate>Mon, 07 Oct 2019 01:00:01 -0700</pubDate>
        <link>https://beam.apache.org/blog/2019/10/07/beam-2.16.0.html</link>
        <guid isPermaLink="true">https://beam.apache.org/blog/2019/10/07/beam-2.16.0.html</guid>
        
        
        <category>blog</category>
        
      </item>
    
      <item>
        <title>Google Summer of Code '19</title>
        <description>&lt;!--
Licensed under the Apache License, Version 2.0 (the &quot;License&quot;);
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an &quot;AS IS&quot; BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
--&gt;

&lt;p&gt;Google Summer of Code was an amazing learning experience for me.
I contributed to open source, learned about Apache Beam’s internals and worked with the best engineers in the world.&lt;/p&gt;

&lt;!--more--&gt;

&lt;h2 id=&quot;motivation&quot;&gt;Motivation&lt;/h2&gt;
&lt;p&gt;Two of my friends had participated in GSoC in 2018. I was intrigued by their experience.
The idea of working on open-source software that could potentially be used by developers across the world, while being mentored by the best people in a field was exciting!
So, I decided to give Google Summer of Code a shot this year.&lt;/p&gt;

&lt;h2 id=&quot;what-is-google-summer-of-code&quot;&gt;What is Google Summer of Code?&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;https://summerofcode.withgoogle.com/&quot;&gt;Google Summer of Code&lt;/a&gt; is a global program hosted by Google focused on introducing students to open source software development.
Students work on a 3 month programming project with an open source organization during their break from university.&lt;/p&gt;

&lt;h2 id=&quot;why-apache-beam&quot;&gt;Why Apache Beam?&lt;/h2&gt;
&lt;p&gt;While interning at &lt;a href=&quot;https://atlan.com/&quot;&gt;Atlan&lt;/a&gt;, I discovered the field of Data Engineering. I found the challenges and the discussions of the engineers there interesting. While researching for my internship project, I came across the Streaming Systems book. It introduced me to the unified model of Apache Beam for Batch and Streaming Systems, which I was fascinated by.
I wanted to explore Data Engineering, so for GSoC, I wanted to work on a project in that field. Towards the end of my internship, I started contributing to Apache Airflow(very cool project) and Apache Beam, hoping one of them would participate in GSoC. I got lucky!&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://youtu.be/U2eWLb-LD44&quot;&gt;Also, Spotify’s Discover Weekly uses Apache Beam!&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;preparation&quot;&gt;Preparation&lt;/h2&gt;
&lt;p&gt;I had already read the &lt;a href=&quot;http://streamingsystems.net/&quot;&gt;Streaming Systems book&lt;/a&gt;. So, I had an idea of the concepts that Beam is built on, but had never actually used Beam.
Before actually submitting a proposal, I went through a bunch of resources to make sure I had a concrete understanding of Beam.
I read the &lt;a href=&quot;https://www.oreilly.com/ideas/the-world-beyond-batch-streaming-101&quot;&gt;Streaming 101&lt;/a&gt; and &lt;a href=&quot;https://www.oreilly.com/ideas/the-world-beyond-batch-streaming-102&quot;&gt;Streaming 102&lt;/a&gt; blogs by Tyler Akidau. They are the perfect introduction to Beam’s unified model for Batch and Streaming.
In addition, I watched all Beam talks on YouTube. You can find them on the &lt;a href=&quot;https://beam.apache.org/documentation/resources/videos-and-podcasts/&quot;&gt;Beam Website&lt;/a&gt;.
Beam has really good documentation. The &lt;a href=&quot;https://beam.apache.org/documentation/programming-guide/&quot;&gt;Programming Guide&lt;/a&gt; lays out all of Beam’s concepts really well. &lt;a href=&quot;https://beam.apache.org/documentation/runtime/model&quot;&gt;Beam’s execution model&lt;/a&gt; is also documented well and is a must-read to understand how Beam processes data.
&lt;a href=&quot;https://www.waitingforcode.com/apache-beam&quot;&gt;waitingforcode.com&lt;/a&gt; also has good blog posts about Beam concepts.
To get a better sense of the Beam codebase, I played around with it and worked on some PRs to understand Beam better and got familiar with the test suite and workflows.&lt;/p&gt;

&lt;h2 id=&quot;gsoc-journey&quot;&gt;GSoC Journey&lt;/h2&gt;
&lt;p&gt;GSoC has 2 phases. The first is the Community Bonding period in which students get familiar with the project and the community. The other is the actual Coding Period in which students work on their projects. Since the Coding Period has three evaluations spaced out by a month, I divided my project into three parts focusing on the implementation, tests, and documentation or improvements.&lt;/p&gt;

&lt;h3 id=&quot;project&quot;&gt;Project&lt;/h3&gt;
&lt;p&gt;My project(&lt;a href=&quot;https://issues.apache.org/jira/browse/BEAM-6611&quot;&gt;BEAM-6611&lt;/a&gt;) added support for File Loads method of inserting data into BigQuery for streaming pipelines. It builds on PR - &lt;a href=&quot;https://github.com/apache/beam/pull/7655&quot;&gt;#7655&lt;/a&gt; for &lt;a href=&quot;https://issues.apache.org/jira/browse/BEAM-6553&quot;&gt;BEAM-6553&lt;/a&gt; that added support in the Python SDK for writing to BigQuery using File Loads method for Batch pipelines. Streaming pipelines with non-default Windowing, Triggering and Accumulation mode can write data to BigQuery using file loads method. In case of failure, the pipeline will fail atomically. This means that each record will be loaded into BigQuery at-most-once.
You can find my proposal &lt;a href=&quot;https://docs.google.com/document/d/15Peyd3Z_wu5rvGWw8lMLpZuTyyreM_JOAEFFWvF97YY/edit?usp=sharing&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&quot;community-bonding&quot;&gt;Community Bonding&lt;/h3&gt;
&lt;p&gt;When GSoC started, my semester end exams had not yet finished. As a result, I couldn’t get much done. I worked on three PTransforms for the Python SDK - Latest, WithKeys and Reify.&lt;/p&gt;

&lt;h3 id=&quot;coding-period-i&quot;&gt;Coding Period I&lt;/h3&gt;
&lt;p&gt;In this period, I wrote some Integration Tests for the BigQuery sink using Streaming Inserts in streaming mode. I worked on a failing integration test for my project. I also finished the implementation of my project. But, one PostCommit test didn’t pass. I realized that the matcher for the Integration Test that queried BigQuery for the results was intended to be used in Batch mode. So, I wrote a version of the matcher to work in streaming mode.&lt;/p&gt;

&lt;h3 id=&quot;coding-period-ii&quot;&gt;Coding Period II&lt;/h3&gt;
&lt;p&gt;Even after I had added the matcher for streaming mode, the PostComit tests did not pass. A test was being run even though it was not specified. I isolated the failure to a &lt;a href=&quot;https://nose.readthedocs.io/en/latest/doc_tests/test_multiprocess/multiprocess.html#other-differences-in-test-running&quot;&gt;limitation&lt;/a&gt; of the multiprocess plugin for &lt;a href=&quot;https://nose.readthedocs.io/en/latest/&quot;&gt;nose(a Python test framework)&lt;/a&gt; due to which it found more tests than had been specified. It took me a while to figure this out. In this period, changes for my project got merged.
I also worked on small issues related to testing.&lt;/p&gt;

&lt;p&gt;This period was marked by a few exciting events:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Ending up in the top #100 contributors to apache/beam.&lt;/li&gt;
  &lt;li&gt;My first ever PR Review on an open source project.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;https://pbs.twimg.com/media/D_XNSC-UIAUmswG?format=png&amp;amp;name=small&quot; alt=&quot;Weird flex but ok&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;coding-period-iii&quot;&gt;Coding Period III&lt;/h3&gt;
&lt;p&gt;This was the final coding period before the program ended. Since my project was merged earlier than expected, my mentor suggested another issue(&lt;a href=&quot;https://issues.apache.org/jira/browse/BEAM-7742&quot;&gt;BEAM-7742&lt;/a&gt;) in the same area - BigQueryIO, that I found interesting. So, I worked on partitioning written files in BigQuery to ensure that all load jobs triggered adhere to the load job size limitations specified for BigQuery.
While working on my project, I was using a pipeline that uses PubSub as a source and BigQuery as a sink to validate my changes. My mentor suggested we add them to the Beam test suite as it would be the ultimate test for BigQueryIO. I also worked on adding this test to Beam.&lt;/p&gt;

&lt;p&gt;You can find the list of PRs I worked on &lt;a href=&quot;https://github.com/apache/beam/pulls?utf8=%E2%9C%93&amp;amp;q=is%3Apr+author%3Attanay&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;GSoC has been a lesson in discipline and goal-setting for me. Deciding what I wanted to work on and how much I wanted to get done each week was an important lesson.
I had never worked remotely, so this was a new experience. Although I struggled with it initially, I appreciate the flexibility that it comes with.
I also had a lot of fun learning about Apache Beam’s internals, and other tools in the same ecosystem.
This was also the first time I had written code with a test-first approach.&lt;/p&gt;

&lt;p&gt;I thank my mentor - Pablo Estrada, Apache Beam, The Apache Software Foundation and Google Summer of Code for this opportunity. I am also grateful to my mentor for helping me with everything I needed and more, and the Apache Beam community for being supportive and encouraging.&lt;/p&gt;

&lt;p&gt;With the right effort, perseverance, conviction, and a plan, anything is possible. Anything.&lt;/p&gt;
</description>
        <pubDate>Wed, 04 Sep 2019 01:00:01 -0700</pubDate>
        <link>https://beam.apache.org/blog/2019/09/04/gsoc-19.html</link>
        <guid isPermaLink="true">https://beam.apache.org/blog/2019/09/04/gsoc-19.html</guid>
        
        
        <category>blog</category>
        
        <category>gsoc</category>
        
      </item>
    
      <item>
        <title>Apache Beam 2.15.0</title>
        <description>&lt;!--
Licensed under the Apache License, Version 2.0 (the &quot;License&quot;);
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an &quot;AS IS&quot; BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
--&gt;

&lt;p&gt;We are happy to present the new 2.15.0 release of Beam. This release includes both improvements and new functionality.
See the &lt;a href=&quot;/get-started/downloads/#2150-2019-08-22&quot;&gt;download page&lt;/a&gt; for this release.&lt;!--more--&gt;
For more information on changes in 2.15.0, check out the
&lt;a href=&quot;https://issues.apache.org/jira/secure/ReleaseNote.jspa?projectId=12319527&amp;amp;version=12345489&quot;&gt;detailed release notes&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;highlights&quot;&gt;Highlights&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;Vendored Guava was upgraded to version 26.0.&lt;/li&gt;
  &lt;li&gt;Support multi-process execution on the FnApiRunner for Python. (&lt;a href=&quot;https://issues.apache.org/jira/browse/BEAM-3645&quot;&gt;BEAM-3645&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;ios&quot;&gt;I/Os&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;Add AvroIO.sink for IndexedRecord (FileIO compatible). (&lt;a href=&quot;https://issues.apache.org/jira/browse/BEAM-6480&quot;&gt;BEAM-6480&lt;/a&gt;)&lt;/li&gt;
  &lt;li&gt;Add support for writing to BigQuery clustered tables. (&lt;a href=&quot;https://issues.apache.org/jira/browse/BEAM-5191&quot;&gt;BEAM-5191&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;new-features--improvements&quot;&gt;New Features / Improvements&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;Support ParquetTable in SQL. (&lt;a href=&quot;https://issues.apache.org/jira/browse/BEAM-7728&quot;&gt;BEAM-7728&lt;/a&gt;)&lt;/li&gt;
  &lt;li&gt;Add hot key detection to Dataflow Runner. (&lt;a href=&quot;https://issues.apache.org/jira/browse/BEAM-7820&quot;&gt;BEAM-7820&lt;/a&gt;)&lt;/li&gt;
  &lt;li&gt;Support schemas in the JDBC sink. (&lt;a href=&quot;https://issues.apache.org/jira/browse/BEAM-6675&quot;&gt;BEAM-6675&lt;/a&gt;)&lt;/li&gt;
  &lt;li&gt;Report GCS throttling time to Dataflow autoscaler for better autoscaling. (&lt;a href=&quot;https://issues.apache.org/jira/browse/BEAM-7667&quot;&gt;BEAM-7667&lt;/a&gt;)&lt;/li&gt;
  &lt;li&gt;Support transform_name_mapping option in Python SDK for &lt;code class=&quot;highlighter-rouge&quot;&gt;--update&lt;/code&gt; use. (&lt;a href=&quot;https://issues.apache.org/jira/browse/BEAM-7761&quot;&gt;BEAM-7761&lt;/a&gt;)&lt;/li&gt;
  &lt;li&gt;Dependency: Upgrade Jackson databind to version 2.9.9.3 (&lt;a href=&quot;https://issues.apache.org/jira/browse/BEAM-7880&quot;&gt;BEAM-7880&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;bugfixes&quot;&gt;Bugfixes&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;Various bug fixes and performance improvements.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;known-issues&quot;&gt;Known Issues&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://issues.apache.org/jira/browse/BEAM-7616&quot;&gt;BEAM-7616&lt;/a&gt; urlopen calls may get stuck. (Regression from 2.14.0)&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://issues.apache.org/jira/browse/BEAM-8111&quot;&gt;BEAM-8111&lt;/a&gt; SchemaCoder fails on Dataflow, preventing the use of SqlTransform and schema-aware transforms. (Regression from 2.14.0)&lt;/li&gt;
  &lt;li&gt;(&lt;a href=&quot;https://issues.apache.org/jira/browse/BEAM-8368&quot;&gt;BEAM-8368&lt;/a&gt;) Can’t install the Python SDK on macOS 10.15.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;breaking-changes&quot;&gt;Breaking Changes&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;--region&lt;/code&gt; flag will be a required flag in the future for Dataflow. A warning is added to warn for this future change. (&lt;a href=&quot;https://issues.apache.org/jira/browse/BEAM-7833&quot;&gt;BEAM-7833&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;list-of-contributors&quot;&gt;List of Contributors&lt;/h2&gt;

&lt;p&gt;According to git shortlog, the following people contributed to the 2.15.0 release. Thank you to all contributors!&lt;/p&gt;

&lt;p&gt;Ahmet Altay, Alexey Romanenko, Alex Goos, Alireza Samadian, Andrew Pilloud, Ankur Goenka,
Anton Kedin, Aryan Naraghi, Bartok Jozsef, bmv126, B M VISHWAS, Boyuan Zhang,
Brian Hulette, brucearctor, Cade Markegard, Cam Mach, Chad Dombrova,
Chaim Turkel, Chamikara Jayalath, Charith Ellawala, Claire McGinty, Craig Chambers,
Daniel Oliveira, David Cavazos, David Moravek, Dominic Mitchell, Dustin Rhodes,
Etienne Chauchot, Filipe Regadas, Gleb Kanterov, Gunnar Schulze, Hannah Jiang,
Heejong Lee, Henry Suryawirawan, Ismaël Mejía, Ivo Galic, Jan Lukavský,
Jawad, Juta, Juta Staes, Kai Jiang, Kamil Wasilewski, Kasia Kucharczyk,
Kenneth Jung, Kenneth Knowles, Kyle Weaver, Lily Li, Logan HAUSPIE, lostluck,
Łukasz Gajowy, Luke Cwik, Mark Liu, Matt Helm, Maximilian Michels,
Michael Luckey, Mikhail Gryzykhin, Neville Li, Nicholas Rucci, pabloem,
Pablo Estrada, Paul King, Paul Suganthan, Raheel Khan, Rakesh Kumar,
Reza Rokni, Robert Bradshaw, Robert Burke, rosetn, Rui Wang, Ryan Skraba, RyanSkraba,
Sahith Nallapareddy, Sam Rohde, Sam Whittle, Steve Niemitz, Tanay Tummalapalli, Thomas Weise,
Tianyang Hu, ttanay, tvalentyn, Udi Meiri, Valentyn Tymofieiev, Wout Scheepers,
yanzhi, Yekut, Yichi Zhang, Yifan Zou, yoshiki.obata, Yueyang Qiu, Yunqing Zhou&lt;/p&gt;
</description>
        <pubDate>Thu, 22 Aug 2019 01:00:01 -0700</pubDate>
        <link>https://beam.apache.org/blog/2019/08/22/beam-2.15.0.html</link>
        <guid isPermaLink="true">https://beam.apache.org/blog/2019/08/22/beam-2.15.0.html</guid>
        
        
        <category>blog</category>
        
      </item>
    
      <item>
        <title>Apache Beam 2.14.0</title>
        <description>&lt;!--
Licensed under the Apache License, Version 2.0 (the &quot;License&quot;);
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an &quot;AS IS&quot; BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
--&gt;

&lt;p&gt;We are happy to present the new 2.14.0 release of Beam. This release includes both improvements and new functionality.
See the &lt;a href=&quot;/get-started/downloads/#2140-2019-08-01&quot;&gt;download page&lt;/a&gt; for this release.&lt;!--more--&gt;
For more information on changes in 2.14.0, check out the
&lt;a href=&quot;https://issues.apache.org/jira/secure/ReleaseNote.jspa?projectId=12319527&amp;amp;version=12345431&quot;&gt;detailed release notes&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;highlights&quot;&gt;Highlights&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;Python 3 support is extended to Python 3.6 and 3.7; in addition to various other Python 3 &lt;a href=&quot;https://issues.apache.org/jira/browse/BEAM-1251?focusedCommentId=16890504&amp;amp;page=com.atlassian.jira.plugin.system.issuetabpanels%3Acomment-tabpanel#comment-16890504&quot;&gt;improvements&lt;/a&gt;.&lt;/li&gt;
  &lt;li&gt;Spark portable runner (batch) now &lt;a href=&quot;https://lists.apache.org/thread.html/c43678fc24c9a1dc9f48c51c51950aedcb9bc0fd3b633df16c3d595a@%3Cuser.beam.apache.org%3E&quot;&gt;available&lt;/a&gt; for Java, Python, Go.&lt;/li&gt;
  &lt;li&gt;Added new runner: Hazelcast Jet Runner. (&lt;a href=&quot;https://issues.apache.org/jira/browse/BEAM-7305&quot;&gt;BEAM-7305&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;ios&quot;&gt;I/Os&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;Schema support added to BigQuery reads. (Java) (&lt;a href=&quot;https://issues.apache.org/jira/browse/BEAM-6673&quot;&gt;BEAM-6673&lt;/a&gt;)&lt;/li&gt;
  &lt;li&gt;Schema support added to JDBC source. (Java) (&lt;a href=&quot;https://issues.apache.org/jira/browse/BEAM-6674&quot;&gt;BEAM-6674&lt;/a&gt;)&lt;/li&gt;
  &lt;li&gt;BigQuery support for &lt;code class=&quot;highlighter-rouge&quot;&gt;bytes&lt;/code&gt; is fixed. (Python 3) (&lt;a href=&quot;https://issues.apache.org/jira/browse/BEAM-6769&quot;&gt;BEAM-6769&lt;/a&gt;)&lt;/li&gt;
  &lt;li&gt;Added DynamoDB IO. (Java) (&lt;a href=&quot;https://issues.apache.org/jira/browse/BEAM-7043&quot;&gt;BEAM-7043&lt;/a&gt;)&lt;/li&gt;
  &lt;li&gt;Added support unbounded reads with HCatalogIO (Java) (&lt;a href=&quot;https://issues.apache.org/jira/browse/BEAM-7450&quot;&gt;BEAM-7450&lt;/a&gt;)&lt;/li&gt;
  &lt;li&gt;Added BoundedSource wrapper for SDF. (Python) (&lt;a href=&quot;https://issues.apache.org/jira/browse/BEAM-7443&quot;&gt;BEAM-7443&lt;/a&gt;)&lt;/li&gt;
  &lt;li&gt;Added support for INCRBY/DECRBY operations in RedisIO. (&lt;a href=&quot;https://issues.apache.org/jira/browse/BEAM-7286&quot;&gt;BEAM-7286&lt;/a&gt;)&lt;/li&gt;
  &lt;li&gt;Added Support for ValueProvider defined GCS Location for WriteToBigQuery with File Loads. (Java) ((&lt;a href=&quot;https://issues.apache.org/jira/browse/BEAM-7603&quot;&gt;BEAM-7603&lt;/a&gt;))&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;new-features--improvements&quot;&gt;New Features / Improvements&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;Python SDK add support for DoFn &lt;code class=&quot;highlighter-rouge&quot;&gt;setup&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;teardown&lt;/code&gt; methods. (&lt;a href=&quot;https://issues.apache.org/jira/browse/BEAM-562&quot;&gt;BEAM-562&lt;/a&gt;)&lt;/li&gt;
  &lt;li&gt;Python SDK adds new transforms: &lt;a href=&quot;https://issues.apache.org/jira/browse/BEAM-6693&quot;&gt;ApproximateUnique&lt;/a&gt;, &lt;a href=&quot;https://issues.apache.org/jira/browse/BEAM-6695&quot;&gt;Latest&lt;/a&gt;, &lt;a href=&quot;https://issues.apache.org/jira/browse/BEAM-7019&quot;&gt;Reify&lt;/a&gt;, &lt;a href=&quot;https://issues.apache.org/jira/browse/BEAM-7021&quot;&gt;ToString&lt;/a&gt;, &lt;a href=&quot;https://issues.apache.org/jira/browse/BEAM-7023&quot;&gt;WithKeys&lt;/a&gt;.&lt;/li&gt;
  &lt;li&gt;Added hook for user-defined JVM initialization in workers. (&lt;a href=&quot;https://issues.apache.org/jira/browse/BEAM-6872&quot;&gt;BEAM-6872&lt;/a&gt;)&lt;/li&gt;
  &lt;li&gt;Added support for SQL Row Estimation for BigQueryTable. (&lt;a href=&quot;https://issues.apache.org/jira/browse/BEAM-7513&quot;&gt;BEAM-7513&lt;/a&gt;)&lt;/li&gt;
  &lt;li&gt;Auto sharding of streaming sinks in FlinkRunner. (&lt;a href=&quot;https://issues.apache.org/jira/browse/BEAM-5865&quot;&gt;BEAM-5865&lt;/a&gt;)&lt;/li&gt;
  &lt;li&gt;Removed the Hadoop dependency from the external sorter. (&lt;a href=&quot;https://issues.apache.org/jira/browse/BEAM-7268&quot;&gt;BEAM-7268&lt;/a&gt;)&lt;/li&gt;
  &lt;li&gt;Added option to expire portable SDK worker environments. (&lt;a href=&quot;https://issues.apache.org/jira/browse/BEAM-7348&quot;&gt;BEAM-7348&lt;/a&gt;)&lt;/li&gt;
  &lt;li&gt;Beam does not relocate Guava anymore and depends only on its own vendored version of Guava. (&lt;a href=&quot;https://issues.apache.org/jira/browse/BEAM-6620&quot;&gt;BEAM-6620&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;breaking-changes&quot;&gt;Breaking Changes&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;Deprecated set/getClientConfiguration in Jdbc IO. (&lt;a href=&quot;https://issues.apache.org/jira/browse/BEAM-7263&quot;&gt;BEAM-7263&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;bugfixes&quot;&gt;Bugfixes&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;Fixed reading of concatenated compressed files. (Python) (&lt;a href=&quot;https://issues.apache.org/jira/browse/BEAM-6952&quot;&gt;BEAM-6952&lt;/a&gt;)&lt;/li&gt;
  &lt;li&gt;Fixed re-scaling issues on Flink &amp;gt;= 1.6 versions. (&lt;a href=&quot;https://issues.apache.org/jira/browse/BEAM-7144&quot;&gt;BEAM-7144&lt;/a&gt;)&lt;/li&gt;
  &lt;li&gt;Fixed SQL EXCEPT DISTINCT behavior. (&lt;a href=&quot;https://issues.apache.org/jira/browse/BEAM-7194&quot;&gt;BEAM-7194&lt;/a&gt;)&lt;/li&gt;
  &lt;li&gt;Fixed OOM issues with bounded Reads for Flink Runner. (&lt;a href=&quot;https://issues.apache.org/jira/browse/BEAM-7442&quot;&gt;BEAM-7442&lt;/a&gt;)&lt;/li&gt;
  &lt;li&gt;Fixed HdfsFileSystem to correctly match directories. (&lt;a href=&quot;https://issues.apache.org/jira/browse/BEAM-7561&quot;&gt;BEAM-7561&lt;/a&gt;)&lt;/li&gt;
  &lt;li&gt;Upgraded Spark runner to use spark version 2.4.3. (&lt;a href=&quot;https://issues.apache.org/jira/browse/BEAM-7265&quot;&gt;BEAM-7265&lt;/a&gt;)&lt;/li&gt;
  &lt;li&gt;Upgraded Jackson to version 2.9.9. (&lt;a href=&quot;https://issues.apache.org/jira/browse/BEAM-7465&quot;&gt;BEAM-7465&lt;/a&gt;)&lt;/li&gt;
  &lt;li&gt;Various other bug fixes and performance improvements.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;known-issues&quot;&gt;Known Issues&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;Do &lt;strong&gt;NOT&lt;/strong&gt; use Python MongoDB source in this release. Python MongoDB source &lt;a href=&quot;https://issues.apache.org/jira/browse/BEAM-5148&quot;&gt;added&lt;/a&gt; in this release has a known issue that can result in data loss. See (&lt;a href=&quot;https://issues.apache.org/jira/browse/BEAM-7866&quot;&gt;BEAM-7866&lt;/a&gt;) for details.&lt;/li&gt;
  &lt;li&gt;Can’t install the Python SDK on macOS 10.15. See (&lt;a href=&quot;https://issues.apache.org/jira/browse/BEAM-8368&quot;&gt;BEAM-8368&lt;/a&gt;) for details.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;list-of-contributors&quot;&gt;List of Contributors&lt;/h2&gt;

&lt;p&gt;According to git shortlog, the following people contributed to the 2.14.0 release. Thank you to all contributors!&lt;/p&gt;

&lt;p&gt;Ahmet Altay, Aizhamal Nurmamat kyzy, Ajo Thomas, Alex Amato, Alexey Romanenko, 
Alexey Strokach, Alex Van Boxel, Alireza Samadian, Andrew Pilloud, 
Ankit Jhalaria, Ankur Goenka, Anton Kedin, Aryan Naraghi, Bartok Jozsef, 
Bora Kaplan, Boyuan Zhang, Brian Hulette, Cam Mach, Chamikara Jayalath, 
Charith Ellawala, Charles Chen, Colm O hEigeartaigh, Cyrus Maden, 
Daniel Mills, Daniel Oliveira, David Cavazos, David Moravek, David Yan, 
Daniel Lescohier, Elwin Arens, Etienne Chauchot, Fábio Franco Uechi, 
Finch Keung, Frederik Bode, Gregory Kovelman, Graham Polley, Hai Lu, Hannah Jiang, 
Harshit Dwivedi, Harsh Vardhan, Heejong Lee, Henry Suryawirawan, 
Ismaël Mejía, Jan Lukavský, Jean-Baptiste Onofré, Jozef Vilcek, Juta, Kai Jiang, 
Kamil Wu, Kasia Kucharczyk, Kenneth Knowles, Kyle Weaver, Lara Schmidt, 
Łukasz Gajowy, Luke Cwik, Manu Zhang, Mark Liu, Matthias Baetens, 
Maximilian Michels, Melissa Pashniak, Michael Luckey, Michal Walenia, 
Mikhail Gryzykhin, Ming Liang, Neville Li, Pablo Estrada, Paul Suganthan, 
Peter Backx, Rakesh Kumar, Rasmi Elasmar, Reuven Lax, Reza Rokni, Robbe Sneyders, 
Robert Bradshaw, Robert Burke, Rose Nguyen, Rui Wang, Ruoyun Huang, 
Shoaib Zafar, Slava Chernyak, Steve Niemitz, Tanay Tummalapalli, Thomas Weise, 
Tim Robertson, Tim van der Lippe, Udi Meiri, Valentyn Tymofieiev, Varun Dhussa, 
Viktor Gerdin, Yichi Zhang, Yifan Mai, Yifan Zou, Yueyang Qiu.&lt;/p&gt;
</description>
        <pubDate>Wed, 31 Jul 2019 01:00:01 -0700</pubDate>
        <link>https://beam.apache.org/blog/2019/07/31/beam-2.14.0.html</link>
        <guid isPermaLink="true">https://beam.apache.org/blog/2019/07/31/beam-2.14.0.html</guid>
        
        
        <category>blog</category>
        
      </item>
    
      <item>
        <title>Looping timers in Apache Beam</title>
        <description>&lt;!--
Licensed under the Apache License, Version 2.0 (the &quot;License&quot;);
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an &quot;AS IS&quot; BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
--&gt;

&lt;p&gt;Apache Beam’s primitives let you build expressive data pipelines, suitable for a
variety of use cases. One specific use case is the analysis of time series data
in which continuous sequences across window boundaries are important. A few fun
challenges arise as you tackle this type of data and in this blog we will
explore one of those in more detail and make use of the Timer API
(&lt;a href=&quot;/blog/2017/08/28/timely-processing.html&quot;&gt;blog post&lt;/a&gt;)
using the “looping timer” pattern.&lt;/p&gt;

&lt;!--more--&gt;

&lt;p&gt;With Beam in streaming mode, you can take streams of data and build analytical
transforms to produce results on the data. But for time series data, the absence
of data is useful information. So how can we produce results in the absence of
data?&lt;/p&gt;

&lt;p&gt;Let’s use a more concrete example to illustrate the requirement. Imagine you
have a simple pipeline that sums the number of events coming from an IoT device
every minute. We would like to produce the value 0 when no data has been seen
within a specific time interval. So why can this get tricky? Well it is easy to
build a simple pipeline that counts events as they arrive, but when there is no
event, there is nothing to count!&lt;/p&gt;

&lt;p&gt;Let’s build a simple pipeline to work with:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  // We will start our timer at 1 sec from the fixed upper boundary of our
  // minute window
  Instant now = Instant.parse(&quot;2000-01-01T00:00:59Z&quot;);

  // ----- Create some dummy data

  // Create 3 elements, incrementing by 1 minute and leaving a time gap between
  // element 2 and element 3
  TimestampedValue&amp;lt;KV&amp;lt;String, Integer&amp;gt;&amp;gt; time_1 =
    TimestampedValue.of(KV.of(&quot;Key_A&quot;, 1), now);

  TimestampedValue&amp;lt;KV&amp;lt;String, Integer&amp;gt;&amp;gt; time_2 =
    TimestampedValue.of(KV.of(&quot;Key_A&quot;, 2),
    now.plus(Duration.standardMinutes(1)));

  // No Value for start time + 2 mins
  TimestampedValue&amp;lt;KV&amp;lt;String, Integer&amp;gt;&amp;gt; time_3 =
    TimestampedValue.of(KV.of(&quot;Key_A&quot;, 3),
    now.plus(Duration.standardMinutes(3)));

  // Create pipeline
  PipelineOptions options = PipelineOptionsFactory.fromArgs(args).withValidation()
    .as(PipelineOptions.class);

  Pipeline p = Pipeline.create(options);

  // Apply a fixed window of duration 1 min and Sum the results
  p.apply(Create.timestamped(time_1, time_2, time_3))
   .apply(
      Window.&amp;lt;KV&amp;lt;String,Integer&amp;gt;&amp;gt;into(
FixedWindows.&amp;lt;Integer&amp;gt;of(Duration.standardMinutes(1))))
        .apply(Sum.integersPerKey())
        .apply(ParDo.of(new DoFn&amp;lt;KV&amp;lt;String, Integer&amp;gt;, KV&amp;lt;String, Integer&amp;gt;&amp;gt;() {

          @ProcessElement public void process(ProcessContext c) {
            LOG.info(&quot;Value is {} timestamp is {}&quot;, c.element(), c.timestamp());
          }
       }));

  p.run();
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Running that pipeline will result in the following output:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;INFO  LoopingTimer  - Value is KV{Key_A, 1} timestamp is 2000-01-01T00:00:59.999Z
INFO  LoopingTimer  - Value is KV{Key_A, 3} timestamp is 2000-01-01T00:03:59.999Z
INFO  LoopingTimer  - Value is KV{Key_A, 2} timestamp is 2000-01-01T00:01:59.999Z
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;blockquote&gt;
  &lt;p&gt;Note: The lack of order in the output should be expected, however the
key-window tuple is correctly computed.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;As expected, we see output in each of the interval windows which had a data
point with a timestamp between the minimum and maximum value of the window.
There was a data point at timestamps  00:00:59,  00:01:59 and  00:03:59, which
fell into the following interval windows.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;[00:00:00, 00:00:59.999)&lt;/li&gt;
  &lt;li&gt;[00:01:00, 00:01:59.999)&lt;/li&gt;
  &lt;li&gt;[00:03:00, 00:03:59.999)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;But as there was no data between  00:02:00 and  00:02:59, no value is produced
for interval window  [00:02:00,00:02:59.999).&lt;/p&gt;

&lt;p&gt;How can we get Beam to output values for that missing window? First, let’s walk
through some options that do not make use of the Timer API.&lt;/p&gt;

&lt;h2 id=&quot;option-1-external-heartbeat&quot;&gt;Option 1: External heartbeat&lt;/h2&gt;

&lt;p&gt;We can use an external system to emit a value for each time interval and inject
it into the stream of data that Beam consumes. This simple option moves any
complexity out of the Beam pipeline. But using an external system means we need
to monitor this system and perform other maintenance tasks in tandem with the
Beam pipeline.&lt;/p&gt;

&lt;h2 id=&quot;option-2-use-a-generated-source-in-the-beam-pipeline&quot;&gt;Option 2: Use a generated source in the Beam pipeline&lt;/h2&gt;

&lt;p&gt;We can use a generating source to emit the value using this code snippet:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;pipeline.apply(GenerateSequence.
            from(0).withRate(1,Duration.standardSeconds(1L)))
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;We can then:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Use a DoFn to convert the value to zero.&lt;/li&gt;
  &lt;li&gt;Flatten this value with the real source.&lt;/li&gt;
  &lt;li&gt;Produce a PCollection which has ticks in every time interval.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;This is also a simple way of producing a value in each time interval.&lt;/p&gt;

&lt;h2 id=&quot;option-1--2-the-problem-with-multiple-keys&quot;&gt;Option 1 &amp;amp; 2 The problem with multiple keys&lt;/h2&gt;

&lt;p&gt;Both options 1 and 2 work well for the case where there the pipeline processes a
single key. Let’s now deal with the case where instead of 1 IoT device, there
are 1000s or 100,000s of these devices, each with a unique key. To make option 1
or option 2 work in this scenario, we need to carry out an extra step: creating
a FanOut DoFn. Each tick needs to be distributed to all the potential keys, so
we need to create a FanOut DoFn that takes the dummy value and generates a
key-value pair for every available key.&lt;/p&gt;

&lt;p&gt;For example, let’s assume we have 3 keys for 3 IoT devices, {key1,key2,key3}.
Using the method we outlined in Option 2 when we get the first element from
GenerateSequence, we need to create a loop in the DoFn that generates 3
key-value pairs. These pairs become the heartbeat value for each of the IoT
devices.&lt;/p&gt;

&lt;p&gt;And things get a lot more fun when we need to deal with lots of IoT devices,
with a list of keys that are dynamically changing. We would need to add a
transform that does a Distinct operation and feed the data produced as a
side-input into the FanOut DoFn.&lt;/p&gt;

&lt;h2 id=&quot;option-3-implementing-a-heartbeat-using-beam-timers&quot;&gt;Option 3: Implementing a heartbeat using Beam timers&lt;/h2&gt;

&lt;p&gt;So how do timers help? Well let’s have a look at a new transform:&lt;/p&gt;

&lt;p&gt;Edit: Looping Timer State changed from Boolean to Long to allow for min value check.&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;LoopingStatefulTimer&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;DoFn&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;KV&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Integer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;KV&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Integer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;Instant&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;stopTimerTime&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;LoopingStatefulTimer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Instant&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;stopTime&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;){&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;stopTimerTime&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;stopTime&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;nd&quot;&gt;@StateId&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;loopingTimerTime&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;StateSpec&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ValueState&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Long&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;loopingTimerTime&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;StateSpecs&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;BigEndianLongCoder&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;of&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt;

    &lt;span class=&quot;nd&quot;&gt;@StateId&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;key&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;StateSpec&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ValueState&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;key&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;StateSpecs&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;StringUtf8Coder&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;of&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt;

    &lt;span class=&quot;nd&quot;&gt;@TimerId&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;loopingTimer&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;TimerSpec&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;loopingTimer&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;TimerSpecs&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;timer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;TimeDomain&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;EVENT_TIME&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;

    &lt;span class=&quot;nd&quot;&gt;@ProcessElement&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;process&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ProcessContext&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nd&quot;&gt;@StateId&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;key&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ValueState&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;nd&quot;&gt;@StateId&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;loopingTimerTime&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ValueState&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Long&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;loopingTimerTime&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;nd&quot;&gt;@TimerId&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;loopingTimer&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Timer&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;loopingTimer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;

      &lt;span class=&quot;c1&quot;&gt;// If the timer has been set already, or if the value is smaller than&lt;/span&gt;
      &lt;span class=&quot;c1&quot;&gt;// the current element + window duration, do not set&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;Long&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;currentTimerValue&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;loopingTimerTime&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;read&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;Instant&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;nextTimerTimeBasedOnCurrentElement&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;timestamp&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;plus&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Duration&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;standardMinutes&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;));&lt;/span&gt;

      &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;currentTimerValue&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;currentTimerValue&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;
          &lt;span class=&quot;n&quot;&gt;nextTimerTimeBasedOnCurrentElement&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getMillis&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;())&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;loopingTimer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;set&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;nextTimerTimeBasedOnCurrentElement&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;loopingTimerTime&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;write&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;nextTimerTimeBasedOnCurrentElement&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getMillis&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt;
      &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

      &lt;span class=&quot;c1&quot;&gt;// We need this value so that we can output a value for the correct key in OnTimer&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;read&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;write&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;element&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getKey&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt;
      &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

      &lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;output&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;element&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;nd&quot;&gt;@OnTimer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;loopingTimer&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;onTimer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;OnTimerContext&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;nd&quot;&gt;@StateId&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;key&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ValueState&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;nd&quot;&gt;@TimerId&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;loopingTimer&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Timer&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;loopingTimer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;

      &lt;span class=&quot;n&quot;&gt;LOG&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;info&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Timer @ {} fired&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;timestamp&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;output&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;KV&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;of&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;read&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(),&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;));&lt;/span&gt;

      &lt;span class=&quot;c1&quot;&gt;// If we do not put in a “time to live” value, then the timer would loop forever&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;Instant&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;nextTimer&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;timestamp&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;plus&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Duration&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;standardMinutes&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;));&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;nextTimer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;isBefore&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;stopTimerTime&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;loopingTimer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;set&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;nextTimer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
      &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;LOG&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;info&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;
            &lt;span class=&quot;s&quot;&gt;&quot;Timer not being set as exceeded Stop Timer value {} &quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;stopTimerTime&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
      &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;There are two data values that the state API needs to keep:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;A boolean &lt;code class=&quot;highlighter-rouge&quot;&gt;timeRunning&lt;/code&gt; value used to avoid resetting the timer if it’s
already running.&lt;/li&gt;
  &lt;li&gt;A “&lt;em&gt;key&lt;/em&gt;” state object value that allows us to store the key that we are
working with. This information will be needed in the &lt;code class=&quot;highlighter-rouge&quot;&gt;OnTimer&lt;/code&gt; event later.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;We also have a Timer with the ID &lt;code class=&quot;highlighter-rouge&quot;&gt;**loopingTimer**&lt;/code&gt; that acts as our per
interval alarm clock. Note that the timer is an &lt;em&gt;event timer&lt;/em&gt;. It fires based on
the watermark, not on the passage of time as the pipeline runs.&lt;/p&gt;

&lt;p&gt;Next, let’s unpack what’s happening in the @ProcessElement block:&lt;/p&gt;

&lt;p&gt;The first element to come to this block will:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Set the state of the &lt;code class=&quot;highlighter-rouge&quot;&gt;timerRunner&lt;/code&gt; to True.&lt;/li&gt;
  &lt;li&gt;Write the value of the key from the key-value pair into the key StateValue.&lt;/li&gt;
  &lt;li&gt;The code sets the value of the timer to fire one minute after the elements
timestamp. Note that the maximum value allowed for this timestamp is
XX:XX:59.999. This places the maximum alarm value at the upper boundary of
the next time interval.&lt;/li&gt;
  &lt;li&gt;Finally, we output the data from the &lt;code class=&quot;highlighter-rouge&quot;&gt;@ProcessElement&lt;/code&gt; block using
&lt;code class=&quot;highlighter-rouge&quot;&gt;c.output&lt;/code&gt;.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;In the @OnTimer block, the following occurs:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;The code emits a value with the key pulled from our key StateValue and a
value of 0. The timestamp of the event corresponds to  the event time of the
timer firing.&lt;/li&gt;
  &lt;li&gt;We set a new timer for one minute from now, unless we are past the
&lt;code class=&quot;highlighter-rouge&quot;&gt;stopTimerTime&lt;/code&gt; value. Your use case will normally have more complex stopping
conditions, but we use a simple condition here to allow us to keep the
illustrated code simple. The topic of stopping conditions is discussed in
more detail later.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;And that’s it, let’s add our transform back into the pipeline:&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  &lt;span class=&quot;c1&quot;&gt;// Apply a fixed window of duration 1 min and Sum the results&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;apply&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Create&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;timestamped&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;time_1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;time_2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;time_3&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;apply&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;Window&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;KV&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Integer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;into&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;FixedWindows&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Integer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;of&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Duration&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;standardMinutes&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))))&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// We use a combiner to reduce the number of calls in keyed state&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// from all elements to 1 per FixedWindow&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;apply&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Sum&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;integersPerKey&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;())&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;apply&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Window&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;into&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;GlobalWindows&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()))&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;apply&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ParDo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;of&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;LoopingStatefulTimer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Instant&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;parse&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;2000-01-01T00:04:00Z&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))))&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;apply&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Window&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;into&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;FixedWindows&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;of&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Duration&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;standardMinutes&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))))&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;apply&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Sum&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;integersPerKey&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;())&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;apply&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ParDo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;of&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;DoFn&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;KV&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Integer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;KV&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Integer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;

      &lt;span class=&quot;nd&quot;&gt;@ProcessElement&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;process&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ProcessContext&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;

        &lt;span class=&quot;n&quot;&gt;LOG&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;info&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Value is {} timestamp is {}&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;element&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;timestamp&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt;

     &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}));&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ol&gt;
  &lt;li&gt;In the first part of the pipeline we create FixedWindows and reduce the value
per key down to a single Sum.&lt;/li&gt;
  &lt;li&gt;Next we re-window the output into a GlobalWindow. Since state and timers are
per window, they must be set within the window boundary. We want the looping
timer to span all the fixed windows, so we set it up in the global window.&lt;/li&gt;
  &lt;li&gt;We then add our LoopingStatefulTimer DoFn.&lt;/li&gt;
  &lt;li&gt;Finally, we reapply the FixedWindows and Sum our values.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;This pipeline ensures that a value of zero exists for each interval window, even
if the Source of the pipeline emitted a value in the minimum and maximum
boundaries of the interval window. This means that we can mark the absence of
data.&lt;/p&gt;

&lt;p&gt;You might question why we use two reducers with multiple &lt;code class=&quot;highlighter-rouge&quot;&gt;Sum.integersPerKey&lt;/code&gt;.
Why not just use one? Functionally, using one would also produce the correct
result. However, putting two &lt;code class=&quot;highlighter-rouge&quot;&gt;Sum.integersPerKey&lt;/code&gt; gives us a nice performance
advantage. It reduces the number of elements from many to just one per time
interval. This can reduce the number of reads of the State API during the
&lt;code class=&quot;highlighter-rouge&quot;&gt;@ProcessElement&lt;/code&gt; calls.&lt;/p&gt;

&lt;p&gt;Here is the logging output of running our modified pipeline:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;INFO  LoopingTimer  - Timer @ 2000-01-01T00:01:59.999Z fired
INFO  LoopingTimer  - Timer @ 2000-01-01T00:02:59.999Z fired
INFO  LoopingTimer  - Timer @ 2000-01-01T00:03:59.999Z fired
INFO  LoopingTimer  - Timer not being set as exceeded Stop Timer value 2000-01-01T00:04:00.000Z
INFO  LoopingTimer  - Value is KV{Key_A, 1} timestamp is 2000-01-01T00:00:59.999Z
INFO  LoopingTimer  - Value is KV{Key_A, 0} timestamp is 2000-01-01T00:02:59.999Z
INFO  LoopingTimer  - Value is KV{Key_A, 2} timestamp is 2000-01-01T00:01:59.999Z
INFO  LoopingTimer  - Value is KV{Key_A, 3} timestamp is 2000-01-01T00:03:59.999Z
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Yay! We now have output from the time interval [00:01:00, 00:01:59.999), even
though the source dataset has no elements in that interval.&lt;/p&gt;

&lt;p&gt;In this blog, we covered one of the fun areas around time series use cases and
worked through several options, including an advanced use case of the Timer API.
Happy looping everyone!&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; Looping timers is an interesting new use case for the Timer API and
runners will need to add support for it with all of their more advanced
feature sets. You can experiment with this pattern today using the
DirectRunner. For other runners, please look out for their release notes on
support for dealing with this use case in production.&lt;/p&gt;

&lt;p&gt;(&lt;a href=&quot;/documentation/runners/capability-matrix/&quot;&gt;Capability Matrix&lt;/a&gt;)&lt;/p&gt;

&lt;p&gt;Runner specific notes:
Google Cloud Dataflow Runners Drain feature does not support looping timers (Link to matrix)&lt;/p&gt;
</description>
        <pubDate>Tue, 11 Jun 2019 01:00:01 -0700</pubDate>
        <link>https://beam.apache.org/blog/2019/06/11/looping-timers.html</link>
        <guid isPermaLink="true">https://beam.apache.org/blog/2019/06/11/looping-timers.html</guid>
        
        
        <category>blog</category>
        
      </item>
    
      <item>
        <title>Apache Beam 2.13.0</title>
        <description>&lt;!--
Licensed under the Apache License, Version 2.0 (the &quot;License&quot;);
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an &quot;AS IS&quot; BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
--&gt;

&lt;p&gt;We are happy to present the new 2.13.0 release of Beam. This release includes both improvements and new functionality.
See the &lt;a href=&quot;/get-started/downloads/#2130-2019-05-21&quot;&gt;download page&lt;/a&gt; for this release.&lt;!--more--&gt;
For more information on changes in 2.13.0, check out the
&lt;a href=&quot;https://jira.apache.org/jira/secure/ReleaseNote.jspa?projectId=12319527&amp;amp;version=12345166&quot;&gt;detailed release notes&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;highlights&quot;&gt;Highlights&lt;/h2&gt;

&lt;h3 id=&quot;ios&quot;&gt;I/Os&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;Support reading query results with the BigQuery storage API.&lt;/li&gt;
  &lt;li&gt;Support KafkaIO to be configured externally for use with other SDKs.&lt;/li&gt;
  &lt;li&gt;BigQuery IO now supports BYTES datatype on Python 3.&lt;/li&gt;
  &lt;li&gt;Avro IO support enabled on Python 3.&lt;/li&gt;
  &lt;li&gt;For Python 3 pipelines, the default Avro library used by Beam AvroIO and Dataflow workers was switched from avro-python3 to fastavro.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;new-features--improvements&quot;&gt;New Features / Improvements&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;Flink 1.8 support added.&lt;/li&gt;
  &lt;li&gt;Support to run word count on Portable Spark runner.&lt;/li&gt;
  &lt;li&gt;ElementCount metrics in FnApi Dataflow Runner.&lt;/li&gt;
  &lt;li&gt;Support to create BinaryCombineFn from lambdas.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;breaking-changes&quot;&gt;Breaking Changes&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;When writing BYTES Datatype into Bigquery with Beam Bigquery IO on Python DirectRunner, users need to base64-encode bytes values before passing them to Bigquery IO. Accordingly, when reading bytes data from BigQuery, the IO will also return base64-encoded bytes. This change only affects Bigquery IO on Python DirectRunner. New DirectRunner behavior is consistent with treatment of Bytes by Beam Java Bigquery IO, and Python Dataflow Runner.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;bugfixes&quot;&gt;Bugfixes&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;Various bug fixes and performance improvements.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;list-of-contributors&quot;&gt;List of Contributors&lt;/h2&gt;

&lt;p&gt;According to git shortlog, the following people contributed to the 2.13.0 release. Thank you to all contributors!&lt;/p&gt;

&lt;p&gt;Aaron Li, Ahmet Altay, Aizhamal Nurmamat kyzy, Alex Amato, Alexey Romanenko, 
Andrew Pilloud, Ankur Goenka, Anton Kedin, apstndb, Boyuan Zhang, Brian Hulette, 
Brian Quinlan, Chamikara Jayalath, Cyrus Maden, Daniel Chen, Daniel Oliveira, 
David Cavazos, David Moravek, David Yan, EdgarLGB, Etienne Chauchot, frederik2, 
Gleb Kanterov, Harshit Dwivedi, Harsh Vardhan, Heejong Lee, Hennadiy Leontyev, 
Henri-Mayeul de Benque, Ismaël Mejía, Jae-woo Kim, Jamie Kirkpatrick, Jan Lukavský, 
Jason Kuster, Jean-Baptiste Onofré, JohnZZGithub, Jozef Vilcek, Juta, Kenneth Jung, 
Kenneth Knowles, Kyle Weaver, Łukasz Gajowy, Luke Cwik, Mark Liu, Mathieu Blanchard, 
Maximilian Michels, Melissa Pashniak, Michael Luckey, Michal Walenia, Mike Kaplinskiy, 
Mike Pedersen, Mikhail Gryzykhin, Mikhail-Ivanov, Niklas Hansson, pabloem, 
Pablo Estrada, Pranay Nanda, Reuven Lax, Richard Moorhead, Robbe Sneyders, 
Robert Bradshaw, Robert Burke, Roman van der Krogt, rosetn, Rui Wang, Ryan Yuan, 
Sam Whittle, sudhan499, Sylwester Kardziejonek, Ted, Thomas Weise, Tim Robertson, 
ttanay, tvalentyn, Udi Meiri, Valentyn Tymofieiev, Xinyu Liu, Yifan Zou, 
yoshiki.obata, Yueyang Qiu&lt;/p&gt;
</description>
        <pubDate>Fri, 07 Jun 2019 01:00:01 -0700</pubDate>
        <link>https://beam.apache.org/blog/2019/05/22/beam-2.13.0.html</link>
        <guid isPermaLink="true">https://beam.apache.org/blog/2019/05/22/beam-2.13.0.html</guid>
        
        
        <category>blog</category>
        
      </item>
    
      <item>
        <title>Adding new Data Sources to Beam SQL CLI</title>
        <description>&lt;!--
Licensed under the Apache License, Version 2.0 (the &quot;License&quot;);
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an &quot;AS IS&quot; BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
--&gt;

&lt;p&gt;A new, exciting feature that came to Apache Beam is the ability to use
SQL in your pipelines. This is done using Beam’s
&lt;a href=&quot;https://beam.apache.org/releases/javadoc/current/org/apache/beam/sdk/extensions/sql/SqlTransform.html&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;SqlTransform&lt;/code&gt;&lt;/a&gt;
in Java pipelines.&lt;/p&gt;

&lt;p&gt;Beam also has a fancy new SQL command line that you can use to query your
data interactively, be it Batch or Streaming. If you haven’t tried it, check out
&lt;a href=&quot;http://bit.ly/ExploreBeamSQL&quot;&gt;http://bit.ly/ExploreBeamSQL&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;A nice feature of the SQL CLI is that you can use &lt;code class=&quot;highlighter-rouge&quot;&gt;CREATE EXTERNAL TABLE&lt;/code&gt;
commands to &lt;em&gt;add&lt;/em&gt; data sources to be accessed in the CLI. Currently, the CLI
supports creating tables from BigQuery, PubSub, Kafka, and text files. In this
post, we explore how to add new data sources, so that you will be able to
consume data from other Beam sources.&lt;/p&gt;

&lt;!--more--&gt;

&lt;p&gt;The table provider we will be implementing in this post will be generating a
continuous unbounded stream of integers. It will be based on the
&lt;a href=&quot;https://beam.apache.org/releases/javadoc/current/org/apache/beam/sdk/io/GenerateSequence.html&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;GenerateSequence&lt;/code&gt; PTransform&lt;/a&gt;
from the Beam SDK. In the end will be able to define and use the sequence generator
in SQL like this:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;CREATE EXTERNAL TABLE                      -- all tables in Beam are external, they are not persisted
  sequenceTable                              -- table alias that will be used in queries
  (
         sequence BIGINT,                  -- sequence number
         event_timestamp TIMESTAMP         -- timestamp of the generated event
  )
TYPE sequence                              -- type identifies the table provider
TBLPROPERTIES '{ elementsPerSecond : 12 }' -- optional rate at which events are generated
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;And we’ll be able to use it in queries like so:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;SELECT sequence FROM sequenceTable;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Let’s dive in!&lt;/p&gt;

&lt;h3 id=&quot;implementing-a-tableprovider&quot;&gt;Implementing a &lt;code class=&quot;highlighter-rouge&quot;&gt;TableProvider&lt;/code&gt;&lt;/h3&gt;

&lt;p&gt;Beam’s &lt;code class=&quot;highlighter-rouge&quot;&gt;SqlTransform&lt;/code&gt; works by relying on &lt;code class=&quot;highlighter-rouge&quot;&gt;TableProvider&lt;/code&gt;s, which it uses when
one uses a &lt;code class=&quot;highlighter-rouge&quot;&gt;CREATE EXTERNAL TABLE&lt;/code&gt; statement. If you are looking to add a new
data source to the Beam SQL CLI, then you will want to add a &lt;code class=&quot;highlighter-rouge&quot;&gt;TableProvider&lt;/code&gt; to
do it. In this post, I will show what steps are necessary to create a new table
provider for the
&lt;a href=&quot;https://beam.apache.org/releases/javadoc/current/org/apache/beam/sdk/io/GenerateSequence.html&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;GenerateSequence&lt;/code&gt; transform&lt;/a&gt; available in the Java SDK.&lt;/p&gt;

&lt;p&gt;The &lt;code class=&quot;highlighter-rouge&quot;&gt;TableProvider&lt;/code&gt; classes are under
&lt;a href=&quot;https://github.com/apache/beam/tree/master/sdks/java/extensions/sql/src/main/java/org/apache/beam/sdk/extensions/sql/meta/provider&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;sdks/java/extensions/sql/src/main/java/org/apache/beam/sdk/extensions/sql/meta/provider/&lt;/code&gt;&lt;/a&gt;. If you look in there, you can find providers, and their implementations, for all available data sources. So, you just need to add the one you want, along with an implementation of &lt;code class=&quot;highlighter-rouge&quot;&gt;BaseBeamTable&lt;/code&gt;.&lt;/p&gt;

&lt;h3 id=&quot;the-generatesequencetableprovider&quot;&gt;The GenerateSequenceTableProvider&lt;/h3&gt;

&lt;p&gt;Our table provider looks like this:&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nd&quot;&gt;@AutoService&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;TableProvider&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;GenerateSequenceTableProvider&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;InMemoryMetaTableProvider&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;

  &lt;span class=&quot;nd&quot;&gt;@Override&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;getTableType&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;sequence&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;nd&quot;&gt;@Override&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;BeamSqlTable&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;buildBeamSqlTable&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Table&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;table&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;GenerateSequenceTable&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;table&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;All it does is give a type to the table - and it implements the
&lt;code class=&quot;highlighter-rouge&quot;&gt;buildBeamSqlTable&lt;/code&gt; method, which simply returns a &lt;code class=&quot;highlighter-rouge&quot;&gt;BeamSqlTable&lt;/code&gt; defined by
our &lt;code class=&quot;highlighter-rouge&quot;&gt;GenerateSequenceTable&lt;/code&gt; implementation.&lt;/p&gt;

&lt;h3 id=&quot;the-generatesequencetable&quot;&gt;The GenerateSequenceTable&lt;/h3&gt;

&lt;p&gt;We want a table implementation that supports streaming properly, so we will
allow users to define the number of elements to be emitted per second. We will
define a simple table that emits sequential integers in a streaming fashion.
This looks like so:&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;GenerateSequenceTable&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;BaseBeamTable&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;implements&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Serializable&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Schema&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;TABLE_SCHEMA&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;Schema&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;of&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Field&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;of&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;sequence&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;FieldType&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;INT64&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Field&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;of&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;event_time&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;FieldType&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;DATETIME&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;));&lt;/span&gt;

  &lt;span class=&quot;n&quot;&gt;Integer&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;elementsPerSecond&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

  &lt;span class=&quot;n&quot;&gt;GenerateSequenceTable&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Table&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;table&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;super&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;TABLE_SCHEMA&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;table&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getProperties&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;containsKey&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;elementsPerSecond&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;elementsPerSecond&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;table&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getProperties&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getInteger&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;elementsPerSecond&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;nd&quot;&gt;@Override&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;PCollection&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;IsBounded&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;isBounded&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;IsBounded&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;UNBOUNDED&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;nd&quot;&gt;@Override&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;PCollection&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Row&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;buildIOReader&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;PBegin&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;begin&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;begin&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;apply&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;GenerateSequence&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;from&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;withRate&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;elementsPerSecond&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Duration&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;standardSeconds&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)))&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;apply&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;MapElements&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;into&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;TypeDescriptor&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;of&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Row&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt;
                &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;via&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;elm&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Row&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;withSchema&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;TABLE_SCHEMA&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;addValues&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;elm&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Instant&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;now&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;build&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()))&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;setRowSchema&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;getSchema&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;nd&quot;&gt;@Override&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;POutput&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;buildIOWriter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;PCollection&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Row&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;input&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;UnsupportedOperationException&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;buildIOWriter unsupported!&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;the-real-fun&quot;&gt;The real fun&lt;/h2&gt;

&lt;p&gt;Now that we have implemented the two basic classes (a &lt;code class=&quot;highlighter-rouge&quot;&gt;BaseBeamTable&lt;/code&gt;, and a
&lt;code class=&quot;highlighter-rouge&quot;&gt;TableProvider&lt;/code&gt;), we can start playing with them. After building the
&lt;a href=&quot;https://beam.apache.org/documentation/dsls/sql/shell/&quot;&gt;SQL CLI&lt;/a&gt;, we
can now perform selections on the table:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;0: BeamSQL&amp;gt; CREATE EXTERNAL TABLE input_seq (
. . . . . &amp;gt;   sequence BIGINT COMMENT 'this is the primary key',
. . . . . &amp;gt;   event_time TIMESTAMP COMMENT 'this is the element timestamp'
. . . . . &amp;gt; )
. . . . . &amp;gt; TYPE 'sequence';
No rows affected (0.005 seconds)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;And let’s select a few rows:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;0: BeamSQL&amp;gt; SELECT * FROM input_seq LIMIT 5;
+---------------------+------------+
|      sequence       | event_time |
+---------------------+------------+
| 0                   | 2019-05-21 00:36:33 |
| 1                   | 2019-05-21 00:36:33 |
| 2                   | 2019-05-21 00:36:33 |
| 3                   | 2019-05-21 00:36:33 |
| 4                   | 2019-05-21 00:36:33 |
+---------------------+------------+
5 rows selected (1.138 seconds)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Now let’s try something more interesting. Such as grouping. This will also let
us make sure that we’re providing the timestamp for each row properly:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;0: BeamSQL&amp;gt; SELECT
. . . . . &amp;gt;   COUNT(sequence) as elements,
. . . . . &amp;gt;   TUMBLE_START(event_time, INTERVAL '2' SECOND) as window_start
. . . . . &amp;gt; FROM input_seq
. . . . . &amp;gt; GROUP BY TUMBLE(event_time, INTERVAL '2' SECOND) LIMIT 5;
+---------------------+--------------+
|      elements       | window_start |
+---------------------+--------------+
| 6                   | 2019-06-05 00:39:24 |
| 10                  | 2019-06-05 00:39:26 |
| 10                  | 2019-06-05 00:39:28 |
| 10                  | 2019-06-05 00:39:30 |
| 10                  | 2019-06-05 00:39:32 |
+---------------------+--------------+
5 rows selected (10.142 seconds)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;And voilà! We can start playing with some interesting streaming queries to our
sequence generator.&lt;/p&gt;
</description>
        <pubDate>Tue, 04 Jun 2019 01:00:01 -0700</pubDate>
        <link>https://beam.apache.org/blog/2019/06/04/adding-data-sources-to-sql.html</link>
        <guid isPermaLink="true">https://beam.apache.org/blog/2019/06/04/adding-data-sources-to-sql.html</guid>
        
        
        <category>blog</category>
        
      </item>
    
      <item>
        <title>Apache Beam Katas</title>
        <description>&lt;!--
Licensed under the Apache License, Version 2.0 (the &quot;License&quot;);
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an &quot;AS IS&quot; BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
--&gt;

&lt;p&gt;We are happy to announce 
&lt;a href=&quot;https://github.com/apache/beam/tree/master/learning/katas&quot;&gt;Apache Beam Katas&lt;/a&gt;, a set of 
interactive Beam coding exercises (i.e. &lt;a href=&quot;http://codekata.com/&quot;&gt;code katas&lt;/a&gt;) that can help you in 
learning Apache Beam concepts and programming model hands-on.&lt;/p&gt;

&lt;!--more--&gt;

&lt;p&gt;Beam Katas objective is to provide a series of structured hands-on learning experiences for learners 
to understand about Apache Beam and its SDKs by solving exercises with gradually increasing 
complexity. It is built based on 
&lt;a href=&quot;https://www.jetbrains.com/education/&quot;&gt;JetBrains Educational Products&lt;/a&gt;. Beam Katas is available for 
both Java and Python SDKs. Currently we have about 20 lessons that cover Apache Beam fundamentals, 
such as core transforms, common transforms, and simple use case (word count), with more katas to 
be added in the coming future.&lt;/p&gt;

&lt;p&gt;To start with the courses, you can simply download 
&lt;a href=&quot;https://www.jetbrains.com/education/download/#section=idea&quot;&gt;IntelliJ Edu&lt;/a&gt; or 
&lt;a href=&quot;https://www.jetbrains.com/education/download/#section=pycharm-edu&quot;&gt;PyCharm Edu&lt;/a&gt; and then browse 
the integrated Stepik courses from the menu. Search for “Beam Katas” and once the course is loaded 
on the IDE, you’re good to go.&lt;/p&gt;

&lt;p&gt;We have plans to add more katas covering more topics including some of the intermediate and 
advanced ones in the coming future, such as windowing, streaming, and use case patterns. We would 
also like to welcome you to &lt;a href=&quot;https://github.com/apache/beam&quot;&gt;contribute&lt;/a&gt; by building and adding more katas that you think would be 
useful for people to learn more about Apache Beam, and eventually become Beam Masters!&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/blog/beam-kata/beam-kata-intellij-edu-1.png&quot; alt=&quot;Beam Kata - IntelliJ Edu&quot; width=&quot;363&quot; height=&quot;350&quot; /&gt;
&lt;img src=&quot;/images/blog/beam-kata/beam-kata-intellij-edu-2.png&quot; alt=&quot;Beam Kata - IntelliJ Edu&quot; width=&quot;455&quot; height=&quot;350&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/blog/beam-kata/beam-kata-pycharm-edu-1.png&quot; alt=&quot;Beam Kata - PyCharm Edu&quot; width=&quot;363&quot; height=&quot;350&quot; /&gt;
&lt;img src=&quot;/images/blog/beam-kata/beam-kata-pycharm-edu-2.png&quot; alt=&quot;Beam Kata - PyCharm Edu&quot; width=&quot;459&quot; height=&quot;350&quot; /&gt;&lt;/p&gt;
</description>
        <pubDate>Thu, 30 May 2019 01:00:01 -0700</pubDate>
        <link>https://beam.apache.org/blog/2019/05/30/beam-kata-release.html</link>
        <guid isPermaLink="true">https://beam.apache.org/blog/2019/05/30/beam-kata-release.html</guid>
        
        
        <category>blog</category>
        
      </item>
    
      <item>
        <title>Beam community update!</title>
        <description>&lt;!--
Licensed under the Apache License, Version 2.0 (the &quot;License&quot;);
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an &quot;AS IS&quot; BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
--&gt;

&lt;h1 id=&quot;the-apache-beam-community-in-2019&quot;&gt;The Apache Beam community in 2019&lt;/h1&gt;

&lt;p&gt;2019 has already been a busy time for the Apache Beam community. The ASF blog featured &lt;a href=&quot;https://blogs.apache.org/comdev/date/20190222&quot;&gt;our way of community building&lt;/a&gt; and we’ve had &lt;a href=&quot;https://www.meetup.com/San-Francisco-Apache-Beam/events/257482350&quot;&gt;more Beam meetups&lt;/a&gt;  around the world. Apache Beam also received the &lt;a href=&quot;https://www.infoworld.com/article/3336072/infoworlds-2019-technology-of-the-year-award-winners.html&quot;&gt;Technology of the Year Award&lt;/a&gt; from InfoWorld.&lt;/p&gt;

&lt;p&gt;As these events happened, we were building up to the &lt;a href=&quot;https://opensource.googleblog.com/2019/03/celebrating-20-years-of-apache.html&quot;&gt;20th anniversary of the Apache Software Foundation&lt;/a&gt;.  The contributions of the Beam community were a part of Maximilian Michels blog post on the success of the ASF’s open source development model:&lt;/p&gt;

&lt;blockquote class=&quot;twitter-tweet&quot; data-lang=&quot;nl&quot;&gt;&lt;p lang=&quot;en&quot; dir=&quot;ltr&quot;&gt;Success at Apache: What You Need to Know by Maximilian Michels &lt;a href=&quot;https://t.co/XjtVYgPAHX&quot;&gt;https://t.co/XjtVYgPAHX&lt;/a&gt; &lt;a href=&quot;https://twitter.com/hashtag/Apache?src=hash&amp;amp;ref_src=twsrc%5Etfw&quot;&gt;#Apache&lt;/a&gt; &lt;a href=&quot;https://twitter.com/hashtag/Open?src=hash&amp;amp;ref_src=twsrc%5Etfw&quot;&gt;#Open&lt;/a&gt; &lt;a href=&quot;https://twitter.com/hashtag/Innovation?src=hash&amp;amp;ref_src=twsrc%5Etfw&quot;&gt;#Innovation&lt;/a&gt; &lt;a href=&quot;https://twitter.com/hashtag/Community?src=hash&amp;amp;ref_src=twsrc%5Etfw&quot;&gt;#Community&lt;/a&gt; &lt;a href=&quot;https://twitter.com/hashtag/people?src=hash&amp;amp;ref_src=twsrc%5Etfw&quot;&gt;#people&lt;/a&gt; &lt;a href=&quot;https://twitter.com/hashtag/processes?src=hash&amp;amp;ref_src=twsrc%5Etfw&quot;&gt;#processes&lt;/a&gt; &lt;a href=&quot;https://twitter.com/hashtag/JustWorks?src=hash&amp;amp;ref_src=twsrc%5Etfw&quot;&gt;#JustWorks&lt;/a&gt; &lt;a href=&quot;https://twitter.com/stadtlegende?ref_src=twsrc%5Etfw&quot;&gt;@stadtlegende&lt;/a&gt; &lt;a href=&quot;https://t.co/xSibnyWAMe&quot;&gt;pic.twitter.com/xSibnyWAMe&lt;/a&gt;&lt;/p&gt;&amp;mdash; Apache - The ASF (@TheASF) &lt;a href=&quot;https://twitter.com/TheASF/status/1110364656143601664?ref_src=twsrc%5Etfw&quot;&gt;26 maart 2019&lt;/a&gt;&lt;/blockquote&gt;

&lt;script async=&quot;&quot; src=&quot;https://platform.twitter.com/widgets.js&quot; charset=&quot;utf-8&quot;&gt;&lt;/script&gt;

&lt;p&gt;In that spirit, let’s have an overview of the things that have happened, what the next few months look like, and how we can foster even more community growth.&lt;/p&gt;

&lt;h2 id=&quot;meetups&quot;&gt;Meetups&lt;/h2&gt;
&lt;p&gt;We’ve had a flurry of activity, with several meetups in the planning process and more popping up globally over time. As diversity of contributors is a core ASF value, this geographic spread is exciting for the community. Here’s a picture from the latest Apache Beam meetup organized at Lyft in San Francisco:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://secure.meetupstatic.com/photos/event/8/0/1/2/600_481292786.jpeg&quot; alt=&quot;Beam Meetup Bay Area&quot; /&gt;&lt;/p&gt;

&lt;p&gt;We have more &lt;a href=&quot;https://www.meetup.com/San-Francisco-Apache-Beam&quot;&gt;Bay Area meetups&lt;/a&gt; coming soon, and the community is looking into kicking off a meetup in Toronto!&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://www.meetup.com/London-Apache-Beam-Meetup&quot;&gt;London&lt;/a&gt; had its first meetup of 2019 at the start of April:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://secure.meetupstatic.com/photos/event/4/7/0/e/600_480318190.jpeg&quot; alt=&quot;Beam Meetup London&quot; height=&quot;360&quot; width=&quot;640&quot; /&gt;&lt;/p&gt;

&lt;p&gt;and &lt;a href=&quot;https://www.meetup.com/Apache-Beam-Stockholm/events/260634514&quot;&gt;Stockholm&lt;/a&gt; had its second meetup at the start of May:&lt;/p&gt;

&lt;blockquote class=&quot;twitter-tweet&quot; data-lang=&quot;en-gb&quot;&gt;&lt;p lang=&quot;en&quot; dir=&quot;ltr&quot;&gt;Big audience for the second &lt;a href=&quot;https://twitter.com/ApacheBeam?ref_src=twsrc%5Etfw&quot;&gt;@ApacheBeam&lt;/a&gt; meetup in Stockholm! Gleb, &lt;a href=&quot;https://twitter.com/kanterov?ref_src=twsrc%5Etfw&quot;&gt;@kanterov&lt;/a&gt; from &lt;a href=&quot;https://twitter.com/SpotifyEng?ref_src=twsrc%5Etfw&quot;&gt;@SpotifyEng&lt;/a&gt; kicking off the first talk with Beam SQL.&lt;a href=&quot;https://twitter.com/hashtag/ApacheBeamStockholm?src=hash&amp;amp;ref_src=twsrc%5Etfw&quot;&gt;#ApacheBeamStockholm&lt;/a&gt; &lt;a href=&quot;https://t.co/fDqPPFh2gY&quot;&gt;pic.twitter.com/fDqPPFh2gY&lt;/a&gt;&lt;/p&gt;&amp;mdash; Matthias Baetens 🌆 (@matthiasbaetens) &lt;a href=&quot;https://twitter.com/matthiasbaetens/status/1125442916711915521?ref_src=twsrc%5Etfw&quot;&gt;6 May 2019&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async=&quot;&quot; src=&quot;https://platform.twitter.com/widgets.js&quot; charset=&quot;utf-8&quot;&gt;&lt;/script&gt;

&lt;p&gt;Keep an eye out for a meetup in &lt;a href=&quot;https://www.meetup.com/Paris-Apache-Beam-Meetup&quot;&gt;Paris&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;If you are interested in starting your own meetup, feel free &lt;a href=&quot;https://beam.apache.org/community/contact-us&quot;&gt;to reach out&lt;/a&gt;! Good places to start include our Slack channel, the dev and user mailing lists, or the Apache Beam Twitter.&lt;/p&gt;

&lt;p&gt;Even if you can’t travel to these meetups, you can stay informed on the happenings of the community.  The talks and sessions from previous conferences and meetups are archived on the &lt;a href=&quot;https://www.youtube.com/c/ApacheBeamYT&quot;&gt;Apache Beam YouTube channel&lt;/a&gt;. If you want your session added to the channel, don’t hesitate to get in touch! And in case you want to attend the next Beam event in style, you can also order your swag on the &lt;a href=&quot;https://store-beam.myshopify.com&quot;&gt;Beam swag store&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;summits&quot;&gt;Summits&lt;/h2&gt;
&lt;p&gt;The first summit of the year will be held in Berlin:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://img.evbuc.com/https%3A%2F%2Fcdn.evbuc.com%2Fimages%2F58635346%2F70962106775%2F1%2Foriginal.20190317-212619?w=800&amp;amp;auto=compress&amp;amp;rect=0%2C115%2C2666%2C1333&amp;amp;s=2680f5036dcad9177b027cce026c0224&quot; alt=&quot;Beam Summit Europe Banner&quot; /&gt;&lt;/p&gt;

&lt;p&gt;You can find more info on the &lt;a href=&quot;https://beamsummit.org&quot;&gt;website&lt;/a&gt; and read about the inaugural edition of the Beam Summit Europe &lt;a href=&quot;https://beam.apache.org/blog/2018/10/31/beam-summit-aftermath.html&quot;&gt;here&lt;/a&gt;. At these summits, you have the opportunity to meet with other Apache Beam creators and users, get expert advice, learn from the speaker sessions, and participate in workshops.&lt;/p&gt;

&lt;p&gt;We strongly encourage you to get involved again this year! You can participate in the following ways for the upcoming summit in Europe:&lt;/p&gt;

&lt;p&gt;🎫 If you want to secure your ticket to attend the Beam Summit Europe 2019, check our &lt;a href=&quot;http://beam-summit-europe.eventbrite.com&quot;&gt;event page&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;💸 If you want to make the Summit even &lt;strong&gt;more&lt;/strong&gt; awesome, check out our &lt;a href=&quot;https://drive.google.com/file/d/1R3vvOHihQbpuzF2aaSV8WYg9YHRmJwxS/view&quot;&gt;sponsor booklet&lt;/a&gt;!&lt;/p&gt;

&lt;p&gt;We also launched the CfP for our Beam Summit in North America, which will be held in collaboration with &lt;a href=&quot;https://www.apachecon.com&quot;&gt;ApacheCon&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;🎤 If you want to give a talk, take a look at our &lt;a href=&quot;https://www.apachecon.com/acna19/cfp.html&quot;&gt;CfP&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Stay tuned for more information on the summit in North America and Asia.&lt;/p&gt;

&lt;h2 id=&quot;why-community-engagement-matters&quot;&gt;Why community engagement matters&lt;/h2&gt;
&lt;p&gt;Why we need a strong Apache Beam community:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;We’re receiving lots of code contributions and need committers to review those and help onboard new contributors to the project.&lt;/li&gt;
  &lt;li&gt;We want people to feel a sense of ownership to the project. By fostering this level of engagement, the work becomes even more exciting.&lt;/li&gt;
  &lt;li&gt;A healthy community has a further reach and leads to more growth. More hours can be contributed to the project as we can spread the work and ownership.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Why are we organizing these summits:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;We’d like to give folks a place to meet, congregate, and share ideas.&lt;/li&gt;
  &lt;li&gt;We know that offline interactions often changes the nature of the online ones in a positive manner.&lt;/li&gt;
  &lt;li&gt;Building an active and diverse community is part of the Apache Way. These summits provide an opportunity for us to engage people from different locations, companies, and backgrounds.&lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Sat, 11 May 2019 01:00:01 -0700</pubDate>
        <link>https://beam.apache.org/blog/2019/05/11/beam-summit-europe-2019.html</link>
        <guid isPermaLink="true">https://beam.apache.org/blog/2019/05/11/beam-summit-europe-2019.html</guid>
        
        
        <category>blog</category>
        
      </item>
    
      <item>
        <title>Apache Beam + Kotlin = ❤️</title>
        <description>&lt;!--
Licensed under the Apache License, Version 2.0 (the &quot;License&quot;);
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an &quot;AS IS&quot; BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
--&gt;

&lt;p&gt;Apache Beam samples are now available in Kotlin!&lt;/p&gt;

&lt;!--more--&gt;

&lt;p&gt;&lt;img src=&quot;/images/blog/kotlin.png&quot; alt=&quot;Kotlin&quot; height=&quot;320&quot; width=&quot;800&quot; /&gt;&lt;/p&gt;

&lt;p&gt;If you are someone who’s been working with Java in your professional career; there’s a good chance that you’ve also heard of &lt;a href=&quot;https://kotlinlang.org/&quot;&gt;Kotlin&lt;/a&gt;, which is an Open Sourced, statically typed language for JVM and is mostly being favoured by Android Developers due to the many myriad features which enable more concise and cleaner code than Java without sacrificing performance or safety.&lt;/p&gt;

&lt;p&gt;It gives us an immense pleasure to announce that we are also taking a step ahead in the same direction and releasing the samples for the Beam SDK in Kotlin alongside Java!&lt;/p&gt;

&lt;p&gt;(Note : At the time of writing this post, only the WordCount samples have been added in Koltin with more samples underway)&lt;/p&gt;

&lt;h2 id=&quot;code-snippets&quot;&gt;Code Snippets&lt;/h2&gt;
&lt;p&gt;Here are few brief snippets of code that show how the Kotlin Samples compare to Java&lt;/p&gt;

&lt;h3 id=&quot;java&quot;&gt;Java&lt;/h3&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;filename&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;format&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;
                    &lt;span class=&quot;s&quot;&gt;&quot;%s-%s-of-%s%s&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
                    &lt;span class=&quot;n&quot;&gt;filenamePrefixForWindow&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;intervalWindow&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;),&lt;/span&gt;
                    &lt;span class=&quot;n&quot;&gt;shardNumber&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
                    &lt;span class=&quot;n&quot;&gt;numShards&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
                    &lt;span class=&quot;n&quot;&gt;outputFileHints&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;suggestedFilenameSuffix&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;kotlin&quot;&gt;Kotlin&lt;/h3&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; &lt;span class=&quot;c1&quot;&gt;// String templating&lt;/span&gt;
 &lt;span class=&quot;n&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;filename&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;$filenamePrefixForWindow(intervalWindow)-$shardNumber-of-$numShards${outputFileHints.suggestedFilenameSuffix)&quot;&lt;/span&gt;  
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;java-1&quot;&gt;Java&lt;/h3&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;FormatAsTextFn&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SimpleFunction&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;KV&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Long&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nd&quot;&gt;@Override&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;apply&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;KV&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Long&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;input&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;input&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getKey&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;: &quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;input&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getValue&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;kotlin-1&quot;&gt;Kotlin&lt;/h2&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;FormatAsTextFn&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SimpleFunction&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;KV&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Long&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;override&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fun&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;apply&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;input:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;KV&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Long&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;${input.key} : ${input.value}&quot;&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;//Single line functions&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;java-2&quot;&gt;Java&lt;/h3&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tableRow&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;){&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;formatAndInsert&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tableRow&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;kotlin-2&quot;&gt;Kotlin&lt;/h3&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;tableRow&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;?.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;let&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;formatAndInsert&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;it&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;// No need for null checks&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;java-3&quot;&gt;Java&lt;/h3&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tableName&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;testTable&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;kotlin-3&quot;&gt;Kotlin&lt;/h3&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tableName&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;testTable&quot;&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;// Type inferencing&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;contributors-welcomed&quot;&gt;Contributors Welcomed!&lt;/h2&gt;

&lt;p&gt;While we’re still adding more samples and streamlining the current ones, we would love to have your feedback on the code snippets.
You can find them over here : &lt;a href=&quot;https://github.com/apache/beam/tree/master/examples/kotlin&quot;&gt;https://github.com/apache/beam/tree/master/examples/kotlin&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If you are using Kotlin with Apache Beam already; we would very much appreciate if you went ahead and help us convert the existing samples from Java into Koltin.&lt;/p&gt;

&lt;p&gt;Thank you, and we are looking forward to feedback from you!&lt;/p&gt;
</description>
        <pubDate>Thu, 25 Apr 2019 01:00:01 -0700</pubDate>
        <link>https://beam.apache.org/blog/2019/04/25/beam-kotlin.html</link>
        <guid isPermaLink="true">https://beam.apache.org/blog/2019/04/25/beam-kotlin.html</guid>
        
        
        <category>blog</category>
        
      </item>
    
  </channel>
</rss>
