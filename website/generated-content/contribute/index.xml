<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Apache Beam – Beam Contribution Guide</title>
    <link>/contribute/</link>
    <description>Recent content in Beam Contribution Guide on Apache Beam</description>
    <generator>Hugo -- gohugo.io</generator>
    
	  <atom:link href="/contribute/index.xml" rel="self" type="application/rss+xml" />
    
    
      
        
      
    
    
    <item>
      <title>Contribute: Beam Committer Guide</title>
      <link>/contribute/committer-guide/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/contribute/committer-guide/</guid>
      <description>
        
        
        &lt;!--
Licensed under the Apache License, Version 2.0 (the &#34;License&#34;);
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an &#34;AS IS&#34; BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
--&gt;
&lt;h1 id=&#34;committer-guide&#34;&gt;Committer Guide&lt;/h1&gt;
&lt;p&gt;This guide is for
&lt;a href=&#34;https://www.apache.org/foundation/how-it-works.html#committers&#34;&gt;committers&lt;/a&gt;
and covers Beam&amp;rsquo;s guidelines for reviewing and merging code.&lt;/p&gt;
&lt;h2 id=&#34;pull-request-review-objectives&#34;&gt;Pull request review objectives&lt;/h2&gt;
&lt;p&gt;The review process aims for:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Review iterations should be efficient, timely and of quality (avoid tiny or out-of-context changes or huge mega-changes)&lt;/li&gt;
&lt;li&gt;Support efficiency of authoring (don&amp;rsquo;t want to wait on a review for a tiny bit because GitHub makes it very hard to stack up reviews in sequence / don&amp;rsquo;t want to have major changes blocked because of difficulty of review)&lt;/li&gt;
&lt;li&gt;Ease of first-time contribution (encourage to follow &lt;a href=&#34;/contribute/#contributing-code&#34;&gt;contribution guildelines&lt;/a&gt;
but committer may absorb some extra effort for new contributors)&lt;/li&gt;
&lt;li&gt;Pull requests and commit messages establish a clear history with purpose and origin of changes&lt;/li&gt;
&lt;li&gt;Ability to perform a granular rollback, if necessary (also see &lt;a href=&#34;/contribute/postcommits-policies/&#34;&gt;policies&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Granularity of changes:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;We prefer small independent, incremental PRs with descriptive, isolated commits. Each commit is a single clear change&lt;/li&gt;
&lt;li&gt;It is OK to keep separate commits for different logical pieces of the code, if they make reviewing and revisiting code easier&lt;/li&gt;
&lt;li&gt;Making commits isolated is a good practice, authors should be able to relatively easily split the PR upon reviewer&amp;rsquo;s request&lt;/li&gt;
&lt;li&gt;Generally, every commit should compile and pass tests.&lt;/li&gt;
&lt;li&gt;Avoid keeping in history formatting messages such as checkstyle or spotless fixes.  Squash such commits with previous one.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;always-get-to-lgtm-looks-good-to-me&#34;&gt;Always get to LGTM (&amp;ldquo;Looks good to me!&amp;quot;)&lt;/h2&gt;
&lt;p&gt;After a pull request goes through rounds of reviews and revisions, it will
become ready for merge. A reviewer signals their approval either
by GitHub &amp;ldquo;approval&amp;rdquo; or by a comment such as &amp;ldquo;Looks good to me!&amp;rdquo; (LGTM).&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;If the author of the pull request is not a committer, a committer must be
the one to approve the change.&lt;/li&gt;
&lt;li&gt;If the author of the pull request is a committer, approval from their chosen
reviewer is enough. A committer is trusted to choose an appropriate
reviewer, even if the reviewer is not a committer.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Once a pull request is approved, any committer can merge it.&lt;/p&gt;
&lt;p&gt;Exceptions to this rule are rare and made on a case-by-case basis. A committer
may use their discretion for situations such as build breaks. In this case, you
should still seek a review on the pull request!  A common acronym you may see
is &amp;ldquo;TBR&amp;rdquo; &amp;ndash; &amp;ldquo;to be reviewed&amp;rdquo;.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Always go through a pull request, even if you won’t wait for the code
review.&lt;/strong&gt; Committers should never commit anything without going through a pull
request, even when it is an urgent fix or rollback due to build breakage.
Skipping pull request bypasses test coverage and could potentially cause the
build to fail, or fail to fix breakage.  In addition, pull requests ensure that
changes are communicated properly and potential flaws or improvements can be
spotted, even after the merge happens.&lt;/p&gt;
&lt;h2 id=&#34;contributor-license-agreement&#34;&gt;Contributor License Agreement&lt;/h2&gt;
&lt;p&gt;If you are merging a larger contribution, please make sure that the contributor
has an ICLA on file with the Apache Secretary. You can view the list of
committers &lt;a href=&#34;https://home.apache.org/phonebook.html?unix=committers&#34;&gt;here&lt;/a&gt;, as
well as &lt;a href=&#34;http://home.apache.org/unlistedclas.html&#34;&gt;ICLA-signers who aren’t yet
committers&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;For smaller contributions, however, this is not required. In this case, we rely
on &lt;a href=&#34;https://www.apache.org/licenses/LICENSE-2.0#contributions&#34;&gt;clause five&lt;/a&gt; of
the Apache License, Version 2.0, describing licensing of intentionally
submitted contributions.&lt;/p&gt;
&lt;h2 id=&#34;tests&#34;&gt;Tests&lt;/h2&gt;
&lt;p&gt;Before merging, please make sure that Jenkins tests pass, as visible in the
GitHub pull request. Do not merge the pull request if there are test failures.&lt;/p&gt;
&lt;p&gt;If the pull request contains changes that call for extra test coverage, you can
ask Jenkins to run an extended test suite. For example, if the pull request
modifies a runner, you can run the full &lt;code&gt;ValidatesRunner&lt;/code&gt; suite with a comment
such as &amp;ldquo;Run Spark ValidatesRunner&amp;rdquo;. You can run the examples and some IO
integration tests with &amp;ldquo;Run Java PostCommit&amp;rdquo;.&lt;/p&gt;
&lt;h2 id=&#34;finishing-touches&#34;&gt;Finishing touches&lt;/h2&gt;
&lt;p&gt;At some point in the review process, the change to the codebase will be
complete. However, the pull request may have a collection of review-related
commits that are not meaningful to preserve in the history. The reviewer should
give the LGTM and then request that the author of the pull request rebase,
squash, split, etc, the commits, so that the history is most useful:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Favor commits that do just one thing. The commit is the smallest unit of easy
rollback; it is easy to roll back many commits, or a whole pull request, but
harder to roll back part of a commit.&lt;/li&gt;
&lt;li&gt;Commit messages should tag JIRAs and be otherwise descriptive.
It should later not be necessary to find a merge or first PR commit to find out what caused a change.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;CHANGES.md&lt;/code&gt; file should be updated with noteworthy changes (e.g. new features, backward
incompatible changes, dependency changes, etc.).&lt;/li&gt;
&lt;li&gt;Squash the &amp;ldquo;Fixup!&amp;quot;, &amp;ldquo;Address comments&amp;rdquo; type of commits that resulted from review iterations.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;merging-it&#34;&gt;Merging it!&lt;/h2&gt;
&lt;p&gt;While it is preferred that authors squash commits after review is complete,
there may be situations where it is more practical for the committer to handle this
(such as when the action to be taken is obvious or the author isn&amp;rsquo;t available).
The committer may use the &amp;ldquo;Squash and merge&amp;rdquo; option in Github (or modify the PR commits in other ways).
The committer is ultimately responsible and we &amp;ldquo;trust the committer&amp;rsquo;s judgment&amp;rdquo;!&lt;/p&gt;
&lt;p&gt;After all the tests pass, there should be a green merge button at the bottom of
the pull request. There are multiple choices. Unless you want to squash commits
as part of the merge (see above) you should choose &amp;ldquo;Merge pull
request&amp;rdquo; and ensure &amp;ldquo;Create a merge commit&amp;rdquo; is selected from the drop down.
This preserves the commit history and adds a merge
commit, so be sure the commit history has been curated appropriately.&lt;/p&gt;
&lt;p&gt;Do &lt;em&gt;not&lt;/em&gt; use the default GitHub commit message, which looks like this:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Merge pull request #1234 from some_user/transient_branch_name

[BEAM-7873] Fix the foo bizzle bazzle
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Instead, pull it all into the subject line:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Merge pull request #1234: [BEAM-7873] Fix the foo bizzle bazzle
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;If you have comments to add, put them in the body of the commit message.&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>Contribute: Beam Design Documents</title>
      <link>/contribute/design-documents/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/contribute/design-documents/</guid>
      <description>
        
        
        &lt;!--
Licensed under the Apache License, Version 2.0 (the &#34;License&#34;);
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an &#34;AS IS&#34; BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
--&gt;
&lt;!-- 
This page will be redirected to https://cwiki.apache.org/confluence/display/BEAM/Design+Documents
--&gt;

      </description>
    </item>
    
    <item>
      <title>Contribute: Beam Feature Branches</title>
      <link>/contribute/feature-branches/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/contribute/feature-branches/</guid>
      <description>
        
        
        &lt;!--
Licensed under the Apache License, Version 2.0 (the &#34;License&#34;);
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an &#34;AS IS&#34; BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
--&gt;
&lt;h1 id=&#34;feature-branches&#34;&gt;Feature Branches&lt;/h1&gt;
&lt;p&gt;Some larger features are developed on a feature branch before being merged into
&lt;code&gt;master&lt;/code&gt;. In particular, this is often used for initial development of new
components like SDKs or runners.&lt;/p&gt;
&lt;p&gt;We expect the work on a feature branch to be &lt;em&gt;incomplete&lt;/em&gt;, but it must not
be lower quality. Code reviews for feature branches must have the same
standards as code reviews for &lt;code&gt;master&lt;/code&gt;. Once a feature branch is ready for
merge to &lt;code&gt;master&lt;/code&gt;, the set of changes will be too large to review in its
entirety. Because of this, the code reviews during development must be
thorough and trustworthy.&lt;/p&gt;
&lt;h2 id=&#34;establishing-a-feature-branch&#34;&gt;Establishing a feature branch&lt;/h2&gt;
&lt;p&gt;If your project is large enough to need a feature branch, there should
be a discussion on the mailing list. The first step is to &lt;a href=&#34;/contribute/#connect-with-the-beam-community&#34;&gt;engage&lt;/a&gt; there to raise awareness
that you want to start a large project. Almost any project should be accepted
&amp;ndash; there is no real cost to letting a feature branch exist &amp;ndash; but you may find
other interested contributors or gain other advice from the community.&lt;/p&gt;
&lt;p&gt;After the community discussion, a committer must create your feature branch.
Any committer can do create the branch through the GitHub UIs or by pushing
directly to GitHub or ASF&amp;rsquo;s gitbox.&lt;/p&gt;
&lt;h2 id=&#34;developing-on-a-feature-branch&#34;&gt;Developing on a feature branch&lt;/h2&gt;
&lt;p&gt;To contribute code on a feature branch, use the same process as in the
&lt;a href=&#34;/contribute/contribution-guide/&#34;&gt;Contribution Guide&lt;/a&gt;, but
replace &lt;code&gt;master&lt;/code&gt; with the name of the feature branch.&lt;/p&gt;
&lt;p&gt;Since feature branches are often used for new components, you may find that
there is no committer familiar with all the details of the new language or
runner. In that case, consider asking someone else familiar with the technology
to do an initial review before looping in a committer for a final review and
merge.&lt;/p&gt;
&lt;p&gt;If you are working on a feature branch, you&amp;rsquo;ll also want to frequently merge in
changes from &lt;code&gt;master&lt;/code&gt;. This prevents the feature branch from
deviating too far from the current state of &lt;code&gt;master&lt;/code&gt;. Like all changes, this
should be done via pull request. A committer may self-merge such a pull request
if there are no conflicts or test failures. If there are any conflicts or tests
that need fixing, then those should get a full review from another committer.&lt;/p&gt;
&lt;h2 id=&#34;merging-into-master&#34;&gt;Merging into &lt;code&gt;master&lt;/code&gt;&lt;/h2&gt;
&lt;p&gt;To merge a feature branch into &lt;code&gt;master&lt;/code&gt;, new components and major features
should meet the following guidelines.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Have at least 2 contributors interested in maintaining it, and 1 committer
interested in supporting it&lt;/li&gt;
&lt;li&gt;Provide both end-user and developer-facing documentation&lt;/li&gt;
&lt;li&gt;Have at least a basic level of unit test coverage&lt;/li&gt;
&lt;li&gt;Run all existing applicable integration tests with other Beam components and
create additional tests as appropriate&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;merging-a-new-runner-into-master&#34;&gt;Merging a new runner into &lt;code&gt;master&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;A new runner should:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Be able to handle a subset of the model that addresses a significant set of
use cases, such as ‘traditional batch’ or ‘processing time streaming’.&lt;/li&gt;
&lt;li&gt;Update the capability matrix with the current status&lt;/li&gt;
&lt;li&gt;Add a webpage under &lt;code&gt;documentation/runners&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;merging-a-new-sdk-into-master&#34;&gt;Merging a new SDK into &lt;code&gt;master&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;A new SDK should:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Provide the ability to construct graphs with all the basic building blocks
of the model (ParDo, GroupByKey, Window, Trigger, etc)&lt;/li&gt;
&lt;li&gt;Begin fleshing out the common composite transforms (Count, Join, etc) and I/O
connectors (Text, Kafka, etc)&lt;/li&gt;
&lt;li&gt;Have at least one runner that can execute the complete model (may be a
direct runner)&lt;/li&gt;
&lt;li&gt;Provide integration tests for executing against current and future runners&lt;/li&gt;
&lt;li&gt;Add a webpage under &lt;code&gt;documentation/sdks&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;

      </description>
    </item>
    
    <item>
      <title>Contribute: Beam Release Guide</title>
      <link>/contribute/release-guide/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/contribute/release-guide/</guid>
      <description>
        
        
        &lt;!--
Licensed under the Apache License, Version 2.0 (the &#34;License&#34;);
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an &#34;AS IS&#34; BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
--&gt;
&lt;h1 id=&#34;apache-beam-release-guide&#34;&gt;Apache Beam Release Guide&lt;/h1&gt;


&lt;nav id=&#34;TableOfContents&#34;&gt;
  &lt;ul&gt;
    &lt;li&gt;&lt;a href=&#34;#introduction&#34;&gt;Introduction&lt;/a&gt;
      &lt;ul&gt;
        &lt;li&gt;&lt;a href=&#34;#overview&#34;&gt;Overview&lt;/a&gt;&lt;/li&gt;
        &lt;li&gt;&lt;a href=&#34;#decide-to-release&#34;&gt;Decide to release&lt;/a&gt;&lt;/li&gt;
        &lt;li&gt;&lt;a href=&#34;#checklist-to-proceed-to-the-next-step&#34;&gt;Checklist to proceed to the next step&lt;/a&gt;&lt;/li&gt;
      &lt;/ul&gt;
    &lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;#1-prepare-for-the-release&#34;&gt;1. Prepare for the release&lt;/a&gt;
      &lt;ul&gt;
        &lt;li&gt;&lt;a href=&#34;#accounts&#34;&gt;Accounts&lt;/a&gt;&lt;/li&gt;
        &lt;li&gt;&lt;a href=&#34;#one-time-setup-instructions&#34;&gt;One-time setup instructions&lt;/a&gt;
          &lt;ul&gt;
            &lt;li&gt;&lt;a href=&#34;#gpg-key&#34;&gt;GPG Key&lt;/a&gt;&lt;/li&gt;
            &lt;li&gt;&lt;a href=&#34;#access-to-apache-nexus-repository&#34;&gt;Access to Apache Nexus repository&lt;/a&gt;&lt;/li&gt;
            &lt;li&gt;&lt;a href=&#34;#submit-your-gpg-public-key-into-mit-pgp-public-key-server&#34;&gt;Submit your GPG public key into MIT PGP Public Key Server&lt;/a&gt;&lt;/li&gt;
            &lt;li&gt;&lt;a href=&#34;#website-development-setup&#34;&gt;Website development setup&lt;/a&gt;&lt;/li&gt;
            &lt;li&gt;&lt;a href=&#34;#register-to-pypi&#34;&gt;Register to PyPI&lt;/a&gt;&lt;/li&gt;
            &lt;li&gt;&lt;a href=&#34;#login-to-dockerhub&#34;&gt;Login to DockerHub&lt;/a&gt;&lt;/li&gt;
          &lt;/ul&gt;
        &lt;/li&gt;
        &lt;li&gt;&lt;a href=&#34;#create-a-new-version-in-jira&#34;&gt;Create a new version in JIRA&lt;/a&gt;&lt;/li&gt;
      &lt;/ul&gt;
    &lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;#2-create-a-release-branch-in-apachebeam-repository&#34;&gt;2. Create a release branch in apache/beam repository&lt;/a&gt;
      &lt;ul&gt;
        &lt;li&gt;
          &lt;ul&gt;
            &lt;li&gt;&lt;a href=&#34;#use-cut_release_branchsh-to-cut-a-release-branch&#34;&gt;Use cut_release_branch.sh to cut a release branch&lt;/a&gt;&lt;/li&gt;
            &lt;li&gt;&lt;a href=&#34;#alternative-run-all-steps-manually&#34;&gt;(Alternative) Run all steps manually&lt;/a&gt;&lt;/li&gt;
          &lt;/ul&gt;
        &lt;/li&gt;
        &lt;li&gt;&lt;a href=&#34;#start-a-snapshot-build&#34;&gt;Start a snapshot build&lt;/a&gt;
          &lt;ul&gt;
            &lt;li&gt;&lt;a href=&#34;#run-start_snapshot_buildsh-to-trigger-build&#34;&gt;Run start_snapshot_build.sh to trigger build&lt;/a&gt;&lt;/li&gt;
            &lt;li&gt;&lt;a href=&#34;#alternative-do-all-operations-manually&#34;&gt;(Alternative) Do all operations manually&lt;/a&gt;&lt;/li&gt;
          &lt;/ul&gt;
        &lt;/li&gt;
      &lt;/ul&gt;
    &lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;#3-verify-release-branch&#34;&gt;3. Verify release branch&lt;/a&gt;
      &lt;ul&gt;
        &lt;li&gt;
          &lt;ul&gt;
            &lt;li&gt;&lt;a href=&#34;#run-automation-script-verify_release_buildsh&#34;&gt;Run automation script (verify_release_build.sh)&lt;/a&gt;&lt;/li&gt;
            &lt;li&gt;&lt;a href=&#34;#verify-the-build-succeeds&#34;&gt;Verify the build succeeds&lt;/a&gt;&lt;/li&gt;
            &lt;li&gt;&lt;a href=&#34;#alternative-run-release-build-manually-locally&#34;&gt;(Alternative) Run release build manually (locally)&lt;/a&gt;&lt;/li&gt;
            &lt;li&gt;&lt;a href=&#34;#create-release-blocking-issues-in-jira&#34;&gt;Create release-blocking issues in JIRA&lt;/a&gt;&lt;/li&gt;
          &lt;/ul&gt;
        &lt;/li&gt;
      &lt;/ul&gt;
    &lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;#4-triage-release-blocking-issues-in-jira&#34;&gt;4. Triage release-blocking issues in JIRA&lt;/a&gt;
      &lt;ul&gt;
        &lt;li&gt;&lt;a href=&#34;#review-release-notes-in-jira&#34;&gt;Review Release Notes in JIRA&lt;/a&gt;&lt;/li&gt;
        &lt;li&gt;&lt;a href=&#34;#review-cherry-picks&#34;&gt;Review cherry-picks&lt;/a&gt;&lt;/li&gt;
      &lt;/ul&gt;
    &lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;#5-build-a-release-candidate&#34;&gt;5. Build a release candidate&lt;/a&gt;
      &lt;ul&gt;
        &lt;li&gt;&lt;a href=&#34;#checklist-before-proceeding&#34;&gt;Checklist before proceeding&lt;/a&gt;&lt;/li&gt;
        &lt;li&gt;&lt;a href=&#34;#run-build_release_candidatesh-to-create-a-release-candidate&#34;&gt;Run build_release_candidate.sh to create a release candidate&lt;/a&gt;
          &lt;ul&gt;
            &lt;li&gt;&lt;a href=&#34;#tasks-you-need-to-do-manually&#34;&gt;Tasks you need to do manually&lt;/a&gt;&lt;/li&gt;
          &lt;/ul&gt;
        &lt;/li&gt;
      &lt;/ul&gt;
    &lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;#6-prepare-documents&#34;&gt;6. Prepare documents&lt;/a&gt;
      &lt;ul&gt;
        &lt;li&gt;&lt;a href=&#34;#update-and-verify-javadoc&#34;&gt;Update and Verify Javadoc&lt;/a&gt;&lt;/li&gt;
        &lt;li&gt;&lt;a href=&#34;#build-the-pydoc-api-reference&#34;&gt;Build the Pydoc API reference&lt;/a&gt;&lt;/li&gt;
        &lt;li&gt;&lt;a href=&#34;#propose-pull-requests-for-website-updates&#34;&gt;Propose pull requests for website updates&lt;/a&gt;&lt;/li&gt;
        &lt;li&gt;&lt;a href=&#34;#blog-post&#34;&gt;Blog post&lt;/a&gt;
          &lt;ul&gt;
            &lt;li&gt;&lt;a href=&#34;#checklist-to-proceed-to-the-next-step-1&#34;&gt;Checklist to proceed to the next step&lt;/a&gt;&lt;/li&gt;
          &lt;/ul&gt;
        &lt;/li&gt;
      &lt;/ul&gt;
    &lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;#7-vote-and-validate-release-candidate&#34;&gt;7. Vote and validate release candidate&lt;/a&gt;
      &lt;ul&gt;
        &lt;li&gt;&lt;a href=&#34;#run-validation-tests&#34;&gt;Run validation tests&lt;/a&gt;
          &lt;ul&gt;
            &lt;li&gt;&lt;a href=&#34;#run-validations-using-run_rc_validationsh&#34;&gt;Run validations using run_rc_validation.sh&lt;/a&gt;&lt;/li&gt;
            &lt;li&gt;&lt;a href=&#34;#run-validations-manually&#34;&gt;Run validations manually&lt;/a&gt;&lt;/li&gt;
          &lt;/ul&gt;
        &lt;/li&gt;
        &lt;li&gt;&lt;a href=&#34;#fix-any-issues&#34;&gt;Fix any issues&lt;/a&gt;&lt;/li&gt;
        &lt;li&gt;&lt;a href=&#34;#checklist-to-proceed-to-the-next-step-2&#34;&gt;Checklist to proceed to the next step&lt;/a&gt;&lt;/li&gt;
      &lt;/ul&gt;
    &lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;#8-finalize-the-release&#34;&gt;8. Finalize the release&lt;/a&gt;
      &lt;ul&gt;
        &lt;li&gt;&lt;a href=&#34;#deploy-artifacts-to-maven-central-repository&#34;&gt;Deploy artifacts to Maven Central Repository&lt;/a&gt;&lt;/li&gt;
        &lt;li&gt;&lt;a href=&#34;#deploy-python-artifacts-to-pypi&#34;&gt;Deploy Python artifacts to PyPI&lt;/a&gt;&lt;/li&gt;
        &lt;li&gt;&lt;a href=&#34;#deploy-source-release-to-distapacheorg&#34;&gt;Deploy source release to dist.apache.org&lt;/a&gt;&lt;/li&gt;
        &lt;li&gt;&lt;a href=&#34;#deploy-sdk-docker-images-to-dockerhub&#34;&gt;Deploy SDK docker images to DockerHub&lt;/a&gt;&lt;/li&gt;
        &lt;li&gt;&lt;a href=&#34;#git-tag&#34;&gt;Git tag&lt;/a&gt;&lt;/li&gt;
        &lt;li&gt;&lt;a href=&#34;#merge-website-pull-request&#34;&gt;Merge website pull request&lt;/a&gt;&lt;/li&gt;
        &lt;li&gt;&lt;a href=&#34;#mark-the-version-as-released-in-jira&#34;&gt;Mark the version as released in JIRA&lt;/a&gt;&lt;/li&gt;
        &lt;li&gt;&lt;a href=&#34;#recordkeeping-with-asf&#34;&gt;Recordkeeping with ASF&lt;/a&gt;&lt;/li&gt;
        &lt;li&gt;&lt;a href=&#34;#checklist-to-proceed-to-the-next-step-3&#34;&gt;Checklist to proceed to the next step&lt;/a&gt;&lt;/li&gt;
      &lt;/ul&gt;
    &lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;#9-promote-the-release&#34;&gt;9. Promote the release&lt;/a&gt;
      &lt;ul&gt;
        &lt;li&gt;&lt;a href=&#34;#apache-mailing-lists&#34;&gt;Apache mailing lists&lt;/a&gt;&lt;/li&gt;
        &lt;li&gt;&lt;a href=&#34;#social-media&#34;&gt;Social media&lt;/a&gt;&lt;/li&gt;
        &lt;li&gt;&lt;a href=&#34;#checklist-to-declare-the-process-completed&#34;&gt;Checklist to declare the process completed&lt;/a&gt;&lt;/li&gt;
      &lt;/ul&gt;
    &lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;#improve-the-process&#34;&gt;Improve the process&lt;/a&gt;&lt;/li&gt;
  &lt;/ul&gt;
&lt;/nav&gt;

&lt;h2 id=&#34;introduction&#34;&gt;Introduction&lt;/h2&gt;
&lt;p&gt;The Apache Beam project periodically declares and publishes releases. A release is one or more packages of the project artifact(s) that are approved for general public distribution and use. They may come with various degrees of caveat regarding their perceived quality and potential for change, such as “alpha”, “beta”, “incubating”, “stable”, etc.&lt;/p&gt;
&lt;p&gt;The Beam community treats releases with great importance. They are a public face of the project and most users interact with the project only through the releases. Releases are signed off by the entire Beam community in a public vote.&lt;/p&gt;
&lt;p&gt;Each release is executed by a &lt;em&gt;Release Manager&lt;/em&gt;, who is selected among the Beam committers. This document describes the process that the Release Manager follows to perform a release. Any changes to this process should be discussed and adopted on the &lt;a href=&#34;/get-started/support/&#34;&gt;dev@ mailing list&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Please remember that publishing software has legal consequences. This guide complements the foundation-wide &lt;a href=&#34;http://www.apache.org/dev/release.html&#34;&gt;Product Release Policy&lt;/a&gt; and &lt;a href=&#34;http://www.apache.org/dev/release-distribution&#34;&gt;Release Distribution Policy&lt;/a&gt;.&lt;/p&gt;
&lt;h3 id=&#34;overview&#34;&gt;Overview&lt;/h3&gt;
&lt;img src=&#34;/images/release-guide-1.png&#34; alt=&#34;Alt text&#34; width=&#34;100%&#34;&gt;
&lt;p&gt;The release process consists of several steps:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Decide to release&lt;/li&gt;
&lt;li&gt;Prepare for the release&lt;/li&gt;
&lt;li&gt;Build a release candidate&lt;/li&gt;
&lt;li&gt;Vote on the release candidate&lt;/li&gt;
&lt;li&gt;During vote process, run validation tests&lt;/li&gt;
&lt;li&gt;If necessary, fix any issues and go back to step 3.&lt;/li&gt;
&lt;li&gt;Finalize the release&lt;/li&gt;
&lt;li&gt;Promote the release&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;decide-to-release&#34;&gt;Decide to release&lt;/h3&gt;
&lt;p&gt;Deciding to release and selecting a Release Manager is the first step of the release process. This is a consensus-based decision of the entire community.&lt;/p&gt;
&lt;p&gt;Anybody can propose a release on the dev@ mailing list, giving a solid argument and nominating a committer as the Release Manager (including themselves). There’s no formal process, no vote requirements, and no timing requirements. Any objections should be resolved by consensus before starting the release.&lt;/p&gt;
&lt;p&gt;In general, the community prefers to have a rotating set of 3-5 Release Managers. Keeping a small core set of managers allows enough people to build expertise in this area and improve processes over time, without Release Managers needing to re-learn the processes for each release. That said, if you are a committer interested in serving the community in this way, please reach out to the community on the dev@ mailing list.&lt;/p&gt;
&lt;h3 id=&#34;checklist-to-proceed-to-the-next-step&#34;&gt;Checklist to proceed to the next step&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;Community agrees to release&lt;/li&gt;
&lt;li&gt;Community selects a Release Manager&lt;/li&gt;
&lt;/ol&gt;
&lt;hr&gt;
&lt;h2 id=&#34;1-prepare-for-the-release&#34;&gt;1. Prepare for the release&lt;/h2&gt;
&lt;p&gt;Before your first release, you should perform one-time configuration steps. This will set up your security keys for signing the release and access to various release repositories.&lt;/p&gt;
&lt;p&gt;To prepare for each release, you should audit the project status in the JIRA issue tracker, and do necessary bookkeeping. Finally, you should create a release branch from which individual release candidates will be built.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;NOTE&lt;/strong&gt;: If you are using &lt;a href=&#34;https://help.github.com/articles/securing-your-account-with-two-factor-authentication-2fa/&#34;&gt;GitHub two-factor authentication&lt;/a&gt; and haven&amp;rsquo;t configure HTTPS access,
please follow &lt;a href=&#34;https://help.github.com/articles/creating-a-personal-access-token-for-the-command-line/&#34;&gt;the guide&lt;/a&gt; to configure command line access.&lt;/p&gt;
&lt;h3 id=&#34;accounts&#34;&gt;Accounts&lt;/h3&gt;
&lt;p&gt;Please have these credentials ready at hand, you will likely need to enter them multiple times:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;GPG pass phrase (see the next section);&lt;/li&gt;
&lt;li&gt;Apache ID and Password;&lt;/li&gt;
&lt;li&gt;GitHub ID and Password.&lt;/li&gt;
&lt;li&gt;DockerHub ID and Password. (You should be a member of maintainer team; email at dev@ if you are not.)&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;one-time-setup-instructions&#34;&gt;One-time setup instructions&lt;/h3&gt;
&lt;h4 id=&#34;gpg-key&#34;&gt;GPG Key&lt;/h4&gt;
&lt;p&gt;You need to have a GPG key to sign the release artifacts. Please be aware of the ASF-wide &lt;a href=&#34;https://www.apache.org/dev/release-signing.html&#34;&gt;release signing guidelines&lt;/a&gt;. If you don’t have a GPG key associated with your Apache account, please create one according to the guidelines.&lt;/p&gt;
&lt;p&gt;There are 2 ways to configure your GPG key for release, either using release automation script(which is recommended),
or running all commands manually.&lt;/p&gt;
&lt;h5 id=&#34;use-preparation_before_releasesh-to-setup-gpg&#34;&gt;Use preparation_before_release.sh to setup GPG&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Script: &lt;a href=&#34;https://github.com/apache/beam/blob/master/release/src/main/scripts/preparation_before_release.sh&#34;&gt;preparation_before_release.sh&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Usage&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;./beam/release/src/main/scripts/preparation_before_release.sh
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Tasks included&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Help you create a new GPG key if you want.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Configure &lt;code&gt;git user.signingkey&lt;/code&gt; with chosen pubkey.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Add chosen pubkey into &lt;a href=&#34;https://dist.apache.org/repos/dist/dev/beam/KEYS&#34;&gt;dev KEYS&lt;/a&gt;  and &lt;a href=&#34;https://dist.apache.org/repos/dist/release/beam/KEYS&#34;&gt;release KEYS&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;NOTES&lt;/strong&gt;: Only PMC can write into &lt;a href=&#34;https://dist.apache.org/repos/dist/release/beam/&#34;&gt;release repo&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Start GPG agents.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;NOTE&lt;/strong&gt;: When generating the key, please make sure you choose the key type as &lt;strong&gt;RSA and RSA (default)&lt;/strong&gt; and key size as &lt;strong&gt;4096 bit&lt;/strong&gt;.&lt;/p&gt;
&lt;h5 id=&#34;run-all-commands-manually&#34;&gt;Run all commands manually&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Get more entropy for creating a GPG key&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;sudo apt-get install rng-tools
sudo rngd -r /dev/urandom
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Create a GPG key&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;gpg --full-generate-key
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Determine your Apache GPG Key and Key ID, as follows:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;gpg --list-sigs --keyid-format LONG
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This will list your GPG keys. One of these should reflect your Apache account, for example:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;--------------------------------------------------
pub   2048R/845E6689 2016-02-23
uid                  Nomen Nescio &amp;lt;anonymous@apache.org&amp;gt;
sub   2048R/BA4D50BE 2016-02-23
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Here, the key ID is the 8-digit hex string in the &lt;code&gt;pub&lt;/code&gt; line: &lt;code&gt;845E6689&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Now, add your Apache GPG key to the Beam’s &lt;code&gt;KEYS&lt;/code&gt; file both in &lt;a href=&#34;https://dist.apache.org/repos/dist/dev/beam/KEYS&#34;&gt;&lt;code&gt;dev&lt;/code&gt;&lt;/a&gt; and &lt;a href=&#34;https://dist.apache.org/repos/dist/release/beam/KEYS&#34;&gt;&lt;code&gt;release&lt;/code&gt;&lt;/a&gt; repositories at &lt;code&gt;dist.apache.org&lt;/code&gt;. Follow the instructions listed at the top of these files. (Note: Only PMC members have write access to the release repository. If you end up getting 403 errors ask on the mailing list for assistance.)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Configure &lt;code&gt;git&lt;/code&gt; to use this key when signing code by giving it your key ID, as follows:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;git config --global user.signingkey 845E6689
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;You may drop the &lt;code&gt;--global&lt;/code&gt; option if you’d prefer to use this key for the current repository only.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Start GPG agent in order to unlock your GPG key&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;eval $(gpg-agent --daemon --no-grab --write-env-file $HOME/.gpg-agent-info)
export GPG_TTY=$(tty)
export GPG_AGENT_INFO
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;access-to-apache-nexus-repository&#34;&gt;Access to Apache Nexus repository&lt;/h4&gt;
&lt;p&gt;Configure access to the &lt;a href=&#34;https://repository.apache.org/&#34;&gt;Apache Nexus repository&lt;/a&gt;, which enables final deployment of releases to the Maven Central Repository.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;You log in with your Apache account.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Confirm you have appropriate access by finding &lt;code&gt;org.apache.beam&lt;/code&gt; under &lt;code&gt;Staging Profiles&lt;/code&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Navigate to your &lt;code&gt;Profile&lt;/code&gt; (top right dropdown menu of the page).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Choose &lt;code&gt;User Token&lt;/code&gt; from the dropdown, then click &lt;code&gt;Access User Token&lt;/code&gt;. Copy a snippet of the Maven XML configuration block.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Insert this snippet twice into your global Maven &lt;code&gt;settings.xml&lt;/code&gt; file, typically &lt;code&gt;${HOME}/.m2/settings.xml&lt;/code&gt;. The end result should look like this, where &lt;code&gt;TOKEN_NAME&lt;/code&gt; and &lt;code&gt;TOKEN_PASSWORD&lt;/code&gt; are your secret tokens:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt; &amp;lt;!-- make sure you have the root `settings node: --&amp;gt;
 &amp;lt;settings&amp;gt;
   &amp;lt;servers&amp;gt;
     &amp;lt;server&amp;gt;
       &amp;lt;id&amp;gt;apache.releases.https&amp;lt;/id&amp;gt;
       &amp;lt;username&amp;gt;TOKEN_NAME&amp;lt;/username&amp;gt;
       &amp;lt;password&amp;gt;TOKEN_PASSWORD&amp;lt;/password&amp;gt;
     &amp;lt;/server&amp;gt;
     &amp;lt;server&amp;gt;
       &amp;lt;id&amp;gt;apache.snapshots.https&amp;lt;/id&amp;gt;
       &amp;lt;username&amp;gt;TOKEN_NAME&amp;lt;/username&amp;gt;
       &amp;lt;password&amp;gt;TOKEN_PASSWORD&amp;lt;/password&amp;gt;
     &amp;lt;/server&amp;gt;
   &amp;lt;/servers&amp;gt;
 &amp;lt;/settings&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id=&#34;submit-your-gpg-public-key-into-mit-pgp-public-key-server&#34;&gt;Submit your GPG public key into MIT PGP Public Key Server&lt;/h4&gt;
&lt;p&gt;In order to make yourself have right permission to stage java artifacts in Apache Nexus staging repository,
please submit your GPG public key into &lt;a href=&#34;http://pgp.mit.edu:11371/&#34;&gt;MIT PGP Public Key Server&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;If MIT doesn&amp;rsquo;t work for you (it probably won&amp;rsquo;t, it&amp;rsquo;s slow, returns 502 a lot, Nexus might error out not being able to find the keys),
use a keyserver at &lt;code&gt;ubuntu.com&lt;/code&gt; instead: &lt;a href=&#34;https://keyserver.ubuntu.com/&#34;&gt;https://keyserver.ubuntu.com/&lt;/a&gt;.&lt;/p&gt;
&lt;h4 id=&#34;website-development-setup&#34;&gt;Website development setup&lt;/h4&gt;
&lt;p&gt;Updating the Beam website requires submitting PRs to both the main &lt;code&gt;apache/beam&lt;/code&gt;
repo and the &lt;code&gt;apache/beam-site&lt;/code&gt; repo. The first contains reference manuals
generated from SDK code, while the second updates the current release version
number.&lt;/p&gt;
&lt;p&gt;You should already have setup a local clone of &lt;code&gt;apache/beam&lt;/code&gt;. Setting up a clone
of &lt;code&gt;apache/beam-site&lt;/code&gt; is similar:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ git clone -b release-docs https://github.com/apache/beam-site.git
$ cd beam-site
$ git remote add &amp;lt;GitHub_user&amp;gt; git@github.com:&amp;lt;GitHub_user&amp;gt;/beam-site.git
$ git fetch --all
$ git checkout -b &amp;lt;my-branch&amp;gt; origin/release-docs
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Further instructions on website development on &lt;code&gt;apache/beam&lt;/code&gt; is
&lt;a href=&#34;https://github.com/apache/beam/blob/master/website&#34;&gt;here&lt;/a&gt;. Background
information about how the website is updated can be found in &lt;a href=&#34;https://s.apache.org/beam-site-automation&#34;&gt;Beam-Site
Automation Reliability&lt;/a&gt;.&lt;/p&gt;
&lt;h4 id=&#34;register-to-pypi&#34;&gt;Register to PyPI&lt;/h4&gt;
&lt;p&gt;Release manager needs to have an account with PyPI. If you need one, &lt;a href=&#34;https://pypi.python.org/account/register/&#34;&gt;register at PyPI&lt;/a&gt;. You also need to be a maintainer (or an owner) of the &lt;a href=&#34;https://pypi.python.org/pypi/apache-beam&#34;&gt;apache-beam&lt;/a&gt; package in order to push a new release. Ask on the mailing list for assistance.&lt;/p&gt;
&lt;h4 id=&#34;login-to-dockerhub&#34;&gt;Login to DockerHub&lt;/h4&gt;
&lt;p&gt;Run following command manually. It will ask you to input your DockerHub ID and password if
authorization info cannot be found from ~/.docker/config.json file.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;docker login docker.io
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;After successful login, authorization info will be stored at ~/.docker/config.json file. For example,&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;quot;https://index.docker.io/v1/&amp;quot;: {
   &amp;quot;auth&amp;quot;: &amp;quot;xxxxxx&amp;quot;
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Release managers should have push permission; please ask for help at dev@.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;From: Release Manager
To: dev@beam.apache.org
Subject: DockerHub Push Permission

Hi DockerHub Admins

I need push permission to proceed with release, can you please add me to maintainer team?
My docker hub ID is: xxx

Thanks,
Release Manager
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;create-a-new-version-in-jira&#34;&gt;Create a new version in JIRA&lt;/h3&gt;
&lt;p&gt;When contributors resolve an issue in JIRA, they are tagging it with a release that will contain their changes. With the release currently underway, new issues should be resolved against a subsequent future release. Therefore, you should create a release item for this subsequent release, as follows:&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Attention&lt;/strong&gt;: Only PMC has permission to perform this. If you are not a PMC, please ask for help in dev@ mailing list.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;In JIRA, navigate to &lt;a href=&#34;https://issues.apache.org/jira/plugins/servlet/project-config/BEAM/versions&#34;&gt;&lt;code&gt;Beam &amp;gt; Administration &amp;gt; Versions&lt;/code&gt;&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Add a new release. Choose the next minor version number after the version currently underway, select the release cut date (today’s date) as the &lt;code&gt;Start Date&lt;/code&gt;, and choose &lt;code&gt;Add&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;At the end of the release, go to the same page and mark the recently released version as released. Use the &lt;code&gt;...&lt;/code&gt; menu and choose &lt;code&gt;Release&lt;/code&gt;.&lt;/li&gt;
&lt;/ol&gt;
&lt;hr&gt;
&lt;h2 id=&#34;2-create-a-release-branch-in-apachebeam-repository&#34;&gt;2. Create a release branch in apache/beam repository&lt;/h2&gt;
&lt;p&gt;Attention: Only committer has permission to create release branch in apache/beam.&lt;/p&gt;
&lt;p&gt;Release candidates are built from a release branch. As a final step in preparation for the release, you should create the release branch, push it to the Apache code repository, and update version information on the original branch.&lt;/p&gt;
&lt;p&gt;There are 2 ways to cut a release branch: either running automation script(recommended), or running all commands manually.&lt;/p&gt;
&lt;h4 id=&#34;use-cut_release_branchsh-to-cut-a-release-branch&#34;&gt;Use cut_release_branch.sh to cut a release branch&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Script: &lt;a href=&#34;https://github.com/apache/beam/blob/master/release/src/main/scripts/cut_release_branch.sh&#34;&gt;cut_release_branch.sh&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Usage&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# Cut a release branch
./beam/release/src/main/scripts/cut_release_branch.sh \
--release=${RELEASE_VERSION} \
--next_release=${NEXT_VERSION}
  
# Show help page
./beam/release/src/main/scripts/cut_release_branch.sh -h
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The script will:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Create release-${RELEASE_VERSION} branch locally.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Change and commit dev versoin number in master branch:&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/apache/beam/blob/e8abafe360e126818fe80ae0f6075e71f0fc227d/buildSrc/src/main/groovy/org/apache/beam/gradle/BeamModulePlugin.groovy#L209&#34;&gt;BeamModulePlugin.groovy&lt;/a&gt;,
&lt;a href=&#34;https://github.com/apache/beam/blob/e8abafe360e126818fe80ae0f6075e71f0fc227d/gradle.properties#L25&#34;&gt;gradle.properties&lt;/a&gt;,
&lt;a href=&#34;https://github.com/apache/beam/blob/e8abafe360e126818fe80ae0f6075e71f0fc227d/sdks/python/apache_beam/version.py#L21&#34;&gt;version.py&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Change and commit version number in release branch:&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/apache/beam/blob/release-2.6.0/sdks/python/apache_beam/version.py#L21&#34;&gt;version.py&lt;/a&gt;,
&lt;a href=&#34;https://github.com/apache/beam/blob/release-2.6.0/runners/google-cloud-dataflow-java/build.gradle#L39&#34;&gt;build.gradle&lt;/a&gt;,
&lt;a href=&#34;https://github.com/apache/beam/blob/release-2.16.0/gradle.properties#L27&#34;&gt;gradle.properties&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;alternative-run-all-steps-manually&#34;&gt;(Alternative) Run all steps manually&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Checkout working branch&lt;/p&gt;
&lt;p&gt;Check out the version of the codebase from which you start the release. For a new minor or major release, this may be &lt;code&gt;HEAD&lt;/code&gt; of the &lt;code&gt;master&lt;/code&gt; branch. To build a hotfix/incremental release, instead of the &lt;code&gt;master&lt;/code&gt; branch, use the release tag of the release being patched. (Please make sure your cloned repository is up-to-date before starting.)&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;git checkout &amp;lt;master branch OR release tag&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;NOTE&lt;/strong&gt;: If you are doing an incremental/hotfix release (e.g. 2.5.1), please check out the previous release tag, rather than the master branch.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Set up environment variables&lt;/p&gt;
&lt;p&gt;Set up a few environment variables to simplify Maven commands that follow. (We use &lt;code&gt;bash&lt;/code&gt; Unix syntax in this guide.)&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;RELEASE=2.5.0
NEXT_VERSION_IN_BASE_BRANCH=2.6.0
BRANCH=release-${RELEASE}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Version represents the release currently underway, while next version specifies the anticipated next version to be released from that branch. Normally, 1.2.0 is followed by 1.3.0, while 1.2.3 is followed by 1.2.4.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;NOTE&lt;/strong&gt;: Only if you are doing an incremental/hotfix release (e.g. 2.5.1), please check out the previous release tag, before running the following instructions:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;BASE_RELEASE=2.5.0
RELEASE=2.5.1
NEXT_VERSION_IN_BASE_BRANCH=2.6.0
git checkout tags/${BASE_RELEASE}
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Create release branch locally&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;git branch ${BRANCH}
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Update version files in the master branch.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# Now change the version in existing gradle files, and Python files
sed -i -e &amp;quot;s/&#39;${RELEASE}&#39;/&#39;${NEXT_VERSION_IN_BASE_BRANCH}&#39;/g&amp;quot; build_rules.gradle
sed -i -e &amp;quot;s/${RELEASE}/${NEXT_VERSION_IN_BASE_BRANCH}/g&amp;quot; gradle.properties
sed -i -e &amp;quot;s/${RELEASE}/${NEXT_VERSION_IN_BASE_BRANCH}/g&amp;quot; sdks/python/apache_beam/version.py

# Save changes in master branch
git add gradle.properties build_rules.gradle sdks/python/apache_beam/version.py
git commit -m &amp;quot;Moving to ${NEXT_VERSION_IN_BASE_BRANCH}-SNAPSHOT on master branch.&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Check out the release branch.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;git checkout ${BRANCH}
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Update version files in release branch&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;DEV=${RELEASE}.dev
sed -i -e &amp;quot;s/${DEV}/${RELEASE}/g&amp;quot; sdks/python/apache_beam/version.py
sed -i -e &amp;quot;s/${DEV}/${RELEASE}/g&amp;quot; gradle.properties
sed -i -e &amp;quot;s/&#39;beam-master-.*&#39;/&#39;beam-${RELEASE}&#39;/g&amp;quot; runners/google-cloud-dataflow-java/build.gradle
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;start-a-snapshot-build&#34;&gt;Start a snapshot build&lt;/h3&gt;
&lt;p&gt;Start a build of &lt;a href=&#34;https://builds.apache.org/view/A-D/view/Beam/job/beam_Release_NightlySnapshot/&#34;&gt;the nightly snapshot&lt;/a&gt; against master branch.
Some processes, including our archetype tests, rely on having a live SNAPSHOT of the current version
from the &lt;code&gt;master&lt;/code&gt; branch. Once the release branch is cut, these SNAPSHOT versions are no longer found,
so builds will be broken until a new snapshot is available.&lt;/p&gt;
&lt;p&gt;There are 2 ways to trigger a nightly build, either using automation script(recommended), or perform all operations manually.&lt;/p&gt;
&lt;h4 id=&#34;run-start_snapshot_buildsh-to-trigger-build&#34;&gt;Run start_snapshot_build.sh to trigger build&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Script: &lt;a href=&#34;https://github.com/apache/beam/blob/master/release/src/main/scripts/start_snapshot_build.sh&#34;&gt;start_snapshot_build.sh&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Usage&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;./beam/release/src/main/scripts/start_snapshot_build.sh
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The script will:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Install &lt;a href=&#34;https://github.com/github/hub&#34;&gt;hub&lt;/a&gt; with your agreement.&lt;/li&gt;
&lt;li&gt;Touch an empty txt file and commit changes into &lt;code&gt;${your remote beam repo}/snapshot_build&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Use hub to create a PR against apache:master, which triggers a Jenkins job to build snapshot.&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Tasks you need to do manually to &lt;strong&gt;verify the SNAPSHOT build&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Check whether the Jenkins job gets triggered. If not, please comment &lt;code&gt;Run Gradle Publish&lt;/code&gt; into the generated PR.&lt;/li&gt;
&lt;li&gt;After verifying build succeeded, you need to close PR manually.&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;alternative-do-all-operations-manually&#34;&gt;(Alternative) Do all operations manually&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;Find one PR against apache:master in beam.&lt;/li&gt;
&lt;li&gt;Comment  &lt;code&gt;Run Gradle Publish&lt;/code&gt; in this pull request to trigger build.&lt;/li&gt;
&lt;li&gt;Verify that build succeeds.&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h2 id=&#34;3-verify-release-branch&#34;&gt;3. Verify release branch&lt;/h2&gt;
&lt;p&gt;After the release branch is cut you need to make sure it builds and has no significant issues that would block the creation of the release candidate.
There are 2 ways to perform this verification, either running automation script(recommended), or running all commands manually.&lt;/p&gt;
&lt;p&gt;! Dataflow tests will fail if Dataflow worker container is not created and published by this time. (Should be done by Google)&lt;/p&gt;
&lt;h4 id=&#34;run-automation-script-verify_release_buildsh&#34;&gt;Run automation script (verify_release_build.sh)&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Script: &lt;a href=&#34;https://github.com/apache/beam/blob/master/release/src/main/scripts/verify_release_build.sh&#34;&gt;verify_release_build.sh&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Usage&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Create a personal access token from your Github account. See instruction &lt;a href=&#34;https://help.github.com/en/articles/creating-a-personal-access-token-for-the-command-line&#34;&gt;here&lt;/a&gt;.
It&amp;rsquo;ll be used by the script for accessing Github API.
You don&amp;rsquo;t have to add any permissions to this token.&lt;/li&gt;
&lt;li&gt;Update required configurations listed in &lt;code&gt;RELEASE_BUILD_CONFIGS&lt;/code&gt; in &lt;a href=&#34;https://github.com/apache/beam/blob/master/release/src/main/scripts/script.config&#34;&gt;script.config&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Then run
&lt;pre&gt;&lt;code&gt;cd beam/release/src/main/scripts &amp;amp;&amp;amp; ./verify_release_build.sh
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;Trigger &lt;code&gt;beam_Release_Gradle_Build&lt;/code&gt; and all PostCommit Jenkins jobs from PR (which is created by previous step).
To do so, only add one trigger phrase per comment. See &lt;code&gt;JOB_TRIGGER_PHRASES&lt;/code&gt; in &lt;a href=&#34;https://github.com/apache/beam/blob/master/release/src/main/scripts/verify_release_build.sh#L43&#34;&gt;verify_release_build.sh&lt;/a&gt;
for full list of phrases.&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Tasks included in the script&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Installs &lt;code&gt;hub&lt;/code&gt; with your agreement and setup local git repo;&lt;/li&gt;
&lt;li&gt;Create a test PR against release branch;&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Jenkins job &lt;code&gt;beam_Release_Gradle_Build&lt;/code&gt; basically run &lt;code&gt;./gradlew build -PisRelease&lt;/code&gt;.
This only verifies that everything builds with unit tests passing.&lt;/p&gt;
&lt;p&gt;You can use &lt;a href=&#34;https://github.com/apache/beam/blob/master/release/src/main/scripts/mass_comment.py&#34;&gt;mass_comment.py&lt;/a&gt; to mass-comment on PR.&lt;/p&gt;
&lt;h4 id=&#34;verify-the-build-succeeds&#34;&gt;Verify the build succeeds&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;Tasks you need to do manually to &lt;strong&gt;verify the build succeed&lt;/strong&gt;:
&lt;ol&gt;
&lt;li&gt;Check the build result.&lt;/li&gt;
&lt;li&gt;If build failed, scan log will contain all failures.&lt;/li&gt;
&lt;li&gt;You should stabilize the release branch until release build succeeded.&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;There are some projects that don&amp;rsquo;t produce the artifacts, e.g. &lt;code&gt;beam-test-tools&lt;/code&gt;, you may be able to
ignore failures there.&lt;/p&gt;
&lt;p&gt;To triage the failures and narrow things down you may want to look at &lt;code&gt;settings.gradle&lt;/code&gt; and run the build only for the
projects you&amp;rsquo;re interested at the moment, e.g. &lt;code&gt;./gradlew :runners:java-fn-execution&lt;/code&gt;.&lt;/p&gt;
&lt;h4 id=&#34;alternative-run-release-build-manually-locally&#34;&gt;(Alternative) Run release build manually (locally)&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Pre-installation for python build&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Install pip&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;curl https://bootstrap.pypa.io/get-pip.py -o get-pip.py
python get-pip.py
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Install virtualenv&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;pip install --upgrade virtualenv
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Cython&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;sudo pip install cython
sudo apt-get install gcc
sudo apt-get install python-dev
sudo apt-get install python3-dev
sudo apt-get install python3.5-dev
sudo apt-get install python3.6-dev
sudo apt-get install python3.7-dev
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Run gradle release build&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Clean current workspace&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;git clean -fdx 
./gradlew clean
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Unlock the secret key&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;gpg --output ~/doc.sig --sign ~/.bashrc
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Run build command&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;./gradlew build -PisRelease --no-parallel --scan --stacktrace --continue
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;To speed things up locally you might want to omit &lt;code&gt;--no-parallel&lt;/code&gt;. You can also omit &lt;code&gt;--continue&lt;/code&gt;
if you want build fails after the first error instead of continuing, it may be easier and faster
to find environment issues this way without having to wait until the full build completes.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;create-release-blocking-issues-in-jira&#34;&gt;Create release-blocking issues in JIRA&lt;/h4&gt;
&lt;p&gt;The verify_release_build.sh script may include failing or flaky tests. For each of the failing tests create a JIRA with the following properties:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Issue Type: Bug&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Summary: Name of failing gradle task and name of failing test (where applicable) in form of :MyGradleProject:SomeGradleTask NameOfFailedTest: Short description of failure&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Priority: Major&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Component: &amp;ldquo;test-failures&amp;rdquo;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Fix Version: Release number of verified release branch&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Description: Description of failure&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h2 id=&#34;4-triage-release-blocking-issues-in-jira&#34;&gt;4. Triage release-blocking issues in JIRA&lt;/h2&gt;
&lt;p&gt;There could be outstanding release-blocking issues, which should be triaged before proceeding to build a release candidate. We track them by assigning a specific &lt;code&gt;Fix version&lt;/code&gt; field even before the issue resolved.&lt;/p&gt;
&lt;p&gt;The list of release-blocking issues is available at the &lt;a href=&#34;https://issues.apache.org/jira/browse/BEAM/?selectedTab=com.atlassian.jira.jira-projects-plugin:versions-panel&#34;&gt;version status page&lt;/a&gt;. Triage each unresolved issue with one of the following resolutions:&lt;/p&gt;
&lt;p&gt;The release manager should triage what does and does not block a release. An issue should not block the release if the problem exists in the current released version or is a bug in new functionality that does not exist in the current released version. It should be a blocker if the bug is a regression between the currently released version and the release in progress and has no easy workaround.&lt;/p&gt;
&lt;p&gt;For all JIRA issues:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;If the issue has been resolved and JIRA was not updated, resolve it accordingly.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;For JIRA issues with type &amp;ldquo;Bug&amp;rdquo; or labeled &amp;ldquo;flaky&amp;rdquo;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;If the issue is a known continuously failing test, it is not acceptable to defer this until the next release. Please work with the Beam community to resolve the issue.&lt;/li&gt;
&lt;li&gt;If the issue is a known flaky test, make an attempt to delegate a fix. However, if the issue may take too long to fix (to the discretion of the release manager):
&lt;ul&gt;
&lt;li&gt;Delegate manual testing of the flaky issue to ensure no release blocking issues.&lt;/li&gt;
&lt;li&gt;Update the &lt;code&gt;Fix Version&lt;/code&gt; field to the version of the next release. Please consider discussing this with stakeholders and the dev@ mailing list, as appropriate.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;For all other JIRA issues:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;If the issue has not been resolved and it is acceptable to defer this until the next release, update the &lt;code&gt;Fix Version&lt;/code&gt; field to the new version you just created. Please consider discussing this with stakeholders and the dev@ mailing list, as appropriate.&lt;/li&gt;
&lt;li&gt;If the issue has not been resolved and it is not acceptable to release until it is fixed, the release cannot proceed. Instead, work with the Beam community to resolve the issue.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;If there is a bug found in the RC creation process/tools, those issues should be considered high priority and fixed in 7 days.&lt;/p&gt;
&lt;h3 id=&#34;review-release-notes-in-jira&#34;&gt;Review Release Notes in JIRA&lt;/h3&gt;
&lt;p&gt;JIRA automatically generates Release Notes based on the &lt;code&gt;Fix Version&lt;/code&gt; field applied to issues. Release Notes are intended for Beam users (not Beam committers/contributors). You should ensure that Release Notes are informative and useful.&lt;/p&gt;
&lt;p&gt;Open the release notes from the &lt;a href=&#34;https://issues.apache.org/jira/browse/BEAM/?selectedTab=com.atlassian.jira.jira-projects-plugin:versions-panel&#34;&gt;version status page&lt;/a&gt; by choosing the release underway and clicking Release Notes.&lt;/p&gt;
&lt;p&gt;You should verify that the issues listed automatically by JIRA are appropriate to appear in the Release Notes. Specifically, issues should:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Be appropriately classified as &lt;code&gt;Bug&lt;/code&gt;, &lt;code&gt;New Feature&lt;/code&gt;, &lt;code&gt;Improvement&lt;/code&gt;, etc.&lt;/li&gt;
&lt;li&gt;Represent noteworthy user-facing changes, such as new functionality, backward-incompatible API changes, or performance improvements.&lt;/li&gt;
&lt;li&gt;Have occurred since the previous release; an issue that was introduced and fixed between releases should not appear in the Release Notes.&lt;/li&gt;
&lt;li&gt;Have an issue title that makes sense when read on its own.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Adjust any of the above properties to the improve clarity and presentation of the Release Notes.&lt;/p&gt;
&lt;h3 id=&#34;review-cherry-picks&#34;&gt;Review cherry-picks&lt;/h3&gt;
&lt;p&gt;Check if there are outstanding cherry-picks into the release branch, &lt;a href=&#34;https://github.com/apache/beam/pulls?utf8=%E2%9C%93&amp;amp;q=is%3Apr+base%3Arelease-2.14.0&#34;&gt;e.g. for &lt;code&gt;2.14.0&lt;/code&gt;&lt;/a&gt;.
Make sure they have blocker JIRAs attached and are OK to get into the release by checking with community if needed.&lt;/p&gt;
&lt;p&gt;As the Release Manager you are empowered to accept or reject cherry-picks to the release branch. You are encouraged to ask the following questions to be answered on each cherry-pick PR and you can choose to reject cherry-pick requests if these questions are not satisfactorily answered:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Is this a regression from a previous release? (If no, fix could go to a newer version.)&lt;/li&gt;
&lt;li&gt;Is this a new feature or related to a new feature? (If yes, fix could go to a new version.)&lt;/li&gt;
&lt;li&gt;Would this impact production workloads for users? (E.g. if this is a direct runner only fix it may not need to be a cherry pick.)&lt;/li&gt;
&lt;li&gt;What percentage of users would be impacted by this issue if it is not fixed? (E.g. If this is predicted to be a small number it may not need to be a cherry pick.)&lt;/li&gt;
&lt;li&gt;Would it be possible for the impacted users to skip this version? (If users could skip this version, fix could go to a newer version.)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;It is important to accept major/blocking fixes to isolated issues to make a higher quality release. However, beyond that each cherry pick will increase the time required for the release and add more last minute code to the release branch. Neither late releases nor not fully tested code will provide positive user value.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Tip&lt;/em&gt;: Another tool in your toolbox is the known issues section of the release blog. Consider adding known issues there for minor issues instead of accepting cherry picks to the release branch.&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;5-build-a-release-candidate&#34;&gt;5. Build a release candidate&lt;/h2&gt;
&lt;h3 id=&#34;checklist-before-proceeding&#34;&gt;Checklist before proceeding&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Release Manager’s GPG key is published to &lt;code&gt;dist.apache.org&lt;/code&gt;;&lt;/li&gt;
&lt;li&gt;Release Manager’s GPG key is configured in &lt;code&gt;git&lt;/code&gt; configuration;&lt;/li&gt;
&lt;li&gt;Release Manager has &lt;code&gt;org.apache.beam&lt;/code&gt; listed under &lt;code&gt;Staging Profiles&lt;/code&gt; in Nexus;&lt;/li&gt;
&lt;li&gt;Release Manager’s Nexus User Token is configured in &lt;code&gt;settings.xml&lt;/code&gt;;&lt;/li&gt;
&lt;li&gt;JIRA release item for the subsequent release has been created;&lt;/li&gt;
&lt;li&gt;All test failures from branch verification have associated JIRA issues;&lt;/li&gt;
&lt;li&gt;There are no release blocking JIRA issues;&lt;/li&gt;
&lt;li&gt;Release Notes in JIRA have been audited and adjusted;&lt;/li&gt;
&lt;li&gt;Combined javadoc has the appropriate contents;&lt;/li&gt;
&lt;li&gt;Release branch has been created;&lt;/li&gt;
&lt;li&gt;There are no open pull requests to release branch;&lt;/li&gt;
&lt;li&gt;Originating branch has the version information updated to the new version;&lt;/li&gt;
&lt;li&gt;Nightly snapshot is in progress (do revisit it continually);&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The core of the release process is the build-vote-fix cycle. Each cycle produces one release candidate. The Release Manager repeats this cycle until the community approves one release candidate, which is then finalized.&lt;/p&gt;
&lt;p&gt;For this step, we recommend you using automation script to create a RC, but you still can perform all steps manually if you want.&lt;/p&gt;
&lt;h3 id=&#34;run-build_release_candidatesh-to-create-a-release-candidate&#34;&gt;Run build_release_candidate.sh to create a release candidate&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Script: &lt;a href=&#34;https://github.com/apache/beam/blob/master/release/src/main/scripts/build_release_candidate.sh&#34;&gt;build_release_candidate.sh&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Usage&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;./beam/release/src/main/scripts/build_release_candidate.sh
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The script will:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Run gradle release to create rc tag and push source release into github repo.&lt;/li&gt;
&lt;li&gt;Run gradle publish to push java artifacts into Maven staging repo.&lt;/li&gt;
&lt;li&gt;Stage source release into dist.apache.org dev &lt;a href=&#34;https://dist.apache.org/repos/dist/dev/beam/&#34;&gt;repo&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Stage,sign and hash python binaries into dist.apache.ord dev repo python dir&lt;/li&gt;
&lt;li&gt;Stage SDK docker images to &lt;a href=&#34;https://hub.docker.com/search?q=apache%2Fbeam&amp;amp;type=image&#34;&gt;docker hub Apache organization&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Create a PR to update beam-site, changes includes:
&lt;ul&gt;
&lt;li&gt;Copy python doc into beam-site&lt;/li&gt;
&lt;li&gt;Copy java doc into beam-site&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;tasks-you-need-to-do-manually&#34;&gt;Tasks you need to do manually&lt;/h4&gt;
&lt;ol&gt;
&lt;li&gt;Verify the script worked.
&lt;ol&gt;
&lt;li&gt;Verify that the source and Python binaries are present in &lt;a href=&#34;https://dist.apache.org/repos/dist/dev/beam&#34;&gt;dist.apache.org&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Verify Docker images are published. How to find images:
&lt;ol&gt;
&lt;li&gt;Visit &lt;a href=&#34;https://hub.docker.com/search?q=apache%2Fbeam&amp;amp;type=image&#34;&gt;https://hub.docker.com/u/apache&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Visit each repository and navigate to &lt;em&gt;tags&lt;/em&gt; tab.&lt;/li&gt;
&lt;li&gt;Verify images are pushed with tags: ${RELEASE}_rc{RC_NUM}&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;Verify that third party licenses are included in Docker containers by logging in to the images.
&lt;ul&gt;
&lt;li&gt;For Python SDK images, there should be around 80 ~ 100 dependencies.
Please note that dependencies for the SDKs with different Python versions vary.
Need to verify all Python images by replacing &lt;code&gt;${ver}&lt;/code&gt; with each supported Python version &lt;code&gt;X.Y&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code&gt;docker run -it --entrypoint=/bin/bash apache/beam_python${ver}_sdk:${RELEASE}_rc{RC_NUM}
ls -al /opt/apache/beam/third_party_licenses/ | wc -l
&lt;/code&gt;&lt;/pre&gt;&lt;ul&gt;
&lt;li&gt;For Java SDK images, there should be around 1400 dependencies.&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code&gt;docker run -it --entrypoint=/bin/bash apache/beam_java_sdk:${RELEASE}_rc{RC_NUM}
ls -al /opt/apache/beam/third_party_licenses/ | wc -l
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;Publish staging artifacts
&lt;ol&gt;
&lt;li&gt;Log in to the &lt;a href=&#34;https://repository.apache.org/#stagingRepositories&#34;&gt;Apache Nexus&lt;/a&gt; website.&lt;/li&gt;
&lt;li&gt;Navigate to Build Promotion -&amp;gt; Staging Repositories (in the left sidebar).&lt;/li&gt;
&lt;li&gt;Select repository &lt;code&gt;orgapachebeam-NNNN&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Click the Close button.&lt;/li&gt;
&lt;li&gt;When prompted for a description, enter “Apache Beam, version X, release candidate Y”.&lt;/li&gt;
&lt;li&gt;Review all staged artifacts on &lt;a href=&#34;https://repository.apache.org/content/repositories/orgapachebeam-NNNN/&#34;&gt;https://repository.apache.org/content/repositories/orgapachebeam-NNNN/&lt;/a&gt;. They should contain all relevant parts for each module, including &lt;code&gt;pom.xml&lt;/code&gt;, jar, test jar, javadoc, etc. Artifact names should follow &lt;a href=&#34;https://search.maven.org/#search%7Cga%7C1%7Cg%3A%22org.apache.beam%22&#34;&gt;the existing format&lt;/a&gt; in which artifact name mirrors directory structure, e.g., &lt;code&gt;beam-sdks-java-io-kafka&lt;/code&gt;. Carefully review any new artifacts.&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;Build and stage python wheels.
&lt;ul&gt;
&lt;li&gt;There is a wrapper repo &lt;a href=&#34;https://github.com/apache/beam-wheels&#34;&gt;beam-wheels&lt;/a&gt; to help build python wheels.&lt;/li&gt;
&lt;li&gt;If you are interested in how it works, please refer to the &lt;a href=&#34;https://github.com/apache/beam-wheels#structure&#34;&gt;structure section&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Please follow the &lt;a href=&#34;https://github.com/apache/beam-wheels#user-guide&#34;&gt;user guide&lt;/a&gt; to build python wheels.&lt;/li&gt;
&lt;li&gt;Once all python wheels have been staged to GCS,
please run &lt;a href=&#34;https://github.com/apache/beam/blob/master/release/src/main/scripts/sign_hash_python_wheels.sh&#34;&gt;./sign_hash_python_wheels.sh&lt;/a&gt;, which copies the wheels along with signatures and hashes to &lt;a href=&#34;https://dist.apache.org/repos/dist/dev/beam/&#34;&gt;dist.apache.org&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Update Beam website (&lt;a href=&#34;https://github.com/apache/beam/pull/11727&#34;&gt;example&lt;/a&gt;)
&lt;ol&gt;
&lt;li&gt;Update release version in &lt;code&gt;website/www/site/config.toml&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Add new release in &lt;code&gt;website/www/site/content/en/get-started/downloads.md&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Update &lt;code&gt;website/www/site/static/.htaccess&lt;/code&gt; to redirect to the new version.&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;hr&gt;
&lt;h2 id=&#34;6-prepare-documents&#34;&gt;6. Prepare documents&lt;/h2&gt;
&lt;h3 id=&#34;update-and-verify-javadoc&#34;&gt;Update and Verify Javadoc&lt;/h3&gt;
&lt;p&gt;The build with &lt;code&gt;-PisRelease&lt;/code&gt; creates the combined Javadoc for the release in &lt;code&gt;sdks/java/javadoc&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;The file &lt;code&gt;sdks/java/javadoc/build.gradle&lt;/code&gt; contains a list of modules to include
in and exclude, plus a list of offline URLs that populate links from Beam&amp;rsquo;s
Javadoc to the Javadoc for other modules that Beam depends on.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Confirm that new modules added since the last release have been added to the
inclusion list as appropriate.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Confirm that the excluded package list is up to date.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Verify the version numbers for offline links match the versions used by Beam. If
the version number has changed, download a new version of the corresponding
&lt;code&gt;&amp;lt;module&amp;gt;-docs/package-list&lt;/code&gt; file.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;build-the-pydoc-api-reference&#34;&gt;Build the Pydoc API reference&lt;/h3&gt;
&lt;p&gt;Make sure you have &lt;code&gt;tox&lt;/code&gt; installed:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;pip install tox
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Create the Python SDK documentation using sphinx by running a helper script.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;cd sdks/python &amp;amp;&amp;amp; pip install -r build-requirements.txt &amp;amp;&amp;amp; tox -e py37-docs
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;By default the Pydoc is generated in &lt;code&gt;sdks/python/target/docs/_build&lt;/code&gt;. Let &lt;code&gt;${PYDOC_ROOT}&lt;/code&gt; be the absolute path to &lt;code&gt;_build&lt;/code&gt;.&lt;/p&gt;
&lt;h3 id=&#34;propose-pull-requests-for-website-updates&#34;&gt;Propose pull requests for website updates&lt;/h3&gt;
&lt;p&gt;Beam publishes API reference manuals for each release on the website. For Java
and Python SDKs, that’s Javadoc and PyDoc, respectively. The final step of
building the candidate is to propose website pull requests that update these
manuals.&lt;/p&gt;
&lt;p&gt;Merge the pull requests only after finalizing the release. To avoid invalid
redirects for the &amp;lsquo;current&amp;rsquo; version, merge these PRs in the order listed. Once
the PR is merged, the new contents will get picked up automatically and served
to the Beam website, usually within an hour.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;PR 1: apache/beam-site&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;This pull request is against the &lt;code&gt;apache/beam-site&lt;/code&gt; repo, on the &lt;code&gt;release-docs&lt;/code&gt;
branch.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Add the new Javadoc to &lt;a href=&#34;https://beam.apache.org/releases/javadoc/&#34;&gt;SDK API Reference page&lt;/a&gt; page, as follows:
&lt;ul&gt;
&lt;li&gt;Unpack the Maven artifact &lt;code&gt;org.apache.beam:beam-sdks-java-javadoc&lt;/code&gt; into some temporary location. Call this &lt;code&gt;${JAVADOC_TMP}&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Copy the generated Javadoc into the website repository: &lt;code&gt;cp -r ${JAVADOC_TMP} javadoc/${RELEASE}&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Add the new Pydoc to &lt;a href=&#34;https://beam.apache.org/releases/pydoc/&#34;&gt;SDK API Reference page&lt;/a&gt; page, as follows:
&lt;ul&gt;
&lt;li&gt;Copy the generated Pydoc into the website repository: &lt;code&gt;cp -r ${PYDOC_ROOT} pydoc/${RELEASE}&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Remove &lt;code&gt;.doctrees&lt;/code&gt; directory.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Stage files using: &lt;code&gt;git add --all javadoc/ pydoc/&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;PR 2: apache/beam&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;This pull request is against the &lt;code&gt;apache/beam&lt;/code&gt; repo, on the &lt;code&gt;master&lt;/code&gt; branch.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Update the &lt;code&gt;release_latest&lt;/code&gt; version flag in &lt;code&gt;/website/_config.yml&lt;/code&gt;, and list
the new release in &lt;code&gt;/website/src/get-started/downloads.md&lt;/code&gt;, linking to the
source code download and the Release Notes in JIRA.&lt;/li&gt;
&lt;li&gt;Update the &lt;code&gt;RedirectMatch&lt;/code&gt; rule in
&lt;a href=&#34;https://github.com/apache/beam/blob/master/website/src/.htaccess&#34;&gt;/website/src/.htaccess&lt;/a&gt;
to point to the new release. See file history for examples.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;blog-post&#34;&gt;Blog post&lt;/h3&gt;
&lt;p&gt;Write a blog post similar to &lt;a href=&#34;https://github.com/apache/beam/blob/master/website/www/site/content/en/blog/beam-2.20.0.md&#34;&gt;beam-2.20.0.md&lt;/a&gt;.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Update &lt;code&gt;CHANGES.md&lt;/code&gt; by adding a new section for the next release.&lt;/li&gt;
&lt;li&gt;Copy the changes for the current release from &lt;code&gt;CHANGES.md&lt;/code&gt; to the blog post and edit as necessary.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Tip&lt;/strong&gt;: Use git log to find contributors to the releases. (e.g: &lt;code&gt;git log --pretty=&#39;%aN&#39; ^v2.10.0 v2.11.0 | sort | uniq&lt;/code&gt;).
Make sure to clean it up, as there may be duplicate or incorrect user names.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;NOTE&lt;/strong&gt;: Make sure to include any breaking changes, even to &lt;code&gt;@Experimental&lt;/code&gt; features,
all major features and bug fixes, and all known issues.&lt;/p&gt;
&lt;p&gt;Template:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;We are happy to present the new {$RELEASE_VERSION} release of Beam. This release includes both improvements and new functionality.
See the [download page](/get-started/downloads/{$DOWNLOAD_ANCHOR}) for this release.
For more information on changes in {$RELEASE_VERSION}, check out the
[detailed release notes]({$JIRA_RELEASE_NOTES}).

## Highlights

  * New highly anticipated feature X added to Python SDK ([BEAM-X](https://issues.apache.org/jira/browse/BEAM-X)).
  * New highly anticipated feature Y added to JavaSDK ([BEAM-Y](https://issues.apache.org/jira/browse/BEAM-Y)).

{$TOPICS e.g.:}
### I/Os
* Support for X source added (Java) ([BEAM-X](https://issues.apache.org/jira/browse/BEAM-X)).
{$TOPICS}

### New Features / Improvements

* X feature added (Python) ([BEAM-X](https://issues.apache.org/jira/browse/BEAM-X)).
* Y feature added (Java) [BEAM-Y](https://issues.apache.org/jira/browse/BEAM-Y).

### Breaking Changes

* X behavior was changed ([BEAM-X](https://issues.apache.org/jira/browse/BEAM-X)).
* Y behavior was changed ([BEAM-Y](https://issues.apache.org/jira/browse/BEAM-Y)).

### Deprecations

* X behavior is deprecated and will be removed in X versions ([BEAM-X](https://issues.apache.org/jira/browse/BEAM-X)).

### Bugfixes

* Fixed X (Python) ([BEAM-Y](https://issues.apache.org/jira/browse/BEAM-X)).
* Fixed Y (Java) ([BEAM-Y](https://issues.apache.org/jira/browse/BEAM-Y)).

### Known Issues

* {$KNOWN_ISSUE_1}
* {$KNOWN_ISSUE_2}
* See a full list of open [issues that affect](https://issues.apache.org/jira/issues/?jql=project%20%3D%20BEAM%20AND%20affectedVersion%20%3D%20{$RELEASE}%20ORDER%20BY%20priority%20DESC%2C%20updated%20DESC) this version.


## List of Contributors

According to git shortlog, the following people contributed to the 2.XX.0 release. Thank you to all contributors!

${CONTRIBUTORS}
&lt;/code&gt;&lt;/pre&gt;&lt;h4 id=&#34;checklist-to-proceed-to-the-next-step-1&#34;&gt;Checklist to proceed to the next step&lt;/h4&gt;
&lt;ol&gt;
&lt;li&gt;Maven artifacts deployed to the staging repository of &lt;a href=&#34;https://repository.apache.org/content/repositories/&#34;&gt;repository.apache.org&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Source distribution deployed to the dev repository of &lt;a href=&#34;https://dist.apache.org/repos/dist/dev/beam/&#34;&gt;dist.apache.org&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Website pull request proposed to list the &lt;a href=&#34;/get-started/downloads/&#34;&gt;release&lt;/a&gt;, publish the &lt;a href=&#34;https://beam.apache.org/releases/javadoc/&#34;&gt;Java API reference manual&lt;/a&gt;, and publish the &lt;a href=&#34;https://beam.apache.org/releases/pydoc/&#34;&gt;Python API reference manual&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Docker images are published to &lt;a href=&#34;https://hub.docker.com/search?q=apache%2Fbeam&amp;amp;type=image&#34;&gt;DockerHub&lt;/a&gt; with tags: {RELEASE}_rc{RC_NUM}.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;You can (optionally) also do additional verification by:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Check that Python zip file contains the &lt;code&gt;README.md&lt;/code&gt;, &lt;code&gt;NOTICE&lt;/code&gt;, and &lt;code&gt;LICENSE&lt;/code&gt; files.&lt;/li&gt;
&lt;li&gt;Check hashes (e.g. &lt;code&gt;md5sum -c *.md5&lt;/code&gt; and &lt;code&gt;sha1sum -c *.sha1&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;Check signatures (e.g. &lt;code&gt;gpg --verify apache-beam-1.2.3-python.zip.asc apache-beam-1.2.3-python.zip&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;grep&lt;/code&gt; for legal headers in each file.&lt;/li&gt;
&lt;li&gt;Run all jenkins suites and include links to passing tests in the voting email. (Select &amp;ldquo;Run with parameters&amp;rdquo;)&lt;/li&gt;
&lt;li&gt;Pull docker images to make sure they are pullable.&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;&lt;code&gt;docker pull {image_name}
docker pull apache/beam_python3.5_sdk:2.16.0_rc1
&lt;/code&gt;&lt;/pre&gt;&lt;hr&gt;
&lt;h2 id=&#34;7-vote-and-validate-release-candidate&#34;&gt;7. Vote and validate release candidate&lt;/h2&gt;
&lt;p&gt;Once you have built and individually reviewed the release candidate, please share it for the community-wide review. Please review foundation-wide &lt;a href=&#34;http://www.apache.org/foundation/voting.html&#34;&gt;voting guidelines&lt;/a&gt; for more information.&lt;/p&gt;
&lt;p&gt;Start the review-and-vote thread on the dev@ mailing list. Here’s an email template; please adjust as you see fit.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;From: Release Manager
To: dev@beam.apache.org
Subject: [VOTE] Release 1.2.3, release candidate #3

Hi everyone,
Please review and vote on the release candidate #3 for the version 1.2.3, as follows:
[ ] +1, Approve the release
[ ] -1, Do not approve the release (please provide specific comments)


The complete staging area is available for your review, which includes:
* JIRA release notes [1],
* the official Apache source release to be deployed to dist.apache.org [2], which is signed with the key with fingerprint FFFFFFFF [3],
* all artifacts to be deployed to the Maven Central Repository [4],
* source code tag &amp;quot;v1.2.3-RC3&amp;quot; [5],
* website pull request listing the release [6], publishing the API reference manual [7], and the blog post [8].
* Java artifacts were built with Maven MAVEN_VERSION and OpenJDK/Oracle JDK JDK_VERSION.
* Python artifacts are deployed along with the source release to the dist.apache.org [2].
* Validation sheet with a tab for 1.2.3 release to help with validation [9].
* Docker images published to Docker Hub [10].

The vote will be open for at least 72 hours. It is adopted by majority approval, with at least 3 PMC affirmative votes.

Thanks,
Release Manager

[1] https://jira.apache.org/jira/secure/ReleaseNote.jspa?projectId=...
[2] https://dist.apache.org/repos/dist/dev/beam/1.2.3/
[3] https://dist.apache.org/repos/dist/release/beam/KEYS
[4] https://repository.apache.org/content/repositories/orgapachebeam-NNNN/
[5] https://github.com/apache/beam/tree/v1.2.3-RC3
[6] https://github.com/apache/beam/pull/...
[7] https://github.com/apache/beam-site/pull/...
[8] https://github.com/apache/beam/pull/...
[9] https://docs.google.com/spreadsheets/d/1qk-N5vjXvbcEk68GjbkSZTR8AGqyNUM-oLFo_ZXBpJw/edit#gid=...
[10] https://hub.docker.com/search?q=apache%2Fbeam&amp;amp;type=image
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;If there are any issues found in the release candidate, reply on the vote thread to cancel the vote. There’s no need to wait 72 hours. Proceed to the &lt;code&gt;Fix Issues&lt;/code&gt; step below and address the problem. However, some issues don’t require cancellation. For example, if an issue is found in the website pull request, just correct it on the spot and the vote can continue as-is.&lt;/p&gt;
&lt;p&gt;If there are no issues, reply on the vote thread to close the voting. Then, tally the votes in a separate email thread. Here’s an email template; please adjust as you see fit.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;From: Release Manager
To: dev@beam.apache.org
Subject: [RESULT] [VOTE] Release 1.2.3, release candidate #3

I&#39;m happy to announce that we have unanimously approved this release.

There are XXX approving votes, XXX of which are binding:
* approver 1
* approver 2
* approver 3
* approver 4

There are no disapproving votes.

Thanks everyone!
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;run-validation-tests&#34;&gt;Run validation tests&lt;/h3&gt;
&lt;p&gt;All tests listed in this &lt;a href=&#34;https://s.apache.org/beam-release-validation&#34;&gt;spreadsheet&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Since there are a bunch of tests, we recommend you running validations using automation script. In case of script failure, you can still run all of them manually.&lt;/p&gt;
&lt;h4 id=&#34;run-validations-using-run_rc_validationsh&#34;&gt;Run validations using run_rc_validation.sh&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Script: &lt;a href=&#34;https://github.com/apache/beam/blob/master/release/src/main/scripts/run_rc_validation.sh&#34;&gt;run_rc_validation.sh&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Usage&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;First update required configurations listed in &lt;code&gt;RC_VALIDATE_CONFIGS&lt;/code&gt; in
&lt;a href=&#34;https://github.com/apache/beam/blob/master/release/src/main/scripts/script.config&#34;&gt;script.config&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Then run
&lt;pre&gt;&lt;code&gt;./beam/release/src/main/scripts/run_rc_validation.sh
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Tasks included&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Run Java quickstart with Direct Runner, Apex local runner, Flink local runner, Spark local runner and Dataflow runner.&lt;/li&gt;
&lt;li&gt;Run Java Mobile Games(UserScore, HourlyTeamScore, Leaderboard) with Dataflow runner.&lt;/li&gt;
&lt;li&gt;Create a PR to trigger python validation job, including
&lt;ul&gt;
&lt;li&gt;Python quickstart in batch and streaming mode with direct runner and Dataflow runner.&lt;/li&gt;
&lt;li&gt;Python Mobile Games(UserScore, HourlyTeamScore) with direct runner and Dataflow runner.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Run Python Streaming MobileGames, includes
&lt;ul&gt;
&lt;li&gt;Start a new terminal to run Java Pubsub injector.&lt;/li&gt;
&lt;li&gt;Start a new terminal to run python LeaderBoard with Direct Runner.&lt;/li&gt;
&lt;li&gt;Start a new terminal to run python LeaderBoard with Dataflow Runner.&lt;/li&gt;
&lt;li&gt;Start a new terminal to run python GameStats with Direct Runner.&lt;/li&gt;
&lt;li&gt;Start a new terminal to run python GameStats with Dataflow Runner.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Tasks you need to do manually&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Check whether validations succeed by following console output instructions.&lt;/li&gt;
&lt;li&gt;Terminate streaming jobs and java injector.&lt;/li&gt;
&lt;li&gt;Sign up &lt;a href=&#34;https://s.apache.org/beam-release-validation&#34;&gt;spreadsheet&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Vote in the release thread.&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;run-validations-manually&#34;&gt;Run validations manually&lt;/h4&gt;
&lt;p&gt;&lt;em&gt;Note&lt;/em&gt;: -Prepourl and -Pver can be found in the RC vote email sent by Release Manager.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Java Quickstart Validation&lt;/p&gt;
&lt;p&gt;Direct Runner:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;./gradlew :runners:direct-java:runQuickstartJavaDirect \
-Prepourl=https://repository.apache.org/content/repositories/orgapachebeam-${KEY} \
-Pver=${RELEASE_VERSION}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Apex Local Runner&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;./gradlew :runners:apex:runQuickstartJavaApex \
-Prepourl=https://repository.apache.org/content/repositories/orgapachebeam-${KEY} \
-Pver=${RELEASE_VERSION}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Flink Local Runner&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;./gradlew :runners:flink:1.10:runQuickstartJavaFlinkLocal \
-Prepourl=https://repository.apache.org/content/repositories/orgapachebeam-${KEY} \
-Pver=${RELEASE_VERSION}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Spark Local Runner&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;./gradlew :runners:spark:runQuickstartJavaSpark \
-Prepourl=https://repository.apache.org/content/repositories/orgapachebeam-${KEY} \
-Pver=${RELEASE_VERSION}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Dataflow Runner&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;./gradlew :runners:google-cloud-dataflow-java:runQuickstartJavaDataflow \
-Prepourl=https://repository.apache.org/content/repositories/orgapachebeam-${KEY} \
-Pver=${RELEASE_VERSION} \
-PgcpProject=${YOUR_GCP_PROJECT} \
-PgcsBucket=${YOUR_GCP_BUCKET}
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Java Mobile Game(UserScore, HourlyTeamScore, Leaderboard)&lt;/p&gt;
&lt;p&gt;Pre-request&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Create your own BigQuery dataset&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;bq mk --project_id=${YOUR_GCP_PROJECT} ${YOUR_DATASET}
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Create yout PubSub topic&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;gcloud alpha pubsub topics create --project=${YOUR_GCP_PROJECT} ${YOUR_PROJECT_PUBSUB_TOPIC} 
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Setup your service account&lt;/p&gt;
&lt;p&gt;Goto IAM console in your project to create a service account as &lt;code&gt;project owner&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Run&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;gcloud iam service-accounts keys create ${YOUR_KEY_JSON} --iam-account ${YOUR_SERVICE_ACCOUNT_NAME}@${YOUR_PROJECT_NAME}
export GOOGLE_APPLICATION_CREDENTIALS=${PATH_TO_YOUR_KEY_JSON} 
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Run&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;./gradlew :runners:google-cloud-dataflow-java:runMobileGamingJavaDataflow \
 -Prepourl=https://repository.apache.org/content/repositories/orgapachebeam-${KEY} \ 
 -Pver=${RELEASE_VERSION} \
 -PgcpProject=${YOUR_GCP_PROJECT} \
 -PgcsBucket=${YOUR_GCP_BUCKET} \
 -PbqDataset=${YOUR_DATASET} -PpubsubTopic=${YOUR_PROJECT_PUBSUB_TOPIC}
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Python Quickstart(batch &amp;amp; streaming), MobileGame(UserScore, HourlyTeamScore)&lt;/p&gt;
&lt;p&gt;Create a new PR in apache/beam&lt;/p&gt;
&lt;p&gt;In comment area, type in &lt;code&gt;Run Python ReleaseCandidate&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Python Leaderboard &amp;amp; GameStats&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Get staging RC &lt;code&gt;wget https://dist.apache.org/repos/dist/dev/beam/2.5.0/* &lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Verify the hashes&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;sha512sum -c apache-beam-2.5.0-python.zip.sha512
sha512sum -c apache-beam-2.5.0-source-release.zip.sha512
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Build SDK&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;sudo apt-get install unzip
unzip apache-beam-2.5.0-source-release.zip
python setup.py sdist
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Setup virtualenv&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;pip install --upgrade pip
pip install --upgrade setuptools
pip install --upgrade virtualenv
virtualenv beam_env
 . beam_env/bin/activate
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Install SDK&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;pip install dist/apache-beam-2.5.0.tar.gz
pip install dist/apache-beam-2.5.0.tar.gz[gcp]
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Setup GCP&lt;/p&gt;
&lt;p&gt;Please repeat following steps for every following test.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;bq rm -rf --project=${YOUR_PROJECT} ${USER}_test
bq mk --project_id=${YOUR_PROJECT} ${USER}_test
gsutil rm -rf ${YOUR_GS_STORAGE]
gsutil mb -p ${YOUR_PROJECT} ${YOUR_GS_STORAGE}
gcloud alpha pubsub topics create --project=${YOUR_PROJECT} ${YOUR_PUBSUB_TOPIC}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Setup your service account as described in &lt;code&gt;Java Mobile Game&lt;/code&gt; section above.&lt;/p&gt;
&lt;p&gt;Produce data by using java injector:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Configure your ~/.m2/settings.xml as following:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;settings&amp;gt;
  &amp;lt;profiles&amp;gt;
    &amp;lt;profile&amp;gt;
      &amp;lt;id&amp;gt;release-repo&amp;lt;/id&amp;gt;
      &amp;lt;activation&amp;gt;
        &amp;lt;activeByDefault&amp;gt;true&amp;lt;/activeByDefault&amp;gt;
      &amp;lt;/activation&amp;gt;
      &amp;lt;repositories&amp;gt;
        &amp;lt;repository&amp;gt;
          &amp;lt;id&amp;gt;Release 2.4.0 RC3&amp;lt;/id&amp;gt;
          &amp;lt;name&amp;gt;Release 2.4.0 RC3&amp;lt;/name&amp;gt;
          &amp;lt;url&amp;gt;https://repository.apache.org/content/repositories/orgapachebeam-1031/&amp;lt;/url&amp;gt;
        &amp;lt;/repository&amp;gt;
      &amp;lt;/repositories&amp;gt;
    &amp;lt;/profile&amp;gt;
  &amp;lt;/profiles&amp;gt;
&amp;lt;/settings&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;em&gt;Note&lt;/em&gt;: You can found the latest  &lt;code&gt;id&lt;/code&gt;, &lt;code&gt;name&lt;/code&gt; and &lt;code&gt;url&lt;/code&gt; for one RC in the vote email thread sent out by Release Manager.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Run&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;mvn archetype:generate \
      -DarchetypeGroupId=org.apache.beam \
      -DarchetypeArtifactId=beam-sdks-java-maven-archetypes-examples \
      -DarchetypeVersion=${RELEASE_VERSION} \
      -DgroupId=org.example \
      -DartifactId=word-count-beam \
      -Dversion=&amp;quot;0.1&amp;quot; \
      -Dpackage=org.apache.beam.examples \
      -DinteractiveMode=false
      -DarchetypeCatalog=internal
            
mvn compile exec:java -Dexec.mainClass=org.apache.beam.examples.complete.game.injector.Injector \
  -Dexec.args=&amp;quot;${YOUR_PROJECT} ${YOUR_PUBSUB_TOPIC} none&amp;quot;
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Run Leaderboard with Direct Runner&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;python -m apache_beam.examples.complete.game.leader_board \
--project=${YOUR_PROJECT} \
--topic projects/${YOUR_PROJECT}/topics/${YOUR_PUBSUB_TOPIC} \
--dataset ${USER}_test
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Inspect results:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Check whether there is any error messages in console.&lt;/li&gt;
&lt;li&gt;Goto your BigQuery console and check whether your ${USER}_test has leader_board_users and leader_board_teams table.&lt;/li&gt;
&lt;li&gt;bq head -n 10 ${USER}_test.leader_board_users&lt;/li&gt;
&lt;li&gt;bq head -n 10 ${USER}_test.leader_board_teams&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Run Leaderboard with Dataflow Runner&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;python -m apache_beam.examples.complete.game.leader_board \ 
--project=${YOUR_PROJECT} \ 
--region=${GCE_REGION} \
--topic projects/${YOUR_PROJECT}/topics/${YOUR_PUBSUB_TOPIC} \ 
--dataset ${USER}_test \ 
--runner DataflowRunner \ 
--temp_location=${YOUR_GS_BUCKET}/temp/ \ 
--sdk_location dist/*
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Inspect results:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Goto your Dataflow job console and check whether there is any error.&lt;/li&gt;
&lt;li&gt;Goto your BigQuery console and check whether your ${USER}_test has leader_board_users and leader_board_teams table.&lt;/li&gt;
&lt;li&gt;bq head -n 10 ${USER}_test.leader_board_users&lt;/li&gt;
&lt;li&gt;bq head -n 10 ${USER}_test.leader_board_teams&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Run GameStats with Direct Runner&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;python -m apache_beam.examples.complete.game.game_stats \
--project=${YOUR_PROJECT} \
--topic projects/${YOUR_PROJECT}/topics/${YOUR_PUBSUB_TOPIC} \
--dataset ${USER}_test \
--fixed_window_duration ${SOME_SMALL_DURATION}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Inspect results:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Check whether there is any error messages in console.&lt;/li&gt;
&lt;li&gt;Goto your BigQuery console and check whether your ${USER}_test has game_stats_teams and game_stats_sessions table.&lt;/li&gt;
&lt;li&gt;bq head -n 10 ${USER}_test.game_stats_teams&lt;/li&gt;
&lt;li&gt;bq head -n 10 ${USER}_test.game_stats_sessions&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Run GameStats with Dataflow Runner&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;python -m apache_beam.examples.complete.game.game_stats \ 
--project=${YOUR_PROJECT} \
--region=${GCE_REGION} \
--topic projects/${YOUR_PROJECT}/topics/${YOUR_PUBSUB_TOPIC} \ 
--dataset ${USER}_test \ 
--runner DataflowRunner \ 
--temp_location=${YOUR_GS_BUCKET}/temp/ \ 
--sdk_location dist/* \
--fixed_window_duration ${SOME_SMALL_DURATION}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Inspect results:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Goto your Dataflow job console and check whether there is any error.&lt;/li&gt;
&lt;li&gt;Goto your BigQuery console and check whether your ${USER}_test has game_stats_teams and game_stats_sessions table.&lt;/li&gt;
&lt;li&gt;bq head -n 10 ${USER}_test.game_stats_teams&lt;/li&gt;
&lt;li&gt;bq head -n 10 ${USER}_test.game_stats_sessions&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;fix-any-issues&#34;&gt;Fix any issues&lt;/h3&gt;
&lt;p&gt;Any issues identified during the community review and vote should be fixed in this step. Additionally, any JIRA issues created from the initial branch verification should be fixed.&lt;/p&gt;
&lt;p&gt;Code changes should be proposed as standard pull requests to the &lt;code&gt;master&lt;/code&gt; branch and reviewed using the normal contributing process. Then, relevant changes should be cherry-picked into the release branch. The cherry-pick commits should then be proposed as the pull requests against the release branch, again reviewed and merged using the normal contributing process.&lt;/p&gt;
&lt;p&gt;Once all issues have been resolved, you should go back and build a new release candidate with these changes.&lt;/p&gt;
&lt;h3 id=&#34;checklist-to-proceed-to-the-next-step-2&#34;&gt;Checklist to proceed to the next step&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;Issues identified during vote have been resolved, with fixes committed to the release branch.&lt;/li&gt;
&lt;li&gt;All issues tagged with &lt;code&gt;Fix-Version&lt;/code&gt; for the current release should be closed.&lt;/li&gt;
&lt;li&gt;Community votes to release the proposed candidate, with at least three approving PMC votes&lt;/li&gt;
&lt;/ol&gt;
&lt;hr&gt;
&lt;h2 id=&#34;8-finalize-the-release&#34;&gt;8. Finalize the release&lt;/h2&gt;
&lt;p&gt;Once the release candidate has been reviewed and approved by the community, the release should be finalized. This involves the final deployment of the release candidate to the release repositories, merging of the website changes, etc.&lt;/p&gt;
&lt;h3 id=&#34;deploy-artifacts-to-maven-central-repository&#34;&gt;Deploy artifacts to Maven Central Repository&lt;/h3&gt;
&lt;p&gt;Use the &lt;a href=&#34;https://repository.apache.org/#stagingRepositories&#34;&gt;Apache Nexus repository manager&lt;/a&gt; to release the staged binary artifacts to the Maven Central repository. In the &lt;code&gt;Staging Repositories&lt;/code&gt; section, find the relevant release candidate &lt;code&gt;orgapachebeam-XXX&lt;/code&gt; entry and click &lt;code&gt;Release&lt;/code&gt;. Drop all other release candidates that are not being released.
&lt;strong&gt;NOTE&lt;/strong&gt;: If you are using &lt;a href=&#34;https://help.github.com/articles/securing-your-account-with-two-factor-authentication-2fa/&#34;&gt;GitHub two-factor authentication&lt;/a&gt; and haven&amp;rsquo;t configure HTTPS access,
please follow &lt;a href=&#34;https://help.github.com/articles/creating-a-personal-access-token-for-the-command-line/&#34;&gt;the guide&lt;/a&gt; to configure command line access.&lt;/p&gt;
&lt;h3 id=&#34;deploy-python-artifacts-to-pypi&#34;&gt;Deploy Python artifacts to PyPI&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;Download everything from &lt;a href=&#34;https://dist.apache.org/repos/dist/dev/beam/2.14.0/python/&#34;&gt;https://dist.apache.org/repos/dist/dev/beam/2.14.0/python/&lt;/a&gt; ;&lt;/li&gt;
&lt;li&gt;Keep only things that you see in &lt;a href=&#34;https://pypi.org/project/apache-beam/#files&#34;&gt;https://pypi.org/project/apache-beam/#files&lt;/a&gt; , e.g. &lt;code&gt;.zip&lt;/code&gt;, &lt;code&gt;.whl&lt;/code&gt;,
delete the &lt;code&gt;.asc&lt;/code&gt;, &lt;code&gt;.sha512&lt;/code&gt;;&lt;/li&gt;
&lt;li&gt;Upload the new release &lt;code&gt;twine upload *&lt;/code&gt; from the directory with the &lt;code&gt;.zip&lt;/code&gt; and &lt;code&gt;.whl&lt;/code&gt; files;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;a href=&#34;https://packaging.python.org/tutorials/packaging-projects/#uploading-the-distribution-archives&#34;&gt;Installing twine&lt;/a&gt;: &lt;code&gt;pip install twine&lt;/code&gt;. You can install twine under &lt;a href=&#34;https://virtualenv.pypa.io/en/latest/&#34;&gt;virtualenv&lt;/a&gt; if preferred.&lt;/p&gt;
&lt;h3 id=&#34;deploy-source-release-to-distapacheorg&#34;&gt;Deploy source release to dist.apache.org&lt;/h3&gt;
&lt;p&gt;Copy the source release from the &lt;code&gt;dev&lt;/code&gt; repository to the &lt;code&gt;release&lt;/code&gt; repository at &lt;code&gt;dist.apache.org&lt;/code&gt; using Subversion.&lt;/p&gt;
&lt;p&gt;Move last release artifacts from &lt;code&gt;dist.apache.org&lt;/code&gt; to &lt;code&gt;archive.apache.org&lt;/code&gt; using Subversion. Then update download address for last release version, &lt;a href=&#34;https://github.com/apache/beam-site/pull/478&#34;&gt;example PR&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;NOTE&lt;/strong&gt;: Only PMC members have permissions to do it, ping &lt;a href=&#34;mailto:dev@beam.apache.org&#34;&gt;dev@&lt;/a&gt; for assitance;&lt;/p&gt;
&lt;p&gt;Make sure the download address for last release version is upldaed, &lt;a href=&#34;https://github.com/apache/beam-site/pull/478&#34;&gt;example PR&lt;/a&gt;.&lt;/p&gt;
&lt;h3 id=&#34;deploy-sdk-docker-images-to-dockerhub&#34;&gt;Deploy SDK docker images to DockerHub&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Script: &lt;a href=&#34;https://github.com/apache/beam/blob/master/release/src/main/scripts/publish_docker_images.sh&#34;&gt;publish_docker_images.sh&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Usage&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code&gt;./beam/release/src/main/scripts/publish_docker_images.sh
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Verify that:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Images are published at &lt;a href=&#34;https://hub.docker.com/search?q=apache%2Fbeam&amp;amp;type=image&#34;&gt;DockerHub&lt;/a&gt; with tags {RELEASE} and &lt;em&gt;latest&lt;/em&gt;.&lt;/li&gt;
&lt;li&gt;Images with &lt;em&gt;latest&lt;/em&gt; tag are pointing to current release by confirming
&lt;ol&gt;
&lt;li&gt;Digest of the image with &lt;em&gt;latest&lt;/em&gt; tag is the same as the one with {RELEASE} tag.&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;git-tag&#34;&gt;Git tag&lt;/h3&gt;
&lt;p&gt;Create and push a new signed tag for the released version by copying the tag for the final release candidate, as follows:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;VERSION_TAG=&amp;quot;v${RELEASE}&amp;quot;
git tag -s &amp;quot;$VERSION_TAG&amp;quot; &amp;quot;$RC_TAG&amp;quot;
git push github &amp;quot;$VERSION_TAG&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;merge-website-pull-request&#34;&gt;Merge website pull request&lt;/h3&gt;
&lt;p&gt;Merge the website pull request to &lt;a href=&#34;/get-started/downloads/&#34;&gt;list the release&lt;/a&gt;, publish the &lt;a href=&#34;https://beam.apache.org/releases/pydoc/&#34;&gt;Python API reference manual&lt;/a&gt;, the &lt;a href=&#34;https://beam.apache.org/releases/javadoc/&#34;&gt;Java API reference manual&lt;/a&gt; and Blogpost created earlier.&lt;/p&gt;
&lt;h3 id=&#34;mark-the-version-as-released-in-jira&#34;&gt;Mark the version as released in JIRA&lt;/h3&gt;
&lt;p&gt;In JIRA, inside &lt;a href=&#34;https://issues.apache.org/jira/plugins/servlet/project-config/BEAM/versions&#34;&gt;version management&lt;/a&gt;, hover over the current release and a settings menu will appear. Click &lt;code&gt;Release&lt;/code&gt;, and select today’s date.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;NOTE&lt;/strong&gt;: Only PMC members have permissions to do it, ping &lt;a href=&#34;mailto:dev@beam.apache.org&#34;&gt;dev@&lt;/a&gt; for assitance;&lt;/p&gt;
&lt;h3 id=&#34;recordkeeping-with-asf&#34;&gt;Recordkeeping with ASF&lt;/h3&gt;
&lt;p&gt;Use reporter.apache.org to seed the information about the release into future project reports.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;NOTE&lt;/strong&gt;: Only PMC members have permissions to do it, ping &lt;a href=&#34;mailto:dev@beam.apache.org&#34;&gt;dev@&lt;/a&gt; for assitance;&lt;/p&gt;
&lt;h3 id=&#34;checklist-to-proceed-to-the-next-step-3&#34;&gt;Checklist to proceed to the next step&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Maven artifacts released and indexed in the &lt;a href=&#34;https://search.maven.org/#search%7Cga%7C1%7Cg%3A%22org.apache.beam%22&#34;&gt;Maven Central Repository&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Source distribution available in the release repository of &lt;a href=&#34;https://dist.apache.org/repos/dist/release/beam/&#34;&gt;dist.apache.org&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Source distribution removed from the dev repository of &lt;a href=&#34;https://dist.apache.org/repos/dist/dev/beam/&#34;&gt;dist.apache.org&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Website pull request to &lt;a href=&#34;/get-started/downloads/&#34;&gt;list the release&lt;/a&gt; and publish the &lt;a href=&#34;https://beam.apache.org/releases/javadoc/&#34;&gt;API reference manual&lt;/a&gt; merged&lt;/li&gt;
&lt;li&gt;Release tagged in the source code repository&lt;/li&gt;
&lt;li&gt;Release version finalized in JIRA. (Note: Not all committers have administrator access to JIRA. If you end up getting permissions errors ask on the mailing list for assistance.)&lt;/li&gt;
&lt;li&gt;Release version is listed at reporter.apache.org&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h2 id=&#34;9-promote-the-release&#34;&gt;9. Promote the release&lt;/h2&gt;
&lt;p&gt;Once the release has been finalized, the last step of the process is to promote the release within the project and beyond.&lt;/p&gt;
&lt;h3 id=&#34;apache-mailing-lists&#34;&gt;Apache mailing lists&lt;/h3&gt;
&lt;p&gt;Announce on the dev@ mailing list that the release has been finished.&lt;/p&gt;
&lt;p&gt;Announce on the release on the user@ mailing list, listing major improvements and contributions.&lt;/p&gt;
&lt;p&gt;Announce the release on the &lt;a href=&#34;mailto:announce@apache.org&#34;&gt;announce@apache.org&lt;/a&gt; mailing list.
&lt;strong&gt;NOTE&lt;/strong&gt;: This can only be done from &lt;code&gt;@apache.org&lt;/code&gt; email address.&lt;/p&gt;
&lt;h3 id=&#34;social-media&#34;&gt;Social media&lt;/h3&gt;
&lt;p&gt;Tweet, post on Facebook, LinkedIn, and other platforms. Ask other contributors to do the same.&lt;/p&gt;
&lt;p&gt;Also, update &lt;a href=&#34;https://en.wikipedia.org/wiki/Apache_Beam&#34;&gt;the Wikipedia article on Apache Beam&lt;/a&gt;.&lt;/p&gt;
&lt;h3 id=&#34;checklist-to-declare-the-process-completed&#34;&gt;Checklist to declare the process completed&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;Release announced on the user@ mailing list.&lt;/li&gt;
&lt;li&gt;Blog post published, if applicable.&lt;/li&gt;
&lt;li&gt;Release recorded in reporter.apache.org.&lt;/li&gt;
&lt;li&gt;Release announced on social media.&lt;/li&gt;
&lt;li&gt;Completion declared on the dev@ mailing list.&lt;/li&gt;
&lt;li&gt;Update Wikipedia Apache Beam article.&lt;/li&gt;
&lt;/ol&gt;
&lt;hr&gt;
&lt;h2 id=&#34;improve-the-process&#34;&gt;Improve the process&lt;/h2&gt;
&lt;p&gt;It is important that we improve the release processes over time. Once you’ve finished the release, please take a step back and look what areas of this process and be improved. Perhaps some part of the process can be simplified. Perhaps parts of this guide can be clarified.&lt;/p&gt;
&lt;p&gt;If we have specific ideas, please start a discussion on the dev@ mailing list and/or propose a pull request to update this guide. Thanks!&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>Contribute: Beam Team</title>
      <link>/contribute/team/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/contribute/team/</guid>
      <description>
        
        
        &lt;!--
Licensed under the Apache License, Version 2.0 (the &#34;License&#34;);
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an &#34;AS IS&#34; BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
--&gt;
&lt;!--
This page is redirected to https://home.apache.org/phonebook.html?pmc=beam
--&gt;

      </description>
    </item>
    
    <item>
      <title>Contribute: Beam Testing</title>
      <link>/contribute/testing/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/contribute/testing/</guid>
      <description>
        
        
        &lt;!--
Licensed under the Apache License, Version 2.0 (the &#34;License&#34;);
you may not use this file except in compliance with the License.
You may obtain a copy of the License at
http://www.apache.org/licenses/LICENSE-2.0
Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an &#34;AS IS&#34; BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
--&gt;
&lt;!--
This page is redirected to https://cwiki.apache.org/confluence/display/BEAM/Contribution+Testing+Guide
--&gt;

      </description>
    </item>
    
    <item>
      <title>Contribute: Become A Committer</title>
      <link>/contribute/become-a-committer/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/contribute/become-a-committer/</guid>
      <description>
        
        
        &lt;!--
Licensed under the Apache License, Version 2.0 (the &#34;License&#34;);
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an &#34;AS IS&#34; BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
--&gt;
&lt;h1 id=&#34;become-a-committer&#34;&gt;Become a Committer&lt;/h1&gt;
&lt;p&gt;An Apache Beam
&lt;a href=&#34;https://www.apache.org/foundation/how-it-works.html#committers&#34;&gt;committer&lt;/a&gt; has
write access to the repository for merging pull requests, but you don&amp;rsquo;t have
to be a code contributor to become a committer. Becoming a committer means that
you have the project&amp;rsquo;s trust. Read the &lt;a href=&#34;https://www.apache.org/dev/committers.html#committer-responsibilities&#34;&gt;ASF
documentation&lt;/a&gt;
for more about being a committer in the Apache Software Foundation.&lt;/p&gt;
&lt;p&gt;The &lt;a href=&#34;https://www.apache.org/foundation/how-it-works.html#pmc-members&#34;&gt;PMC&lt;/a&gt;
makes someone a committer via nomination, discussion, and then majority vote.
We use data from as many sources as possible to inform our reasoning. Here are
some examples:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://lists.apache.org/list.html?dev@beam.apache.org&#34;&gt;dev@ archives&lt;/a&gt; and &lt;a href=&#34;https://lists.apache.org/trends.html?dev@beam.apache.org&#34;&gt;statistics&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://lists.apache.org/list.html?user@beam.apache.org&#34;&gt;user@ archives&lt;/a&gt; and &lt;a href=&#34;https://lists.apache.org/trends.html?user@beam.apache.org&#34;&gt;statistics&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://stackoverflow.com/questions/tagged/apache-beam&#34;&gt;&lt;code&gt;apache-beam&lt;/code&gt; StackOverflow tag&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Git metrics for &lt;a href=&#34;https://github.com/apache/beam/graphs/contributors&#34;&gt;Beam&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Code reviews given and received on
&lt;a href=&#34;https://github.com/apache/beam/pulls&#34;&gt;Beam&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Clear areas of ownership (a runner, a DSL, IO connector, documentation,
etc.)&lt;/li&gt;
&lt;li&gt;Public events&lt;/li&gt;
&lt;li&gt;Firsthand PMC testimonials&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The PMC has assembled the following set of guidelines for becoming a committer.&lt;/p&gt;
&lt;h2 id=&#34;an-apache-beam-committer&#34;&gt;An Apache Beam committer&amp;hellip;&lt;/h2&gt;
&lt;h3 id=&#34;takes-many-forms&#34;&gt;Takes many forms&lt;/h3&gt;
&lt;p&gt;There are many actions other than coding that build the trust we place in a
committer - code review, design discussion, user support, community outreach, improving
infrastructure, documentation, project management, etc.&lt;/p&gt;
&lt;h3 id=&#34;knows-upholds-and-reinforces-the-apache-software-foundation-code-of-conduct&#34;&gt;Knows, upholds, and reinforces the Apache Software Foundation code of conduct&lt;/h3&gt;
&lt;p&gt;See the &lt;a href=&#34;https://www.apache.org/foundation/policies/conduct.html&#34;&gt;ASF
documentation&lt;/a&gt;. In
particular, they manifestly strive to:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Be open&lt;/li&gt;
&lt;li&gt;Be empathetic&lt;/li&gt;
&lt;li&gt;Be welcoming&lt;/li&gt;
&lt;li&gt;Be friendly&lt;/li&gt;
&lt;li&gt;Be patient&lt;/li&gt;
&lt;li&gt;Be collaborative&lt;/li&gt;
&lt;li&gt;Be inquisitive&lt;/li&gt;
&lt;li&gt;Be careful in the words that they choose&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;knows-upholds-and-reinforces-the-responsibilities-of-an-apache-software-foundation-committer&#34;&gt;Knows, upholds, and reinforces the responsibilities of an Apache Software Foundation committer&lt;/h3&gt;
&lt;p&gt;See the &lt;a href=&#34;https://www.apache.org/dev/committers.html#committer-responsibilities&#34;&gt;ASF documentation&lt;/a&gt;.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;They help create a product that will outlive the interest of any particular
volunteer (including themselves)&lt;/li&gt;
&lt;li&gt;They grow and maintain the health of the Apache community&lt;/li&gt;
&lt;li&gt;They help out with surrounding work, such as the website &amp;amp; documentation&lt;/li&gt;
&lt;li&gt;They help users&lt;/li&gt;
&lt;li&gt;They can be trusted to decide when code is ready for release, or when to ask
someone else to make the judgment&lt;/li&gt;
&lt;li&gt;They can be trusted to decide when to merge code (if a code contributor) or
when to ask someone else to make the judgment&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;knows-upholds-and-reinforces-the-beam-communitys-practices&#34;&gt;Knows, upholds, and reinforces the Beam community’s practices&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;They have a proven commitment to the project&lt;/li&gt;
&lt;li&gt;They share their intentions with the community&lt;/li&gt;
&lt;li&gt;They accept and integrate community feedback in their plans, designs,
code, etc.&lt;/li&gt;
&lt;li&gt;They earnestly try to make Beam better with their contributions&lt;/li&gt;
&lt;li&gt;In particular, if a code contributor:
&lt;ul&gt;
&lt;li&gt;They earnestly try to make Beam better with their own code&lt;/li&gt;
&lt;li&gt;They earnestly try to make Beam better with code review&lt;/li&gt;
&lt;li&gt;They accept and integrate feedback on their code&lt;/li&gt;
&lt;li&gt;They know, follow, and enforce Beam’s practices while
reviewing/merging code - style, documentation, testing, backward
compatibility, etc.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;

      </description>
    </item>
    
    <item>
      <title>Contribute: Dependencies Guide</title>
      <link>/contribute/dependencies/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/contribute/dependencies/</guid>
      <description>
        
        
        &lt;!--
Licensed under the Apache License, Version 2.0 (the &#34;License&#34;);
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an &#34;AS IS&#34; BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
--&gt;
&lt;h1 id=&#34;dependencies-guide&#34;&gt;Dependencies Guide&lt;/h1&gt;
&lt;p&gt;This document describes policies for keeping Beam dependencies up to date.&lt;/p&gt;
&lt;p&gt;Old dependencies cause user pain and can result in a system being unusable for some users. Many users do not use Beam in isolation and bundle other dependencies in the same deployment. These additional dependencies might pull in incompatible dependencies to user’s environment which can again result in broken Beam pipelines, sometimes with undefined behavior. To prevent this, users will have to update their deployment environment or worse yet may end up not being able to use Beam along with some of the other dependencies at all.&lt;/p&gt;
&lt;p&gt;Beam Java SDK’s Gradle build defines a set of top level &lt;a href=&#34;https://github.com/apache/beam/blob/master/buildSrc/src/main/groovy/org/apache/beam/gradle/BeamModulePlugin.groovy&#34;&gt;dependencies&lt;/a&gt; and various components (runners, IO connectors, etc) can choose to include these dependencies. Components usually use the versions defined at the top level but may choose to override these versions.&lt;/p&gt;
&lt;p&gt;If a component &lt;em&gt;X&lt;/em&gt; chooses to override the version of a dependency &lt;em&gt;D&lt;/em&gt; from &lt;em&gt;a&lt;/em&gt; to &lt;em&gt;b&lt;/em&gt; and another component &lt;em&gt;Y&lt;/em&gt; is incompatible with version &lt;em&gt;b&lt;/em&gt; of &lt;em&gt;D&lt;/em&gt;, deployment of a user that uses both components &lt;em&gt;X&lt;/em&gt; and &lt;em&gt;Y&lt;/em&gt; will end up in a broken state.&lt;/p&gt;
&lt;p&gt;A similar issue could arise if two dependencies of Beam depend on a common library but use incompatible versions of that library.&lt;/p&gt;
&lt;p&gt;Also, users might not use Beam in isolation, a user that depends on Beam as well as other libraries in the same environment might run into similar issues if Beam and the other library share a dependency while using incompatible versions.&lt;/p&gt;
&lt;p&gt;Beam Python SDK handles dependencies slightly differently, all dependencies are defined in a single &lt;a href=&#34;https://github.com/apache/beam/blob/master/sdks/python/setup.py&#34;&gt;setup.py&lt;/a&gt; file and are grouped. One of the groups describes required dependencies while other groups are for defining dependencies for various optional features. All Python modules have to use the versions of dependencies defined in &lt;a href=&#34;https://github.com/apache/beam/blob/master/sdks/python/setup.py&#34;&gt;setup.py&lt;/a&gt; file. Additionally, for most of the dependencies, Python SDK allows automatic upgrades upto next major version. Because of this setup, Python SDK currently does not run into component conflicts but other two forms of dependency conflicts described above can still occur.&lt;/p&gt;
&lt;p&gt;This picture can become even more complicated during runtime. Runner specific code might be incompatible with dependencies included by certain modules and if these dependencies leak into runtime, a pipeline might end up in a broken state.&lt;/p&gt;
&lt;p&gt;The overall issue is not unique to Beam and is well known in the industry as the &lt;a href=&#34;https://en.wikipedia.org/wiki/Dependency_hell&#34;&gt;Diamond Dependency problem (or Dependency Hell)&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;One common solution for the diamond dependency problem is &lt;a href=&#34;https://semver.org/&#34;&gt;semantic versioning&lt;/a&gt;. The basic idea is that dependencies are versioned in the form &lt;em&gt;x.y.z&lt;/em&gt; where &lt;em&gt;x&lt;/em&gt; is the &lt;em&gt;major version&lt;/em&gt;, &lt;em&gt;y&lt;/em&gt; is the &lt;em&gt;minor version&lt;/em&gt;, and &lt;em&gt;z&lt;/em&gt; is the &lt;em&gt;patch version&lt;/em&gt;. A major version change may be backwards incompatible and is expected to be rare. Minor and patch versions may be released more regularly but are expected to be backwards compatible. But in practice, important fixes (such as security patches) might get released in the form of minor or patch version updates and it will be healthy for the Beam project to depend on recently released minor versions of dependencies.&lt;/p&gt;
&lt;h2 id=&#34;identifying-outdated-dependencies&#34;&gt;Identifying outdated dependencies&lt;/h2&gt;
&lt;p&gt;A big part of keeping dependencies up to date involves identifying outdated dependencies of Beam that the community should try to upgrade.&lt;/p&gt;
&lt;p&gt;Beam currently executes a weekly Jenkins job that tries to identify outdated dependencies for various SDKs. This Jenkins job generates a weekly report that is shared in Beam dev list.&lt;/p&gt;
&lt;p&gt;In addition to this, Beam community members might identify other critical dependency updates that have to be manually performed. For example,&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;A minor release of a dependency due to a critical security vulnerability.&lt;/li&gt;
&lt;li&gt;A dependency conflict that was was triggered by a minor version release of a Beam dependency (this does not apply to Java SDK that depends on exact minor versions of dependencies).&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;These kind of urgently required upgrades might not get automatically picked up by the Jenkins job for few months. So Beam community has to act to identify such issues and perform upgrades early.&lt;/p&gt;
&lt;h2 id=&#34;jira-issue-automation&#34;&gt;JIRA Issue Automation&lt;/h2&gt;
&lt;p&gt;In order to track the dependency upgrade process, JIRA tickets will be created per significant outdated dependency based on the report. A bot named &lt;em&gt;Beam Jira Bot&lt;/em&gt; was created for managing JIRA issues. Beam community agrees on the following policies that creates and updates issues.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Title (summary) of the issues will be in the format &amp;ldquo;Beam Dependency Update Request: &amp;lt;dep_name&amp;gt;&amp;rdquo; where &amp;lt;dep_name&amp;gt; is the dependency artifact name.&lt;/li&gt;
&lt;li&gt;Issues will be created under the component &lt;em&gt;&amp;ldquo;dependencies&amp;rdquo;&lt;/em&gt;.&lt;/li&gt;
&lt;li&gt;Owners of dependencies will be notified by tagging the corresponding JIRA IDs mentioned in the ownership files in the issue description. See &lt;a href=&#34;https://github.com/apache/beam/blob/master/ownership/JAVA_DEPENDENCY_OWNERS.yaml&#34;&gt;Java Dependency Owners&lt;/a&gt; and &lt;a href=&#34;https://github.com/apache/beam/blob/master/ownership/PYTHON_DEPENDENCY_OWNERS.yaml&#34;&gt;Python Dependency Owners&lt;/a&gt; for current owners for Java SDK and Python SDK dependencies respectively.&lt;/li&gt;
&lt;li&gt;Automated tool will not create duplicate issues for the same dependency. Instead the tool will look for an existing JIRA when one has to be created for a given dependency and description of the JIRA will be updated with latest information, for example, current version of the dependency.&lt;/li&gt;
&lt;li&gt;If a Beam community member determines that a given dependency should not be upgraded the corresponding JIRA issue can be closed with a fix version specified.&lt;/li&gt;
&lt;li&gt;Automated tool will reopen a JIRA for a given dependency when one of following conditions is met:
&lt;ul&gt;
&lt;li&gt;Next SDK release is for a fix version mentioned in the JIRA.&lt;/li&gt;
&lt;li&gt;Six months &lt;strong&gt;and&lt;/strong&gt; three or more minor releases have passed since the JIRA was closed.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;upgrading-identified-outdated-dependencies&#34;&gt;Upgrading identified outdated dependencies&lt;/h2&gt;
&lt;p&gt;After outdated dependencies are identified, Beam community has to act to upgrade the dependencies regularly. Beam community has agreed on following policies regarding upgrading dependencies.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Human readable reports on status of Beam dependencies are generated weekly by an automated Jenkins job and shared with the Beam community through the dev list.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;These reports should be concise and should highlight the cases where the community has to act on.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Beam components should define dependencies and their versions at the top level. There can be rare exceptions, but they should come with explanations.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Components include various Beam runners, IO connectors, etc. Component-level dependency version declarations should only be performed in rare cases and should come with a comment explaining the reasoning for overriding the dependency. For example, dependencies specific to a runner that are unlikely to be utilized by other components might be defined at the runner.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;A significantly outdated dependency (identified manually or through the automated Jenkins job) should result in a JIRA that is a blocker for the next release. Release manager may choose to push the blocker to the subsequent release or downgrade from a blocker.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;This will be a blocker for next major and minor version releases of Beam. JIRA may be created automatically or manually.&lt;/p&gt;
&lt;p&gt;For manually identified critical dependency updates, Beam community members should create blocking JIRAs for next release. In addition to this Beam community members may trigger patch releases for any critical dependency fixes that should be made available to users urgently.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Dependency declarations may identify owners that are responsible for upgrading respective dependencies.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Owners can be mentioned in the yaml files. Blocking JIRAs will be initially assigned to these owners (if available). Release manager may choose to re-assign these JIRAs. A dependency may have more than one declared owner and in this case the JIRA will be assigned to one of the owners mentioned.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Dependencies of Java SDK components that may cause issues to other components if leaked should be vendored.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://www.ardanlabs.com/blog/2013/10/manage-dependencies-with-godep.html&#34;&gt;Vendoring&lt;/a&gt; is the process of creating copies of third party dependencies. Combined with repackaging, vendoring allows Beam components to depend on third party libraries without causing conflicts to other components. Vendoring should be done in a case-by-case basis since this can increase the total number of dependencies deployed in user&amp;rsquo;s enviroment.&lt;/p&gt;
&lt;h2 id=&#34;dependency-updates-and-backwards-compatibility&#34;&gt;Dependency updates and backwards compatibility&lt;/h2&gt;
&lt;p&gt;Beam releases &lt;a href=&#34;/get-started/downloads/&#34;&gt;adhere to&lt;/a&gt; semantic versioning. Hence, community members should take care when updating dependencies. Minor version updates to dependencies should be backwards compatible in most cases. Some updates to dependencies though may result in backwards incompatible API or functionality changes to Beam. PR reviewers and committers should take care to detect any dependency updates that could potentially introduce backwards incompatible changes to Beam before merging and PRs that update dependencies should include a statement regarding this verification in the form of a PR comment. Dependency updates that result in backwards incompatible changes to non-experimental features of Beam should be held till the next major version release of Beam. Any exceptions to this policy should only occur in extreme cases (for example, due to a security vulnerability of an existing dependency that is only fixed in a subsequent major version) and should be discussed on the Beam dev list. Note that backwards incompatible changes to experimental features may be introduced in a minor version release.&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>Contribute: Get Help Contributing</title>
      <link>/contribute/get-help/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/contribute/get-help/</guid>
      <description>
        
        
        &lt;!--
Licensed under the Apache License, Version 2.0 (the &#34;License&#34;);
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an &#34;AS IS&#34; BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
--&gt;
&lt;h1 id=&#34;get-help-contributing&#34;&gt;Get Help Contributing&lt;/h1&gt;
&lt;p&gt;If you have any trouble contributing, don&amp;rsquo;t give up!&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Check the &lt;a href=&#34;https://cwiki.apache.org/confluence/display/BEAM/Contributor+FAQ&#34; target=&#34;_blank&#34;&gt;FAQ on our developers&amp;rsquo; wiki &lt;img src=&#34;/images/external-link-icon.png&#34; alt=&#34;External link to Beam developers&#39; Wiki&#34; width=&#34;14px&#34; height=&#34;14px&#34;&gt;&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Send email to the Beam developer community on &lt;a href=&#34;/community/contact-us&#34;&gt;dev@beam.apache.org&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Find someone to chat with in realtime at &lt;a href=&#34;/community/contact-us&#34;&gt;#beam on Slack&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;

      </description>
    </item>
    
    <item>
      <title>Contribute: Jira Priorities</title>
      <link>/contribute/jira-priorities/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/contribute/jira-priorities/</guid>
      <description>
        
        
        &lt;!--
Licensed under the Apache License, Version 2.0 (the &#34;License&#34;);
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an &#34;AS IS&#34; BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
--&gt;
&lt;h1 id=&#34;jira-priorities&#34;&gt;Jira Priorities&lt;/h1&gt;
&lt;h2 id=&#34;blocker--p0&#34;&gt;Blocker / P0&lt;/h2&gt;
&lt;p&gt;&lt;em&gt;Expectation&lt;/em&gt;: Drop everything else and work continuously to resolve. Note that
the term &amp;ldquo;blocker&amp;rdquo; does not refer to blocking releases. A P0 issue is more
urgent than simply blocking the next release.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Example Blocker/P0 issues&lt;/em&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;the build is broken, halting all development&lt;/li&gt;
&lt;li&gt;the website is down&lt;/li&gt;
&lt;li&gt;a vulnerability requires a point release ASAP&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;critical--p1&#34;&gt;Critical / P1&lt;/h2&gt;
&lt;p&gt;&lt;em&gt;Expectation&lt;/em&gt;: Continuous status updates. Critical bugs should not be
unassigned. Most critical bugs should block release.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Example Critical/P1 issues&lt;/em&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;data loss error&lt;/li&gt;
&lt;li&gt;important component is nonfunctional for important use cases&lt;/li&gt;
&lt;li&gt;major performance regression&lt;/li&gt;
&lt;li&gt;failing postcommit test&lt;/li&gt;
&lt;li&gt;flaky test&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;major--p2&#34;&gt;Major / P2&lt;/h2&gt;
&lt;p&gt;&lt;em&gt;Expectation&lt;/em&gt;: Most tickets fall into this priority. These can be planned and
executed by anyone who is interested. No special urgency is associated.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Example Major/P2 issues&lt;/em&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;typical feature request&lt;/li&gt;
&lt;li&gt;bug that affects some use cases but don&amp;rsquo;t make a component nonfunctional&lt;/li&gt;
&lt;li&gt;ignored (&amp;ldquo;sickbayed&amp;rdquo;) test&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;minor--p3&#34;&gt;Minor / P3&lt;/h2&gt;
&lt;p&gt;&lt;em&gt;Expectation&lt;/em&gt;: Nice-to-have improvements.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Example Minor/P3 issues&lt;/em&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;feature request that is nice-to-have&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;trivial--p4&#34;&gt;Trivial / P4&lt;/h2&gt;
&lt;p&gt;&lt;em&gt;Expectation&lt;/em&gt;: Nice-to-have improvements that are also very small and easy.
Usually it is quicker to just fix them than to file a bug, but the Jira
can be referenced by a pull request and shows up in release notes.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Example Trivial/P4 issues&lt;/em&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;spelling errors in comments or code&lt;/li&gt;
&lt;/ul&gt;

      </description>
    </item>
    
    <item>
      <title>Contribute: Post-commit policies details</title>
      <link>/contribute/postcommits-policies-details/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/contribute/postcommits-policies-details/</guid>
      <description>
        
        
        &lt;!--
Licensed under the Apache License, Version 2.0 (the &#34;License&#34;);
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an &#34;AS IS&#34; BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
--&gt;
&lt;h1 id=&#34;post-commit-policies-details&#34;&gt;Post-commit policies details&lt;/h1&gt;
&lt;p&gt;A post-commit test failure means that there is a bug in the code. The longer the
bug exists, the harder it is to fix it due to ongoing code contributions. As a
result, we want to fix bugs quickly. The Beam community&amp;rsquo;s post-commit test
policies help keep our code and test results in a good state.&lt;/p&gt;
&lt;h2 id=&#34;rollback_first&#34;&gt;Rollback first&lt;/h2&gt;
&lt;p&gt;Beam uses a &amp;ldquo;rollback first&amp;rdquo; approach: the first action to resolve a test
failure is to rollback the culprit code change. The two main benefits of this
approach are short implementation time and high reliability. When we rollback
first, we quickly return to a previously verified good state.&lt;/p&gt;
&lt;p&gt;At a high level, this approach consists of the following steps:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Revert the culprit commit.&lt;/li&gt;
&lt;li&gt;Re-run the post-commit tests to verify the tests pass.&lt;/li&gt;
&lt;li&gt;Push the revert commit.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;For background on this policy, see the
&lt;a href=&#34;https://lists.apache.org/thread.html/3bb4aa777751da2e2d7e22666aa6a2e18ae31891cb09d91718b75e74@%3Cdev.beam.apache.org%3E&#34;&gt;mailing list thread&lt;/a&gt;
and &lt;a href=&#34;https://docs.google.com/document/d/1sczGwnCvdHiboVajGVdnZL0rfnr7ViXXAebBAf_uQME/edit&#34;&gt;design doc&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&#34;failing_test_is_critical_bug&#34;&gt;A failing test is a critical/P1 issue&lt;/h2&gt;
&lt;p&gt;It is difficult to properly verify new changes made on top of buggy code. In
some cases, adding additional code can make the problem worse. To avoid this
situation, fixing failing tests is our highest priority.&lt;/p&gt;
&lt;h2 id=&#34;flake_is_failing&#34;&gt;A flaky test is a critical/P1 issue&lt;/h2&gt;
&lt;p&gt;Flaky tests are considered failing tests, and fixing a flaky test is a
critical/P1 issue.&lt;/p&gt;
&lt;p&gt;Flaky tests are tests that randomly succeed or fail while using the same code
version. Flaky test failures are one of the most dangerous types of failures
because they are easy to ignore &amp;ndash; another run of the flaky test might pass
successfully. However, these failures can hide real bugs and flaky tests often
slowly accumulate. Someone must repeatedly triage the failures, and flaky tests
are often the hardest ones to fix.&lt;/p&gt;
&lt;p&gt;Flaky tests do not provide a reliable quality signal, so it is important to
quickly fix the flakiness. If a fix will take awhile to implement, it is safer
to disable the test until the fix is ready.&lt;/p&gt;
&lt;p&gt;Martin Fowler has a good &lt;a href=&#34;https://martinfowler.com/articles/nonDeterminism.html&#34;&gt;article&lt;/a&gt;
about non-determinism in tests.&lt;/p&gt;
&lt;h2 id=&#34;remove_flake&#34;&gt;Flaky tests must be fixed or removed&lt;/h2&gt;
&lt;p&gt;Flaky tests do not provide a reliable quality signal, which has a harmful effect
on all tests and can lead to a loss of trust in our test suite. As a result,
contributors might start to ignore test failures.&lt;/p&gt;
&lt;p&gt;We want everyone to trust our tests, so it is important to diligently fix all
flaky tests. If it is not possible to fix a flaky test, we must remove the test.&lt;/p&gt;
&lt;h2 id=&#34;precommit_for_postcommit&#34;&gt;Add new pre-commit tests as part of a post-commit fix&lt;/h2&gt;
&lt;p&gt;Post-commit tests are an important fail-safe, but we want to fail fast. Failing
fast means that we want to detect bugs in pre-commit tests, and &lt;em&gt;not&lt;/em&gt; in
post-commit tests.&lt;/p&gt;
&lt;p&gt;When you implement a fix for a post-commit test failure, add a new pre-commit
test that will detect similar failures in the future. For example, you can
implement a new unit test that covers a problematic code branch.&lt;/p&gt;
&lt;h2 id=&#34;inform_community&#34;&gt;Inform the community if Beam breaks downstream projects&lt;/h2&gt;
&lt;p&gt;There are multiple external projects depending on Beam which contain tests that are
outside of Beam repository. For example, Dataflow, Samza runner, and IBM Streams.&lt;/p&gt;
&lt;p&gt;When an external project encounters an issue caused by (a PR) in Beam
and, in consequence, requests for a change in the Beam repository,
the first thing is to create a JIRA entry that addresses
the following three questions:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Descriptions on what the issue is.&lt;/li&gt;
&lt;li&gt;Does a revert fix it? (Or it is supposed to be fixed differently)&lt;/li&gt;
&lt;li&gt;Is a revert the best way to fix it?&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;It is encouraged to bring the discussion to the dev mailing list as well.
Ideally, after the incident, we prefer to have discussions regarding
whether we should extend tests in Beam repository, with the goal of
catching similar issues early in the future.&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>Contribute: Post-commit tests policies</title>
      <link>/contribute/postcommits-policies/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/contribute/postcommits-policies/</guid>
      <description>
        
        
        &lt;!--
Licensed under the Apache License, Version 2.0 (the &#34;License&#34;);
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an &#34;AS IS&#34; BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
--&gt;
&lt;h1 id=&#34;post-commit-tests-policies&#34;&gt;Post-commit tests policies&lt;/h1&gt;
&lt;p&gt;Post-commit tests validate that Beam works correctly in a live environment. The
tests also catch errors that are hard to predict in the design and
implementation stages.&lt;/p&gt;
&lt;p&gt;Even though post-commit tests run after the code is merged into the repository,
it is important that the tests pass reliably. Jenkins executes post-commit tests
against the HEAD of the &lt;code&gt;master&lt;/code&gt; branch. If post-commit tests fail, there is a
problem with the HEAD build. In addition, post-commit tests are time consuming
to run, and it is often hard to triage test failures.&lt;/p&gt;
&lt;h2 id=&#34;policies&#34;&gt;Policies&lt;/h2&gt;
&lt;p&gt;To ensure that Beam&amp;rsquo;s post-commit tests are reliable and healthy, the Beam
community follows these post-commit test policies:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;/contribute/postcommits-policies-details/index.html#rollback_first&#34;&gt;Rollback first&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;/contribute/postcommits-policies-details/index.html#failing_test_is_critical_bug&#34;&gt;A failing test is a critical bug&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;/contribute/postcommits-policies-details/index.html#flake_is_failing&#34;&gt;A flaky test is a critical bug&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;/contribute/postcommits-policies-details/index.html#remove_flake&#34;&gt;Flaky tests must either be fixed or removed&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;/contribute/postcommits-policies-details/index.html#precommit_for_postcommit&#34;&gt;Fixes for post-commit failures should include a corresponding new pre-commit test&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;post-commit-test-failure-scenarios&#34;&gt;Post-commit test failure scenarios&lt;/h2&gt;
&lt;p&gt;When a post-commit test fails, follow the provided steps for your situation.&lt;/p&gt;
&lt;h3 id=&#34;found-failing-test&#34;&gt;I found a test failure&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;Create a &lt;a href=&#34;https://s.apache.org/beam-test-failure&#34;&gt;JIRA issue&lt;/a&gt; and assign it to yourself.&lt;/li&gt;
&lt;li&gt;Do high level triage of the failure.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;/contribute/postcommits-guides/index.html#find_specialist&#34;&gt;Assign the JIRA issue to a relevant person&lt;/a&gt;.&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;assigned-failing-test&#34;&gt;I was assigned a JIRA issue for a test failure&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;/contribute/postcommits-guides/index.html#rollback&#34;&gt;Rollback the culprit change&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;If you determine that rollback will take longer than 8 hours, &lt;a href=&#34;/contribute/postcommits-guides/index.html#disabling&#34;&gt;disable the
test temporarily&lt;/a&gt; while you rollback or create a
fix.&lt;/li&gt;
&lt;/ol&gt;
&lt;blockquote&gt;
&lt;p&gt;Note: Rollback is always the first course of action. If a fix is trivial,
open a pull request with the proposed fix while doing rollback.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;pr-rolled-back&#34;&gt;My change was rolled back due to a test failure&lt;/h3&gt;
&lt;p&gt;After rollback there is time for deeper investigation. Start by looking at the
JIRA issue to see the background information for the rollback. These scenarios
are all common:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Your change contained a bug.&lt;/li&gt;
&lt;li&gt;Your change exposed an existing bug.&lt;/li&gt;
&lt;li&gt;Your change exposed a bad test (flaky, overspecified, etc).&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;em&gt;These are all valid reasons for rollback. Maintaining clear signal is the
highest priority.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;The high level steps are the same:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Create a fix and re-run the post-commit tests.&lt;/li&gt;
&lt;li&gt;Implement new pre-commit tests that will catch similar failures
before future code is merged into the repository.&lt;/li&gt;
&lt;li&gt;Open a new PR that contains your fix and the new pre-commit tests.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;If the bug is not in your code, here is how to &amp;ldquo;create a fix&amp;rdquo;:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;File a ticket for the existing bug, if it does not already exist.
Remember that
&lt;a href=&#34;/contribute/postcommits-policies-details/index.html#flake_is_failing&#34;&gt;a flaky test is a critical bug&lt;/a&gt;. Other
bad tests are similar: they may fail for arbitrary reasons having nothing
to do with what is being tested, making our signal unreliable.&lt;/li&gt;
&lt;li&gt;Mark the problematic test to be skipped, with a link to the JIRA ticket.&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;useful-links&#34;&gt;Useful links&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://cwiki.apache.org/confluence/display/BEAM/Contribution+Testing+Guide#ContributionTestingGuide-Bestpracticesforwritingtests&#34;&gt;Best practices for writing tests&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;references&#34;&gt;References&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;https://lists.apache.org/thread.html/3bb4aa777751da2e2d7e22666aa6a2e18ae31891cb09d91718b75e74@%3Cdev.beam.apache.org%3E&#34;&gt;Keeping post-commit tests green&lt;/a&gt;
mailing list proposal thread.&lt;/li&gt;
&lt;/ol&gt;

      </description>
    </item>
    
    <item>
      <title>Contribute: Post-commit tests processes guides</title>
      <link>/contribute/postcommits-guides/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/contribute/postcommits-guides/</guid>
      <description>
        
        
        &lt;!--
Licensed under the Apache License, Version 2.0 (the &#34;License&#34;);
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an &#34;AS IS&#34; BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
--&gt;
&lt;h1 id=&#34;post-commit-test-task-guides&#34;&gt;Post-commit test task guides&lt;/h1&gt;
&lt;p&gt;These guides provide steps for common post-commit test failure tasks.&lt;/p&gt;
&lt;h2 id=&#34;find_specialist&#34;&gt;Finding someone to triage a post-commit test failure&lt;/h2&gt;
&lt;p&gt;To find the proper person to triage a test failure, you can use these
suggestions:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;If you can triage it yourself, go for it.&lt;/li&gt;
&lt;li&gt;Look at the GitHub blame for the files with problematic code.&lt;/li&gt;
&lt;li&gt;Ask in the &lt;a href=&#34;https://the-asf.slack.com/messages/C9H0YNP3P/apps/A0F7VRFKN/&#34;&gt;Beam Slack chat&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Write to the dev list: &lt;a href=&#34;mailto:dev@beam.apache.org&#34;&gt;dev@beam.apache.org&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;rollback&#34;&gt;Rolling back a commit&lt;/h2&gt;
&lt;p&gt;Rolling back is usually the fastest way to fix a failing test.  However it is
is often inconvenient for the original author. To help the author fix the
issue, follow these steps when you rollback someone&amp;rsquo;s change.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Rollback the PR (or individual commit of the PR). The rollback PR should be green except in rare cases.&lt;/li&gt;
&lt;li&gt;Create a JIRA issue that contains the following information:
&lt;ul&gt;
&lt;li&gt;the reason for the rollback&lt;/li&gt;
&lt;li&gt;a link to the test failure&amp;rsquo;s JIRA issue&lt;/li&gt;
&lt;li&gt;triage information&lt;/li&gt;
&lt;li&gt;any other relevant details&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Assign the new JIRA issue to the original PR author.&lt;/li&gt;
&lt;li&gt;Consider re-opening the JIRA issue associated with the original PR (if
there is one).&lt;/li&gt;
&lt;li&gt;Send a notification email with information about the rollback, links to the
original PR and the rollback PR, and the reasons for the rollback to:
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;mailto:dev@beam.apache.org&#34;&gt;dev@beam.apache.org&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;the original PR author and the committer of the PR&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Close the test failure JIRA issue. Your work is done here!&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;disabling&#34;&gt;Disabling a failing test&lt;/h2&gt;
&lt;p&gt;If a test fails, our first priority is to rollback the problematic code and fix
the issue. However, if both: rollback and fix will take awhile to implement, it
is safer to temporarily disable the test until the fix is ready.&lt;/p&gt;
&lt;p&gt;Use caution when deciding to disable a test. When tests are disabled,
contributors are no longer developing on top of fully tested code. If you decide
to disable a test, use the following guidelines:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Notify the &lt;a href=&#34;mailto:dev@beam.apache.org&#34;&gt;dev@beam.apache.org&lt;/a&gt; mailing list. Describe the problem and let
everyone know which test you are disabling.&lt;/li&gt;
&lt;li&gt;Implement the fix and get the test back online as soon as possible.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;While the test is disabled, contributors should not push code to the failing
test&amp;rsquo;s coverage area. The code area is not properly tested until you fix the
test.&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>Contribute: Pre-commit Slowness Triage Guide</title>
      <link>/contribute/precommit-triage-guide/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/contribute/precommit-triage-guide/</guid>
      <description>
        
        
        &lt;!--
Licensed under the Apache License, Version 2.0 (the &#34;License&#34;);
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an &#34;AS IS&#34; BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
--&gt;
&lt;h1 id=&#34;pre-commit-slowness-triage-guide&#34;&gt;Pre-commit Slowness Triage Guide&lt;/h1&gt;
&lt;p&gt;Beam pre-commit jobs are suites of tests run automatically on Jenkins build
machines for each pull request (PR) submitted to
&lt;a href=&#34;https://github.com/apache/beam&#34;&gt;apache/beam&lt;/a&gt;. For more information and the
difference between pre-commits and post-commits, see
&lt;a href=&#34;https://cwiki.apache.org/confluence/display/BEAM/Contribution+Testing+Guide&#34;&gt;testing&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&#34;what-are-fast-pre-commits&#34;&gt;What are fast pre-commits?&lt;/h2&gt;
&lt;p&gt;Pre-commit tests are required to pass before a pull request (PR) is merged.
When these tests are slow they slow down Beam&amp;rsquo;s development process.
The aim is to have 95% of pre-commit jobs complete within 30 minutes
(failing or passing).&lt;/p&gt;
&lt;p&gt;Technically, the 95th percentile of running time should be below 30 minutes over
the past 4 weeks, where running time is the duration of time the job spends in
the Jenkins queue + the actual time it spends running.&lt;/p&gt;
&lt;h2 id=&#34;determining-slowness&#34;&gt;Determining Slowness&lt;/h2&gt;
&lt;p&gt;There are two main signs of slowness:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Pre-commit jobs are timing out after 30 minutes. This can be determined from
the console log of a job.&lt;/li&gt;
&lt;li&gt;Pre-commits aren&amp;rsquo;t timing out, but the total wait time for pre-commit results
is &amp;gt;30m.&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;pre-commit-dashboard&#34;&gt;Pre-commit Dashboard&lt;/h3&gt;
&lt;p&gt;The Beam Community Metrics site contains a &lt;a href=&#34;http://104.154.241.245/d/_TNndF2iz/pre-commit-tests&#34;&gt;Pre-Commit
Tests&lt;/a&gt; dashboard showing
job timing trends. You can modify the time window (defaults to 7 days) or filter
down to a specific test suite by clicking on it.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/images/precommit_dashboard.png&#34; alt=&#34;example pre-commit duration dashboard&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;triage-process&#34;&gt;Triage Process&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;https://issues.apache.org/jira/issues/?jql=project%20%3D%20BEAM%20AND%20status%20in%20(Open%2C%20%22In%20Progress%22%2C%20Reopened)%20AND%20labels%20%3D%20precommit%20ORDER%20BY%20priority%20DESC%2C%20updated%20DESC&#34;&gt;Search for existing
issues&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Create a new issue if needed: &lt;a href=&#34;https://issues.apache.org/jira/issues&#34;&gt;Apache
JIRA&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;Project: Beam&lt;/li&gt;
&lt;li&gt;Components: testing, anything else relevant&lt;/li&gt;
&lt;li&gt;Label: precommit&lt;/li&gt;
&lt;li&gt;Reference this page in the description.&lt;/li&gt;
&lt;/ul&gt;
&lt;ol&gt;
&lt;li&gt;Determine where the slowness is coming from and identify issues. Open
additional issues if needed (such as for multiple issues).&lt;/li&gt;
&lt;li&gt;Assign the issue as appropriate, e.g., to the test&amp;rsquo;s or PR&amp;rsquo;s author.&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;resolution&#34;&gt;Resolution&lt;/h2&gt;
&lt;p&gt;It is important that we quickly fix slow pre-commit tests. See &lt;a href=&#34;/contribute/precommit-policies/&#34;&gt;pre-commit test
policies&lt;/a&gt; for details.&lt;/p&gt;
&lt;h2 id=&#34;possible-causes-and-solutions&#34;&gt;Possible Causes and Solutions&lt;/h2&gt;
&lt;p&gt;This section lists some starting points for fixing pre-commit slowness.&lt;/p&gt;
&lt;h3 id=&#34;resource-exhaustion&#34;&gt;Resource Exhaustion&lt;/h3&gt;
&lt;p&gt;Have a look at the graphs in the Jupyter notebook. Does the rise in total
duration match the rise in queuing time? If so, the slowness might be unrelated
to this specific pre-commit job.&lt;/p&gt;
&lt;p&gt;Example of when total and queuing durations rise and fall together (mostly):
&lt;img src=&#34;/images/precommit_graph_queuing_time.png&#34; alt=&#34;graph of pre-commit times&#34;&gt;&lt;/p&gt;
&lt;p&gt;Since Jenkins machines are a limited resource, other jobs can
affect pre-commit queueing times. Try to figure out if other jobs have been
recently slower, increased in frequency, or new jobs have been introduced.&lt;/p&gt;
&lt;p&gt;Another option is to look at adding more Jenkins machines.&lt;/p&gt;
&lt;h3 id=&#34;slow-individual-tests&#34;&gt;Slow individual tests&lt;/h3&gt;
&lt;p&gt;Sometimes a pre-commit job is slowed down due to one or more tests. One way of
determining if this is the case is by looking at individual test timings.&lt;/p&gt;
&lt;p&gt;Where to find individual test timings:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Look at the &lt;code&gt;Gradle Build Scan&lt;/code&gt; link on the pre-commit job&amp;rsquo;s Jenkins page.
This page will contain individual test timings for Java tests only (2018-08).&lt;/li&gt;
&lt;li&gt;Look at the &lt;code&gt;Test Result&lt;/code&gt; link on the pre-commit job&amp;rsquo;s Jenkins page. This
should be available for Java and Python tests (2018-08).&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Sometimes tests can be made faster by refactoring. A test that spends a lot of
time waiting (such as an integration test) could be made to run concurrently with
the other tests.&lt;/p&gt;
&lt;p&gt;If a test is determined to be too slow to be part of pre-commit tests, it should
be removed from pre-commit and placed in post-commit instead. In addition,
ensure that the code covered by the removed test is &lt;a href=&#34;/contribute/postcommits-policies-details/#precommit_for_postcommit&#34;&gt;covered by a unit test in
pre-commit&lt;/a&gt;.&lt;/p&gt;
&lt;h3 id=&#34;slow-integration-tests&#34;&gt;Slow integration tests&lt;/h3&gt;
&lt;p&gt;Integration test slowdowns may be caused by dependent services.&lt;/p&gt;
&lt;h2 id=&#34;references&#34;&gt;References&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://docs.google.com/document/d/1udtvggmS2LTMmdwjEtZCcUQy6aQAiYTI3OrTP8CLfJM/edit?usp=sharing&#34;&gt;Beam Fast Precommits design doc&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

      </description>
    </item>
    
    <item>
      <title>Contribute: Pre-commit Test Policies</title>
      <link>/contribute/precommit-policies/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/contribute/precommit-policies/</guid>
      <description>
        
        
        &lt;!--
Licensed under the Apache License, Version 2.0 (the &#34;License&#34;);
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an &#34;AS IS&#34; BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
--&gt;
&lt;h1 id=&#34;pre-commit-test-policies&#34;&gt;Pre-commit test policies&lt;/h1&gt;
&lt;h2 id=&#34;definitions&#34;&gt;Definitions&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Pre-commit test - Any single test in a pre-commit test suite.&lt;/li&gt;
&lt;li&gt;Pre-commit test suite - A collection of pre-commit tests that have a common
denominator. A test suite runs in a single Jenkins job. Currently, suites are
grouped by SDK languages, e.g., Python, Java, and Go.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;policies&#34;&gt;Policies&lt;/h2&gt;
&lt;h3 id=&#34;pull-requests&#34;&gt;Pull Requests&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;A PR must pass pre-commit tests before being committed to the main Beam repo.
&lt;ul&gt;
&lt;li&gt;The relevant pre-commit test suites are automatically launched according to
PR contents.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;problems&#34;&gt;Problems&lt;/h3&gt;
&lt;h4 id=&#34;breakage&#34;&gt;Breakage&lt;/h4&gt;
&lt;p&gt;Breakage is when one or more tests in a pre-commit test suite fails or
is flaky (occasionally fails).&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Breakages should be fixed within 8 hours.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;slowness&#34;&gt;Slowness&lt;/h4&gt;
&lt;p&gt;Slowness is when the total time to run a pre-commit suite exceeds 30 minutes*,
including the time the job spends in the Jenkins queue.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Slowness should be fixed within 24 hours.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;* See the &lt;a href=&#34;/contribute/precommit-triage-guide/&#34;&gt;Pre-commit Slowness Triage
Guide&lt;/a&gt; for a precise definition of slowness
and for information on dealing with slowness.&lt;/p&gt;
&lt;h3 id=&#34;problem-resolution&#34;&gt;Problem Resolution&lt;/h3&gt;
&lt;p&gt;For any problem, the options are, one of:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Roll back the culprit PR.&lt;/li&gt;
&lt;li&gt;Roll out a fix within 24 hours.&lt;/li&gt;
&lt;li&gt;Disable the slow test or feature temporarily (make sure there&amp;rsquo;s a tracking
issue to re-enable it).&lt;/li&gt;
&lt;/ul&gt;

      </description>
    </item>
    
    <item>
      <title>Contribute: PTransform Style Guide</title>
      <link>/contribute/ptransform-style-guide/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/contribute/ptransform-style-guide/</guid>
      <description>
        
        
        &lt;!--
Licensed under the Apache License, Version 2.0 (the &#34;License&#34;);
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an &#34;AS IS&#34; BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
--&gt;
&lt;h1 id=&#34;ptransform-style-guide&#34;&gt;PTransform Style Guide&lt;/h1&gt;
&lt;p&gt;&lt;em&gt;A style guide for writers of new reusable PTransforms.&lt;/em&gt;&lt;/p&gt;


&lt;nav id=&#34;TableOfContents&#34;&gt;
  &lt;ul&gt;
    &lt;li&gt;&lt;a href=&#34;#language-neutral-considerations&#34;&gt;Language-neutral considerations&lt;/a&gt;
      &lt;ul&gt;
        &lt;li&gt;&lt;a href=&#34;#consistency&#34;&gt;Consistency&lt;/a&gt;&lt;/li&gt;
        &lt;li&gt;&lt;a href=&#34;#exposing-a-ptransform-vs-something-else&#34;&gt;Exposing a PTransform vs. something else&lt;/a&gt;&lt;/li&gt;
        &lt;li&gt;&lt;a href=&#34;#naming&#34;&gt;Naming&lt;/a&gt;&lt;/li&gt;
        &lt;li&gt;&lt;a href=&#34;#configuration&#34;&gt;Configuration&lt;/a&gt;
          &lt;ul&gt;
            &lt;li&gt;&lt;a href=&#34;#what-goes-into-configuration-vs-input-collection&#34;&gt;What goes into configuration vs. input collection&lt;/a&gt;&lt;/li&gt;
            &lt;li&gt;&lt;a href=&#34;#what-parameters-to-expose&#34;&gt;What parameters to expose&lt;/a&gt;&lt;/li&gt;
          &lt;/ul&gt;
        &lt;/li&gt;
        &lt;li&gt;&lt;a href=&#34;#error-handling&#34;&gt;Error handling&lt;/a&gt;
          &lt;ul&gt;
            &lt;li&gt;&lt;a href=&#34;#transform-configuration-errors&#34;&gt;Transform configuration errors&lt;/a&gt;&lt;/li&gt;
            &lt;li&gt;&lt;a href=&#34;#runtime-errors-and-data-consistency&#34;&gt;Runtime errors and data consistency&lt;/a&gt;&lt;/li&gt;
          &lt;/ul&gt;
        &lt;/li&gt;
        &lt;li&gt;&lt;a href=&#34;#performance&#34;&gt;Performance&lt;/a&gt;&lt;/li&gt;
        &lt;li&gt;&lt;a href=&#34;#documentation&#34;&gt;Documentation&lt;/a&gt;&lt;/li&gt;
        &lt;li&gt;&lt;a href=&#34;#logging&#34;&gt;Logging&lt;/a&gt;&lt;/li&gt;
        &lt;li&gt;&lt;a href=&#34;#testing&#34;&gt;Testing&lt;/a&gt;
          &lt;ul&gt;
            &lt;li&gt;&lt;a href=&#34;#testing-the-transforms-run-time-behavior&#34;&gt;Testing the transform&amp;rsquo;s run-time behavior&lt;/a&gt;&lt;/li&gt;
            &lt;li&gt;&lt;a href=&#34;#testing-transform-construction-and-validation&#34;&gt;Testing transform construction and validation&lt;/a&gt;&lt;/li&gt;
          &lt;/ul&gt;
        &lt;/li&gt;
        &lt;li&gt;&lt;a href=&#34;#compatibility&#34;&gt;Compatibility&lt;/a&gt;&lt;/li&gt;
      &lt;/ul&gt;
    &lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;#java-specific-considerations&#34;&gt;Java specific considerations&lt;/a&gt;
      &lt;ul&gt;
        &lt;li&gt;&lt;a href=&#34;#api&#34;&gt;API&lt;/a&gt;
          &lt;ul&gt;
            &lt;li&gt;&lt;a href=&#34;#choosing-types-of-input-and-output-pcollections&#34;&gt;Choosing types of input and output PCollection&amp;rsquo;s&lt;/a&gt;&lt;/li&gt;
            &lt;li&gt;&lt;a href=&#34;#transforms-with-multiple-output-collections&#34;&gt;Transforms with multiple output collections&lt;/a&gt;&lt;/li&gt;
            &lt;li&gt;&lt;a href=&#34;#fluent-builders-for-configuration&#34;&gt;Fluent builders for configuration&lt;/a&gt;&lt;/li&gt;
            &lt;li&gt;&lt;a href=&#34;#transforms-with-type-parameters&#34;&gt;Transforms with type parameters&lt;/a&gt;&lt;/li&gt;
            &lt;li&gt;&lt;a href=&#34;#injecting-user-specified-behavior&#34;&gt;Injecting user-specified behavior&lt;/a&gt;&lt;/li&gt;
            &lt;li&gt;&lt;a href=&#34;#packaging-a-family-of-transforms&#34;&gt;Packaging a family of transforms&lt;/a&gt;&lt;/li&gt;
          &lt;/ul&gt;
        &lt;/li&gt;
        &lt;li&gt;&lt;a href=&#34;#behavior&#34;&gt;Behavior&lt;/a&gt;
          &lt;ul&gt;
            &lt;li&gt;&lt;a href=&#34;#immutability&#34;&gt;Immutability&lt;/a&gt;&lt;/li&gt;
            &lt;li&gt;&lt;a href=&#34;#serialization&#34;&gt;Serialization&lt;/a&gt;&lt;/li&gt;
            &lt;li&gt;&lt;a href=&#34;#validation&#34;&gt;Validation&lt;/a&gt;&lt;/li&gt;
            &lt;li&gt;&lt;a href=&#34;#coders&#34;&gt;Coders&lt;/a&gt;&lt;/li&gt;
          &lt;/ul&gt;
        &lt;/li&gt;
      &lt;/ul&gt;
    &lt;/li&gt;
  &lt;/ul&gt;
&lt;/nav&gt;

&lt;h2 id=&#34;language-neutral-considerations&#34;&gt;Language-neutral considerations&lt;/h2&gt;
&lt;h3 id=&#34;consistency&#34;&gt;Consistency&lt;/h3&gt;
&lt;p&gt;Be consistent with prior art:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Please read the &lt;a href=&#34;/contribute/&#34;&gt;contribution guide&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;If there is already a similar transform in some SDK, make the API of your transform similar, so that users&amp;rsquo; experience with one of them will transfer to the other. This applies to transforms in the same-language SDK and different-language SDKs.
&lt;em&gt;Exception:&lt;/em&gt; pre-existing transforms that clearly violate the current style guide for the sole reason that they were developed before this guide was ratified. In this case, the style guide takes priority over consistency with the existing transform.&lt;/li&gt;
&lt;li&gt;When there is no existing similar transform, stay within what is idiomatic within your language of choice (e.g. Java or Python).&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;exposing-a-ptransform-vs-something-else&#34;&gt;Exposing a PTransform vs. something else&lt;/h3&gt;
&lt;p&gt;So you want to develop a library that people will use in their Beam pipelines - a connector to a third-party system, a machine learning algorithm, etc. How should you expose it?&lt;/p&gt;
&lt;p&gt;Do:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Expose every major data-parallel task accomplished by your library as a composite &lt;code&gt;PTransform&lt;/code&gt;. This allows the structure of the transform to evolve transparently to the code that uses it: e.g. something that started as a &lt;code&gt;ParDo&lt;/code&gt; can become a more complex transform over time.&lt;/li&gt;
&lt;li&gt;Expose large, non-trivial, reusable sequential bits of the transform&amp;rsquo;s code, which others might want to reuse in ways you haven&amp;rsquo;t anticipated, as a regular function or class library. The transform should simply wire this logic together. As a side benefit, you can unit-test those functions and classes independently.
&lt;em&gt;Example:&lt;/em&gt; when developing a transform that parses files in a custom data format, expose the format parser as a library; likewise for a transform that implements a complex machine learning algorithm, etc.&lt;/li&gt;
&lt;li&gt;In some cases, this may include Beam-specific classes, such as &lt;code&gt;CombineFn&lt;/code&gt;, or nontrivial &lt;code&gt;DoFn&lt;/code&gt;s (those that are more than just a single &lt;code&gt;@ProcessElement&lt;/code&gt; method).
As a rule of thumb: expose these if you anticipate that the full packaged &lt;code&gt;PTransform&lt;/code&gt; may be insufficient for a user&amp;rsquo;s needs and the user may want to reuse the lower-level primitive.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Do not:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Do not expose the exact way the transform is internally structured. E.g.: the public API surface of your library &lt;em&gt;usually&lt;/em&gt; (with exception of the last bullet above) should not expose &lt;code&gt;DoFn&lt;/code&gt;, concrete &lt;code&gt;Source&lt;/code&gt; or &lt;code&gt;Sink&lt;/code&gt; classes, etc., in order to avoid presenting users with a confusing choice between applying the &lt;code&gt;PTransform&lt;/code&gt; or using the &lt;code&gt;DoFn&lt;/code&gt;/&lt;code&gt;Source&lt;/code&gt;/&lt;code&gt;Sink&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;naming&#34;&gt;Naming&lt;/h3&gt;
&lt;p&gt;Do:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Respect language-specific naming conventions, e.g. name classes in &lt;code&gt;PascalCase&lt;/code&gt; in Java and Python, functions in &lt;code&gt;camelCase&lt;/code&gt; in Java but &lt;code&gt;snake_case&lt;/code&gt; in Python, etc.&lt;/li&gt;
&lt;li&gt;Name factory functions so that either the function name is a verb, or referring to the transform reads like a verb: e.g. &lt;code&gt;MongoDbIO.read()&lt;/code&gt;, &lt;code&gt;Flatten.iterables()&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;In typed languages, name &lt;code&gt;PTransform&lt;/code&gt; classes also like verbs (e.g.: &lt;code&gt;MongoDbIO.Read&lt;/code&gt;, &lt;code&gt;Flatten.Iterables&lt;/code&gt;).&lt;/li&gt;
&lt;li&gt;Name families of transforms for interacting with a storage system using the word &amp;ldquo;IO&amp;rdquo;: &lt;code&gt;MongoDbIO&lt;/code&gt;, &lt;code&gt;JdbcIO&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Do not:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Do not use words &lt;code&gt;transform&lt;/code&gt;, &lt;code&gt;source&lt;/code&gt;, &lt;code&gt;sink&lt;/code&gt;, &lt;code&gt;reader&lt;/code&gt;, &lt;code&gt;writer&lt;/code&gt;, &lt;code&gt;bound&lt;/code&gt;, &lt;code&gt;unbound&lt;/code&gt; in &lt;code&gt;PTransform&lt;/code&gt; class names (note: &lt;code&gt;bounded&lt;/code&gt; and &lt;code&gt;unbounded&lt;/code&gt; are fine when referring to whether a &lt;code&gt;PCollection&lt;/code&gt; is bounded or unbounded): these words are redundant, confusing, obsolete, or name an existing different concept in the SDK.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;configuration&#34;&gt;Configuration&lt;/h3&gt;
&lt;h4 id=&#34;what-goes-into-configuration-vs-input-collection&#34;&gt;What goes into configuration vs. input collection&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Into input &lt;code&gt;PCollection&lt;/code&gt;:&lt;/strong&gt; anything of which there may be a very large number of instances (if there can be &amp;gt;1000 of it, it should be in a &lt;code&gt;PCollection&lt;/code&gt;), or which is potentially not known at pipeline construction time.
E.g.: records to be processed or written to a third-party system; filenames to be read.
Exception: sometimes Beam APIs require things to be known at pipeline construction time - e.g. the &lt;code&gt;Bounded&lt;/code&gt;/&lt;code&gt;UnboundedSource&lt;/code&gt; API. If you absolutely have to use such an API, its input can of course go only into transform configuration.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Into transform configuration:&lt;/strong&gt; what is constant throughout the transform (including &lt;code&gt;ValueProvider&lt;/code&gt;s) and does not depend on the contents of the transform&amp;rsquo;s input &lt;code&gt;PCollection&lt;/code&gt;s.
E.g.: a database query or connection string; credentials; a user-specified callback; a tuning parameter.
One advantage of putting a parameter into transform configuration is, it can be validated at pipeline construction time.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;what-parameters-to-expose&#34;&gt;What parameters to expose&lt;/h4&gt;
&lt;p&gt;Do:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Expose&lt;/strong&gt; parameters that are necessary to compute the output.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Do not:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Do not expose&lt;/strong&gt; tuning knobs, such as batch sizes, connection pool sizes, unless it&amp;rsquo;s impossible to automatically supply or compute a good-enough value (i.e., unless you can imagine a reasonable person reporting a bug about the absence of this knob).&lt;/li&gt;
&lt;li&gt;When developing a connector to a library that has many parameters, &lt;strong&gt;do not mirror each parameter&lt;/strong&gt; of the underlying library - if necessary, reuse the underlying library&amp;rsquo;s configuration class and let user supply a whole instance. Example: &lt;code&gt;JdbcIO&lt;/code&gt;.
&lt;em&gt;Exception 1:&lt;/em&gt; if some parameters of the underlying library interact with Beam semantics non-trivially, then expose them. E.g. when developing a connector to a pub/sub system that has a &amp;ldquo;delivery guarantee&amp;rdquo; parameter for publishers, expose the parameter but prohibit values incompatible with the Beam model (at-most-once and exactly-once).
&lt;em&gt;Exception 2:&lt;/em&gt; if the underlying library&amp;rsquo;s configuration class is cumbersome to use - e.g. does not declare a stable API, exposes problematic transitive dependencies, or does not obey &lt;a href=&#34;https://semver.org/&#34;&gt;semantic versioning&lt;/a&gt; - in this case, it is better to wrap it and expose a cleaner and more stable API to users of the transform.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;error-handling&#34;&gt;Error handling&lt;/h3&gt;
&lt;h4 id=&#34;transform-configuration-errors&#34;&gt;Transform configuration errors&lt;/h4&gt;
&lt;p&gt;Detect errors early. Errors can be detected at the following stages:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;(in a compiled language) compilation of the source code of a user&amp;rsquo;s pipeline&lt;/li&gt;
&lt;li&gt;constructing or setting up the transform&lt;/li&gt;
&lt;li&gt;applying the transform in a pipeline&lt;/li&gt;
&lt;li&gt;running the pipeline&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;For example:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;In a typed language, take advantage of compile-time error checking by making the API of the transform strongly-typed:
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Strongly-typed configuration:&lt;/strong&gt; e.g. in Java, a parameter that is a URL should use the &lt;code&gt;URL&lt;/code&gt; class, rather than the &lt;code&gt;String&lt;/code&gt; class.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Strongly-typed input and output:&lt;/strong&gt; e.g. a transform that writes to Mongo DB should take a &lt;code&gt;PCollection&amp;lt;Document&amp;gt;&lt;/code&gt; rather than &lt;code&gt;PCollection&amp;lt;String&amp;gt;&lt;/code&gt; (assuming it is possible to provide a &lt;code&gt;Coder&lt;/code&gt; for &lt;code&gt;Document&lt;/code&gt;).&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Detect invalid values of individual parameters in setter methods.&lt;/li&gt;
&lt;li&gt;Detect invalid combinations of parameters in the transform&amp;rsquo;s validate method.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;runtime-errors-and-data-consistency&#34;&gt;Runtime errors and data consistency&lt;/h4&gt;
&lt;p&gt;Favor data consistency above everything else. Do not mask data loss or corruption. If data loss can&amp;rsquo;t be prevented, fail.&lt;/p&gt;
&lt;p&gt;Do:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;In a &lt;code&gt;DoFn&lt;/code&gt;, retry transient failures if the operation is likely to succeed on retry. Perform such retries at the narrowest scope possible in order to minimize the amount of retried work (i.e. ideally at the level of the RPC library itself, or at the level of directly sending the failing RPC to a third-party system). Otherwise, let the runner retry work at the appropriate level of granularity for you (different runners may have different retry behavior, but most of them do &lt;em&gt;some&lt;/em&gt; retrying).&lt;/li&gt;
&lt;li&gt;If the transform has side effects, strive to make them idempotent (i.e. safe to apply multiple times). Due to retries, the side effects may be executed multiple times, possibly in parallel.&lt;/li&gt;
&lt;li&gt;If the transform can have unprocessable (permanently failing) records and you want the pipeline to proceed despite that:
&lt;ul&gt;
&lt;li&gt;If bad records are safe to ignore, count the bad records in a metric. Make sure the transform&amp;rsquo;s documentation mentions this aggregator. Beware that there is no programmatic access to reading the aggregator value from inside the pipeline during execution.&lt;/li&gt;
&lt;li&gt;If bad records may need manual inspection by the user, emit them into an output that contains only those records.&lt;/li&gt;
&lt;li&gt;Alternatively take a (default zero) threshold above which element failures become bundle failures (structure the transform to count the total number of elements and of failed elements, compare them and fail if failures are above the threshold).&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;If the user requests a higher data consistency guarantee than you&amp;rsquo;re able to provide, fail. E.g.: if a user requests QoS 2 (exactly-once delivery) from an MQTT connector, the connector should fail since Beam runners may retry writing to the connector and hence exactly-once delivery can&amp;rsquo;t be done.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Do not:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;If you can&amp;rsquo;t handle a failure, don&amp;rsquo;t even catch it.
*Exception: *It may be valuable to catch the error, log a message, and rethrow it, if you&amp;rsquo;re able to provide valuable context that the original error doesn&amp;rsquo;t have.&lt;/li&gt;
&lt;li&gt;Never, ever, ever do this:
&lt;code&gt;catch(...)  { log an error; return null or false or otherwise ignore; }&lt;/code&gt;
&lt;strong&gt;Rule of thumb: if a bundle didn&amp;rsquo;t fail, its output must be correct and complete.&lt;/strong&gt;
For a user, a transform that logged an error but succeeded is silent data loss.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;performance&#34;&gt;Performance&lt;/h3&gt;
&lt;p&gt;Many runners optimize chains of &lt;code&gt;ParDo&lt;/code&gt;s in ways that improve performance if the &lt;code&gt;ParDo&lt;/code&gt;s emit a small to moderate number of elements per input element, or have relatively cheap per-element processing (e.g. Dataflow&amp;rsquo;s &amp;ldquo;fusion&amp;rdquo;, Apex &amp;ldquo;compute locality&amp;rdquo;), but limit parallelization if these assumptions are violated. In that case you may need a &amp;ldquo;fusion break&amp;rdquo; (&lt;code&gt;Reshuffle.of()&lt;/code&gt;) to improve the parallelizability of processing the output &lt;code&gt;PCollection&lt;/code&gt; of the &lt;code&gt;ParDo&lt;/code&gt;.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;If the transform includes a &lt;code&gt;ParDo&lt;/code&gt; that outputs a potentially large number of elements per input element, apply a fusion break after this &lt;code&gt;ParDo&lt;/code&gt; to make sure downstream transforms can process its output in parallel.&lt;/li&gt;
&lt;li&gt;If the transform includes a &lt;code&gt;ParDo&lt;/code&gt; that takes a very long time to process an element, insert a fusion break before this &lt;code&gt;ParDo&lt;/code&gt; to make sure all or most elements can be processed in parallel regardless of how its input &lt;code&gt;PCollection&lt;/code&gt; was produced.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;documentation&#34;&gt;Documentation&lt;/h3&gt;
&lt;p&gt;Document how to configure the transform (give code examples), and what guarantees it expects about its input or provides about its output, accounting for the Beam model. E.g.:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Are the input and output collections of this transform bounded or unbounded, or can it work with either?&lt;/li&gt;
&lt;li&gt;If the transform writes data to a third-party system, does it guarantee that data will be written at least once? at most once? exactly once? (how does it achieve exactly-once in case the runner executes a bundle multiple times due to retries or speculative execution a.k.a. backups?)&lt;/li&gt;
&lt;li&gt;If the transform reads data from a third-party system, what&amp;rsquo;s the maximum potential degree of parallelism of the read? E.g., if the transform reads data sequentially (e.g. executes a single SQL query), documentation should mention that.&lt;/li&gt;
&lt;li&gt;If the transform is querying an external system during processing (e.g. joining a &lt;code&gt;PCollection&lt;/code&gt; with information from an external key-value store), what are the guarantees on freshness of queried data: e.g. is it all loaded at the beginning of the transform, or queried per-element (in that case, what if data for a single element changes while the transform runs)?&lt;/li&gt;
&lt;li&gt;If there&amp;rsquo;s a non-trivial relationship between arrival of items in the input &lt;code&gt;PCollection&lt;/code&gt; and emitting output into the output &lt;code&gt;PCollection&lt;/code&gt;, what is this relationship? (e.g. if the transform internally does windowing, triggering, grouping, or uses the state or timers API)&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;logging&#34;&gt;Logging&lt;/h3&gt;
&lt;p&gt;Anticipate abnormal situations that a user of the transform may run into. Log information that they would have found sufficient for debugging, but limit the volume of logging. Here is some advice that applies to all programs, but is especially important when data volume is massive and execution is distributed.&lt;/p&gt;
&lt;p&gt;Do:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;When handling an error from a third-party system, log the full error with any error details the third-party system provides about it, and include any additional context the transform knows. This enables the user to take action based on the information provided in the message. When handling an exception and rethrowing your own exception, wrap the original exception in it (some languages offer more advanced facilities, e.g. Java&amp;rsquo;s &amp;ldquo;suppressed exceptions&amp;rdquo;). Never silently drop available information about an error.&lt;/li&gt;
&lt;li&gt;When performing a rare (not per-element) and slow operation (e.g. expanding a large file-pattern, or initiating an import/export job), log when the operation begins and ends. If the operation has an identifier, log the identifier, so the user can look up the operation for later debugging.&lt;/li&gt;
&lt;li&gt;When computing something low-volume that is critically important for correctness or performance of further processing, log the input and output, so a user in the process of debugging can sanity-check them or reproduce an abnormal result manually.
E.g. when expanding a filepattern into files, log what the filepattern was and how many parts it was split into; when executing a query, log the query and log how many results it produced.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Do not:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Do not log at &lt;code&gt;INFO&lt;/code&gt; per element or per bundle. &lt;code&gt;DEBUG&lt;/code&gt;/&lt;code&gt;TRACE&lt;/code&gt; may be okay because these levels are disabled by default.&lt;/li&gt;
&lt;li&gt;Avoid logging data payloads that may contain sensitive information, or sanitize them before logging (e.g. user data, credentials, etc).&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;testing&#34;&gt;Testing&lt;/h3&gt;
&lt;p&gt;Data processing is tricky, full of corner cases, and difficult to debug, because pipelines take a long time to run, it&amp;rsquo;s hard to check if the output is correct, you can&amp;rsquo;t attach a debugger, and you often can&amp;rsquo;t log as much as you wish to, due to high volume of data. Because of that, testing is particularly important.&lt;/p&gt;
&lt;h4 id=&#34;testing-the-transforms-run-time-behavior&#34;&gt;Testing the transform&amp;rsquo;s run-time behavior&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;Unit-test the overall semantics of the transform using &lt;code&gt;TestPipeline&lt;/code&gt; and &lt;code&gt;PAssert&lt;/code&gt;. Start with testing against the direct runner. Assertions on &lt;code&gt;PCollection&lt;/code&gt; contents should be strict: e.g. when a read from a database is expected to read the numbers 1 through 10, assert not just that there are 10 elements in the output &lt;code&gt;PCollection&lt;/code&gt;, or that each element is in the range [1, 10] - but assert that each number 1 through 10 appears exactly once.&lt;/li&gt;
&lt;li&gt;Identify non-trivial sequential logic in the transform that is prone to corner cases which are difficult to reliably simulate using a &lt;code&gt;TestPipeline&lt;/code&gt;, extract this logic into unit-testable functions, and unit-test them. Common corner cases are:
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;DoFn&lt;/code&gt;s processing empty bundles&lt;/li&gt;
&lt;li&gt;&lt;code&gt;DoFn&lt;/code&gt;s processing extremely large bundles (contents doesn&amp;rsquo;t fit in memory, including &amp;ldquo;hot keys&amp;rdquo; with a very large number of values)&lt;/li&gt;
&lt;li&gt;Third-party APIs failing&lt;/li&gt;
&lt;li&gt;Third-party APIs providing wildly inaccurate information&lt;/li&gt;
&lt;li&gt;Leaks of &lt;code&gt;Closeable&lt;/code&gt;/&lt;code&gt;AutoCloseable&lt;/code&gt; resources in failure cases&lt;/li&gt;
&lt;li&gt;Common corner cases when developing sources: complicated arithmetic in &lt;code&gt;BoundedSource.split&lt;/code&gt; (e.g. splitting key or offset ranges), iteration over empty data sources or composite data sources that have some empty components.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Mock out the interactions with third-party systems, or better, use &lt;a href=&#34;https://martinfowler.com/articles/mocksArentStubs.html&#34;&gt;&amp;ldquo;fake&amp;rdquo;&lt;/a&gt; implementations when available. Make sure that the mocked-out interactions are representative of all interesting cases of the actual behavior of these systems.&lt;/li&gt;
&lt;li&gt;To unit test &lt;code&gt;DoFn&lt;/code&gt;s, &lt;code&gt;CombineFn&lt;/code&gt;s, and &lt;code&gt;BoundedSource&lt;/code&gt;s, consider using &lt;code&gt;DoFnTester&lt;/code&gt;, &lt;code&gt;CombineFnTester&lt;/code&gt;, and &lt;code&gt;SourceTestUtils&lt;/code&gt; respectively which can exercise the code in non-trivial ways to flesh out potential bugs.&lt;/li&gt;
&lt;li&gt;For transforms that work over unbounded collections, test their behavior in the presence of late or out-of-order data using &lt;code&gt;TestStream&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Tests must pass 100% of the time, including in hostile, CPU- or network-constrained environments (continuous integration servers). Never put timing-dependent code (e.g. sleeps) into tests. Experience shows that no reasonable amount of sleeping is enough - code can be suspended for more than several seconds.&lt;/li&gt;
&lt;li&gt;For detailed instructions on test code organization, see the &lt;a href=&#34;https://cwiki.apache.org/confluence/display/BEAM/Contribution+Testing+Guide&#34;&gt;Beam Testing Guide&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;testing-transform-construction-and-validation&#34;&gt;Testing transform construction and validation&lt;/h4&gt;
&lt;p&gt;The code for constructing and validating a transform is usually trivial and mostly boilerplate. However, minor mistakes or typos in it can have serious consequences (e.g. ignoring a property that the user has set), so it needs to be tested as well. Yet, an excessive amount of trivial tests can be hard to maintain and give a false impression that the transform is well-tested.&lt;/p&gt;
&lt;p&gt;Do:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Test non-trivial validation code, where missing/incorrect/uninformative validation may lead to serious problems: data loss, counter-intuitive behavior, value of a property being silently ignored, or other hard-to-debug errors. Create 1 test per non-trivial class of validation error. Some examples of validation that should be tested:
&lt;ul&gt;
&lt;li&gt;If properties &lt;code&gt;withFoo()&lt;/code&gt; and &lt;code&gt;withBar()&lt;/code&gt; cannot both be specified at the same time, test that a transform specifying both of them is rejected, rather than one of the properties being silently ignored at runtime.&lt;/li&gt;
&lt;li&gt;If the transform is known to behave incorrectly or counter-intuitively for a particular configuration, test that this configuration is rejected, rather than producing wrong results at runtime. For example, a transform might work properly only for bounded collections, or only for globally-windowed collections. Or, suppose a streaming system supports several levels of &amp;ldquo;quality of service&amp;rdquo;, one of which is &amp;ldquo;exactly once delivery&amp;rdquo;. However, a transform that writes to this system might be unable to provide exactly-once due to retries in case of failures. In that case, test that the transform disallows specifying exactly-once QoS, rather than failing to provide the expected end-to-end semantics at runtime.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Test that each &lt;code&gt;withFoo()&lt;/code&gt; method (including each overload) has effect (is not ignored), using &lt;code&gt;TestPipeline&lt;/code&gt; and &lt;code&gt;PAssert&lt;/code&gt; to create tests where the expected test results depend on the value of &lt;code&gt;withFoo()&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Do not:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Do not test successful validation (e.g. &amp;ldquo;validation does not fail when the transform is configured correctly&amp;rdquo;)&lt;/li&gt;
&lt;li&gt;Do not test trivial validation errors (e.g. &amp;ldquo;validation fails when a property is unset/null/empty/negative/&amp;hellip;&amp;quot;)&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;compatibility&#34;&gt;Compatibility&lt;/h3&gt;
&lt;p&gt;Do:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Generally, follow the rules of &lt;a href=&#34;https://semver.org/&#34;&gt;semantic versioning&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;If the API of the transform is not yet stable, annotate it as &lt;code&gt;@Experimental&lt;/code&gt; (Java) or &lt;code&gt;@experimental&lt;/code&gt; (&lt;a href=&#34;https://beam.apache.org/releases/pydoc/2.21.0/apache_beam.utils.annotations.html&#34;&gt;Python&lt;/a&gt;).&lt;/li&gt;
&lt;li&gt;If the API deprecated, annotate it as &lt;code&gt;@Deprecated&lt;/code&gt; (Java) or &lt;code&gt;@deprecated&lt;/code&gt; (&lt;a href=&#34;https://beam.apache.org/releases/pydoc/2.21.0/apache_beam.utils.annotations.html&#34;&gt;Python&lt;/a&gt;).&lt;/li&gt;
&lt;li&gt;Pay attention to the stability and versioning of third-party classes exposed by the transform&amp;rsquo;s API: if they are unstable or improperly versioned (do not obey &lt;a href=&#34;https://semver.org/&#34;&gt;semantic versioning&lt;/a&gt;), it is better to wrap them in your own classes.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Do not:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Do not silently change the behavior of the transform, in a way where code will keep compiling but will do something different than the previously documented behavior (e.g. produce different output or expect different input, of course unless the previous output was incorrect).
Strive to make such incompatible behavior changes cause a compile error (e.g. it&amp;rsquo;s better to introduce a new transform for a new behavior and deprecate and then delete the old one (in a new major version), than to silently change the behavior of an existing transform), or at least a runtime error.&lt;/li&gt;
&lt;li&gt;If the behavior of the transform stays the same and you&amp;rsquo;re merely changing implementation or API - do not change API of the transform in a way that will make a user&amp;rsquo;s code stop compiling.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;java-specific-considerations&#34;&gt;Java specific considerations&lt;/h2&gt;
&lt;p&gt;Good examples for most of the practices below are &lt;code&gt;JdbcIO&lt;/code&gt; and &lt;code&gt;MongoDbIO&lt;/code&gt;.&lt;/p&gt;
&lt;h3 id=&#34;api&#34;&gt;API&lt;/h3&gt;
&lt;h4 id=&#34;choosing-types-of-input-and-output-pcollections&#34;&gt;Choosing types of input and output PCollection&amp;rsquo;s&lt;/h4&gt;
&lt;p&gt;Whenever possible, use types specific to the nature of the transform. People can wrap it with conversion &lt;code&gt;DoFn&lt;/code&gt;s from their own types if necessary. E.g. a Datastore connector should use the Datastore &lt;code&gt;Entity&lt;/code&gt; type, a MongoDb connector should use Mongo &lt;code&gt;Document&lt;/code&gt; type, not a String representation of the JSON.&lt;/p&gt;
&lt;p&gt;Sometimes that&amp;rsquo;s not possible (e.g. JDBC does not provide a Beam-compatible (encodable with a Coder) &amp;ldquo;JDBC record&amp;rdquo; datatype) - then let the user provide a function for converting between the transform-specific type and a Beam-compatible type (e.g. see &lt;code&gt;JdbcIO&lt;/code&gt; and &lt;code&gt;MongoDbGridFSIO&lt;/code&gt;).&lt;/p&gt;
&lt;p&gt;When the transform should logically return a composite type for which no Java class exists yet, create a new POJO class with well-named fields. Do not use generic tuple classes or &lt;code&gt;KV&lt;/code&gt; (unless the fields are legitimately a key and a value).&lt;/p&gt;
&lt;h4 id=&#34;transforms-with-multiple-output-collections&#34;&gt;Transforms with multiple output collections&lt;/h4&gt;
&lt;p&gt;If the transform needs to return multiple collections, it should be a &lt;code&gt;PTransform&amp;lt;..., PCollectionTuple&amp;gt;&lt;/code&gt; and expose methods &lt;code&gt;getBlahTag()&lt;/code&gt; for each collection.&lt;/p&gt;
&lt;p&gt;E.g. if you want to return a &lt;code&gt;PCollection&amp;lt;Foo&amp;gt;&lt;/code&gt; and a &lt;code&gt;PCollection&amp;lt;Bar&amp;gt;&lt;/code&gt;, expose &lt;code&gt;TupleTag&amp;lt;Foo&amp;gt; getFooTag()&lt;/code&gt; and &lt;code&gt;TupleTag&amp;lt;Bar&amp;gt; getBarTag()&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;For example:&lt;/p&gt;





    
        &lt;div class=language-java&gt;
            &lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span class=&#34;kd&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;MyTransform&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;extends&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;PTransform&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;...,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;PCollectionTuple&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;kd&#34;&gt;private&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;final&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;TupleTag&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Moo&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;mooTag&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;TupleTag&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Moo&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;()&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;{};&lt;/span&gt;
  &lt;span class=&#34;kd&#34;&gt;private&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;final&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;TupleTag&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Blah&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;blahTag&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;TupleTag&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Blah&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;()&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;{};&lt;/span&gt;
  &lt;span class=&#34;o&#34;&gt;...&lt;/span&gt;
  &lt;span class=&#34;n&#34;&gt;PCollectionTuple&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;expand&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(...&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;input&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;o&#34;&gt;...&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;PCollection&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Moo&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;moo&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;...;&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;PCollection&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Blah&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;blah&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;...;&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;PCollectionTuple&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;of&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;mooTag&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;moo&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;
                           &lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;and&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;blahTag&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;blah&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;);&lt;/span&gt;
  &lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;

  &lt;span class=&#34;kd&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;TupleTag&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Moo&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;getMooTag&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;mooTag&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt;
  &lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;

  &lt;span class=&#34;kd&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;TupleTag&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Blah&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;getBlahTag&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;blahTag&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt;
  &lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;
  &lt;span class=&#34;o&#34;&gt;...&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
        &lt;/div&gt;
    


&lt;h4 id=&#34;fluent-builders-for-configuration&#34;&gt;Fluent builders for configuration&lt;/h4&gt;
&lt;p&gt;Make the transform class immutable, with methods to produce modified immutable objects. Use &lt;a href=&#34;https://github.com/google/auto/tree/master/value&#34;&gt;AutoValue&lt;/a&gt;. Autovalue can provide a Builder helper class. Use &lt;code&gt;@Nullable&lt;/code&gt; to mark parameters of class type that don&amp;rsquo;t have a default value or whose default value is null, except for primitive types (e.g. int).&lt;/p&gt;





    
        &lt;div class=language-java&gt;
            &lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span class=&#34;nd&#34;&gt;@AutoValue&lt;/span&gt;
&lt;span class=&#34;kd&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;abstract&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;MyTransform&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;extends&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;PTransform&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;...&amp;gt;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;getMoo&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;();&lt;/span&gt;
  &lt;span class=&#34;nd&#34;&gt;@Nullable&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;abstract&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;String&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;getBlah&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;();&lt;/span&gt;

  &lt;span class=&#34;kd&#34;&gt;abstract&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Builder&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;toBuilder&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;();&lt;/span&gt;

  &lt;span class=&#34;nd&#34;&gt;@AutoValue.Builder&lt;/span&gt;
  &lt;span class=&#34;kd&#34;&gt;abstract&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;Builder&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;kd&#34;&gt;abstract&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Builder&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;setMoo&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;moo&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;);&lt;/span&gt;
    &lt;span class=&#34;kd&#34;&gt;abstract&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Builder&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;setBlah&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;String&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;blah&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;);&lt;/span&gt;

    &lt;span class=&#34;kd&#34;&gt;abstract&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;MyTransform&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;build&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;();&lt;/span&gt;
  &lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;
  &lt;span class=&#34;o&#34;&gt;...&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
        &lt;/div&gt;
    


&lt;h5 id=&#34;factory-methods&#34;&gt;Factory methods&lt;/h5&gt;
&lt;p&gt;Provide a single argumentless static factory method, either in the enclosing class (see &amp;ldquo;Packaging a family of transforms&amp;rdquo;) or in the transform class itself.&lt;/p&gt;





    
        &lt;div class=language-java&gt;
            &lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span class=&#34;kd&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;Thumbs&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;kd&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Twiddle&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;twiddle&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;AutoValue_Thumbs_Twiddle&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;Builder&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;().&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;build&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;();&lt;/span&gt;
  &lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;

  &lt;span class=&#34;kd&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;abstract&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;Twiddle&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;extends&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;PTransform&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;...&amp;gt;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;...&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;

&lt;span class=&#34;c1&#34;&gt;// or:
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;abstract&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;TwiddleThumbs&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;extends&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;PTransform&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;...&amp;gt;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;kd&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;TwiddleThumbs&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;create&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;AutoValue_Thumbs_Twiddle&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;Builder&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;().&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;build&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;();&lt;/span&gt;
  &lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;
  &lt;span class=&#34;o&#34;&gt;...&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
        &lt;/div&gt;
    


&lt;p&gt;Exception: when transform has a single overwhelmingly most important parameter, then call the factory method &lt;code&gt;of&lt;/code&gt; and put the parameter into an argument of the factory method: &lt;code&gt;ParDo.of(DoFn).withAllowedLateness()&lt;/code&gt;.&lt;/p&gt;
&lt;h5 id=&#34;fluent-builder-methods-for-setting-parameters&#34;&gt;Fluent builder methods for setting parameters&lt;/h5&gt;
&lt;p&gt;Call them &lt;code&gt;withBlah()&lt;/code&gt;. All builder methods must return exactly the same type; if it&amp;rsquo;s a parameterized (generic) type, with the same values of type parameters.&lt;/p&gt;
&lt;p&gt;Treat &lt;code&gt;withBlah()&lt;/code&gt; methods as an unordered set of keyword arguments - result must not depend on the order in which you call &lt;code&gt;withFoo()&lt;/code&gt; and &lt;code&gt;withBar()&lt;/code&gt; (e.g., &lt;code&gt;withBar()&lt;/code&gt; must not read the current value of foo).&lt;/p&gt;
&lt;p&gt;Document implications of each &lt;code&gt;withBlah&lt;/code&gt; method: when to use this method at all, what values are allowed, what is the default, what are the implications of changing the value.&lt;/p&gt;





    
        &lt;div class=language-java&gt;
            &lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span class=&#34;cm&#34;&gt;/**
&lt;/span&gt;&lt;span class=&#34;cm&#34;&gt; * Returns a new {@link TwiddleThumbs} transform with moo set
&lt;/span&gt;&lt;span class=&#34;cm&#34;&gt; * to the given value.
&lt;/span&gt;&lt;span class=&#34;cm&#34;&gt; *
&lt;/span&gt;&lt;span class=&#34;cm&#34;&gt; * &amp;lt;p&amp;gt;Valid values are 0 (inclusive) to 100 (exclusive). The default is 42.
&lt;/span&gt;&lt;span class=&#34;cm&#34;&gt; *
&lt;/span&gt;&lt;span class=&#34;cm&#34;&gt; * &amp;lt;p&amp;gt;Higher values generally improve throughput, but increase chance
&lt;/span&gt;&lt;span class=&#34;cm&#34;&gt; * of spontaneous combustion.
&lt;/span&gt;&lt;span class=&#34;cm&#34;&gt; */&lt;/span&gt;
&lt;span class=&#34;kd&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Twiddle&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;withMoo&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;moo&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;n&#34;&gt;checkArgument&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;moo&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;0&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;moo&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;100&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;,&lt;/span&gt;
      &lt;span class=&#34;s&#34;&gt;&amp;#34;Thumbs.Twiddle.withMoo() called with an invalid moo of %s. &amp;#34;&lt;/span&gt;
      &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;Valid values are 0 (inclusive) to 100 (exclusive)&amp;#34;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;,&lt;/span&gt;
      &lt;span class=&#34;n&#34;&gt;moo&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;);&lt;/span&gt;
  &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;toBuilder&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;().&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;setMoo&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;moo&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;).&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;build&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;();&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
        &lt;/div&gt;
    


&lt;h5 id=&#34;default-values-for-parameters&#34;&gt;Default values for parameters&lt;/h5&gt;
&lt;p&gt;Specify them in the factory method (factory method returns an object with default values).&lt;/p&gt;





    
        &lt;div class=language-java&gt;
            &lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span class=&#34;kd&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;Thumbs&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;kd&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Twiddle&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;twiddle&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;AutoValue_Thumbs_Twiddle&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;Builder&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;().&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;setMoo&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;42&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;).&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;build&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;();&lt;/span&gt;
  &lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;
  &lt;span class=&#34;o&#34;&gt;...&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
        &lt;/div&gt;
    


&lt;h5 id=&#34;packaging-multiple-parameters-into-a-reusable-object&#34;&gt;Packaging multiple parameters into a reusable object&lt;/h5&gt;
&lt;p&gt;If several parameters of the transform are very tightly logically coupled, sometimes it makes sense to encapsulate them into a container object. Use the same guidelines for this container object (make it immutable, use AutoValue with builders, document &lt;code&gt;withBlah()&lt;/code&gt; methods, etc.). For an example, see &lt;a href=&#34;https://github.com/apache/beam/blob/master/sdks/java/io/jdbc/src/main/java/org/apache/beam/sdk/io/jdbc/JdbcIO.java&#34;&gt;JdbcIO.DataSourceConfiguration&lt;/a&gt;.&lt;/p&gt;
&lt;h4 id=&#34;transforms-with-type-parameters&#34;&gt;Transforms with type parameters&lt;/h4&gt;
&lt;p&gt;All type parameters should be specified explicitly on factory method. Builder methods (&lt;code&gt;withBlah()&lt;/code&gt;) should not change the types.&lt;/p&gt;





    
        &lt;div class=language-java&gt;
            &lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span class=&#34;kd&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;Thumbs&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;kd&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Twiddle&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;T&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;twiddle&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;AutoValue_Thumbs_Twiddle&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;Builder&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;T&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;().&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;build&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;();&lt;/span&gt;
  &lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;

  &lt;span class=&#34;nd&#34;&gt;@AutoValue&lt;/span&gt;
  &lt;span class=&#34;kd&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;abstract&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;Twiddle&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;T&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt;
       &lt;span class=&#34;kd&#34;&gt;extends&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;PTransform&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;PCollection&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Foo&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;PCollection&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Bar&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;T&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;err&#34;&gt;…&lt;/span&gt;
    &lt;span class=&#34;nd&#34;&gt;@Nullable&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;abstract&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Bar&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;T&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;getBar&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;();&lt;/span&gt;

    &lt;span class=&#34;kd&#34;&gt;abstract&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Builder&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;T&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;toBuilder&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;();&lt;/span&gt;

    &lt;span class=&#34;nd&#34;&gt;@AutoValue.Builder&lt;/span&gt;
    &lt;span class=&#34;kd&#34;&gt;abstract&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;Builder&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;T&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;
      &lt;span class=&#34;err&#34;&gt;…&lt;/span&gt;
      &lt;span class=&#34;kd&#34;&gt;abstract&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Builder&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;T&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;setBar&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Bar&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;T&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;bar&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;);&lt;/span&gt;

      &lt;span class=&#34;kd&#34;&gt;abstract&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Twiddle&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;T&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;build&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;();&lt;/span&gt;
    &lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;
    &lt;span class=&#34;err&#34;&gt;…&lt;/span&gt;
  &lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;

&lt;span class=&#34;c1&#34;&gt;// User code:
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Thumbs&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;Twiddle&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;String&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;twiddle&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Thumbs&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;String&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;twiddle&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;();&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;// Or:
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;PCollection&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Bar&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;String&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;bars&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;foos&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;apply&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Thumbs&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;String&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;twiddle&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;…&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;);&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
        &lt;/div&gt;
    


&lt;p&gt;Exception: when the transform has a single most important parameter and this parameter depends on type T, then prefer to put it right into the factory method: e.g. &lt;code&gt;Combine.globally(SerializableFunction&amp;lt;Iterable&amp;lt;V&amp;gt;,V&amp;gt;&lt;/code&gt;). This improves Java&amp;rsquo;s type inference and allows the user not to specify type parameters explicitly.&lt;/p&gt;
&lt;p&gt;When the transform has more than one type parameter, or if the meaning of the parameter is non-obvious, name the type parameters like &lt;code&gt;SomethingT&lt;/code&gt;, e.g.: a PTransform implementing a classifier algorithm and assigning each input element with a label might be typed as &lt;code&gt;Classify&amp;lt;InputT, LabelT&amp;gt;&lt;/code&gt;.&lt;/p&gt;
&lt;h4 id=&#34;injecting-user-specified-behavior&#34;&gt;Injecting user-specified behavior&lt;/h4&gt;
&lt;p&gt;If the transform has an aspect of behavior to be customized by a user&amp;rsquo;s code, make a decision as follows:&lt;/p&gt;
&lt;p&gt;Do:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;If possible, just use PTransform composition as an extensibility device - i.e. if the same effect can be achieved by the user applying the transform in their pipeline and composing it with another &lt;code&gt;PTransform&lt;/code&gt;, then the transform itself should not be extensible. E.g., a transform that writes JSON objects to a third-party system should take a &lt;code&gt;PCollection&amp;lt;JsonObject&amp;gt;&lt;/code&gt; (assuming it is possible to provide a &lt;code&gt;Coder&lt;/code&gt; for &lt;code&gt;JsonObject&lt;/code&gt;), rather than taking a generic &lt;code&gt;PCollection&amp;lt;T&amp;gt;&lt;/code&gt; and a &lt;code&gt;ProcessFunction&amp;lt;T, JsonObject&amp;gt;&lt;/code&gt; (anti-example that should be fixed: &lt;code&gt;TextIO&lt;/code&gt;).&lt;/li&gt;
&lt;li&gt;If extensibility by user code is necessary inside the transform, pass the user code as a &lt;code&gt;ProcessFunction&lt;/code&gt; or define your own serializable function-like type (ideally single-method, for interoperability with Java 8 lambdas). Because Java erases the types of lambdas, you should be sure to have adequate type information even if a raw-type &lt;code&gt;ProcessFunction&lt;/code&gt; is provided by the user. See &lt;code&gt;MapElements&lt;/code&gt; and &lt;code&gt;FlatMapElements&lt;/code&gt; for examples of how to use &lt;code&gt;ProcessFunction&lt;/code&gt; and &lt;code&gt;InferableFunction&lt;/code&gt; in tandem to provide good support for both lambdas and concrete subclasses with type information.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Do not:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Do not use inheritance for extensibility: users should not subclass the &lt;code&gt;PTransform&lt;/code&gt; class.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;packaging-a-family-of-transforms&#34;&gt;Packaging a family of transforms&lt;/h4&gt;
&lt;p&gt;When developing a family of highly related transforms (e.g. interacting with the same system in different ways, or providing different implementations of the same high-level task), use a top-level class as a namespace, with multiple factory methods returning transforms corresponding to each individual use case.&lt;/p&gt;
&lt;p&gt;The container class must have a private constructor, so it can&amp;rsquo;t be instantiated directly.&lt;/p&gt;
&lt;p&gt;Document common stuff at &lt;code&gt;FooIO&lt;/code&gt; level, and each factory method individually.&lt;/p&gt;





    
        &lt;div class=language-java&gt;
            &lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span class=&#34;cm&#34;&gt;/** Transforms for clustering data. */&lt;/span&gt;
&lt;span class=&#34;kd&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;Cluster&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;c1&#34;&gt;// Force use of static factory methods.
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;  &lt;span class=&#34;kd&#34;&gt;private&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;Cluster&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;{}&lt;/span&gt;

  &lt;span class=&#34;cm&#34;&gt;/** Returns a new {@link UsingKMeans} transform. */&lt;/span&gt;
  &lt;span class=&#34;kd&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;UsingKMeans&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;usingKMeans&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;...&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;
  &lt;span class=&#34;kd&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Hierarchically&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;hierarchically&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;...&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;

  &lt;span class=&#34;cm&#34;&gt;/** Clusters data using the K-Means algorithm. */&lt;/span&gt;
  &lt;span class=&#34;kd&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;UsingKMeans&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;extends&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;PTransform&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;...&amp;gt;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;...&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;
  &lt;span class=&#34;kd&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;Hierarchically&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;extends&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;PTransform&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;...&amp;gt;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;...&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;

&lt;span class=&#34;kd&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;FooIO&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;c1&#34;&gt;// Force use of static factory methods.
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;  &lt;span class=&#34;kd&#34;&gt;private&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;FooIO&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;{}&lt;/span&gt;

  &lt;span class=&#34;kd&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Read&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;read&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;...&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;
  &lt;span class=&#34;o&#34;&gt;...&lt;/span&gt;

  &lt;span class=&#34;kd&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;Read&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;extends&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;PTransform&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;...&amp;gt;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;...&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;
  &lt;span class=&#34;kd&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;Write&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;extends&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;PTransform&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;...&amp;gt;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;...&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;
  &lt;span class=&#34;kd&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;Delete&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;extends&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;PTransform&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;...&amp;gt;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;...&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;
  &lt;span class=&#34;kd&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;Mutate&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;extends&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;PTransform&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;...&amp;gt;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;...&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
        &lt;/div&gt;
    


&lt;p&gt;When supporting multiple versions with incompatible APIs, use the version as a namespace-like class too, and put implementations of different API versions in different files.&lt;/p&gt;





    
        &lt;div class=language-java&gt;
            &lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span class=&#34;c1&#34;&gt;// FooIO.java
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;FooIO&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;c1&#34;&gt;// Force use of static factory methods.
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;  &lt;span class=&#34;kd&#34;&gt;private&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;FooIO&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;{}&lt;/span&gt;

  &lt;span class=&#34;kd&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;FooV1&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;v1&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;FooV1&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;();&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;
  &lt;span class=&#34;kd&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;FooV2&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;v2&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;FooV2&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;();&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;

&lt;span class=&#34;c1&#34;&gt;// FooV1.java
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;FooV1&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;c1&#34;&gt;// Force use of static factory methods outside the package.
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;  &lt;span class=&#34;n&#34;&gt;FooV1&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;{}&lt;/span&gt;
  &lt;span class=&#34;kd&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Read&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;read&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;...&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;
  &lt;span class=&#34;kd&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;Read&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;extends&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;PTransform&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;...&amp;gt;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;...&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;

&lt;span class=&#34;c1&#34;&gt;// FooV2.java
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;FooV2&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;c1&#34;&gt;// Force use of static factory methods outside the package.
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;  &lt;span class=&#34;n&#34;&gt;FooV2&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;{}&lt;/span&gt;
  &lt;span class=&#34;kd&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Read&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;read&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;...&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;

  &lt;span class=&#34;kd&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;Read&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;extends&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;PTransform&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;...&amp;gt;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;...&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
        &lt;/div&gt;
    


&lt;h3 id=&#34;behavior&#34;&gt;Behavior&lt;/h3&gt;
&lt;h4 id=&#34;immutability&#34;&gt;Immutability&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;Transform classes must be immutable: all variables must be private final and themselves immutable (e.g. if it&amp;rsquo;s a list, it must be an &lt;code&gt;ImmutableList&lt;/code&gt;).&lt;/li&gt;
&lt;li&gt;Elements of all &lt;code&gt;PCollection&lt;/code&gt;s must be immutable.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;serialization&#34;&gt;Serialization&lt;/h4&gt;
&lt;p&gt;&lt;code&gt;DoFn&lt;/code&gt;, &lt;code&gt;PTransform&lt;/code&gt;, &lt;code&gt;CombineFn&lt;/code&gt; and other instances will be serialized. Keep the amount of serialized data to a minimum: Mark fields that you don&amp;rsquo;t want serialized as &lt;code&gt;transient&lt;/code&gt;. Make classes &lt;code&gt;static&lt;/code&gt; whenever possible (so that the instance doesn&amp;rsquo;t capture and serialize the enclosing class instance). Note: In some cases this means that you cannot use anonymous classes.&lt;/p&gt;
&lt;h4 id=&#34;validation&#34;&gt;Validation&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;Validate individual parameters in &lt;code&gt;.withBlah()&lt;/code&gt; methods using &lt;code&gt;checkArgument()&lt;/code&gt;. Error messages should mention the name of the parameter, the actual value, and the range of valid values.&lt;/li&gt;
&lt;li&gt;Validate parameter combinations and missing required parameters in the &lt;code&gt;PTransform&lt;/code&gt;&#39;s &lt;code&gt;.expand()&lt;/code&gt; method.&lt;/li&gt;
&lt;li&gt;Validate parameters that the &lt;code&gt;PTransform&lt;/code&gt; takes from &lt;code&gt;PipelineOptions&lt;/code&gt; in the &lt;code&gt;PTransform&lt;/code&gt;&#39;s &lt;code&gt;.validate(PipelineOptions)&lt;/code&gt; method.
These validations will be executed when the pipeline is already fully constructed/expanded and is about to be run with a particular &lt;code&gt;PipelineOptions&lt;/code&gt;.
Most &lt;code&gt;PTransform&lt;/code&gt;s do not use &lt;code&gt;PipelineOptions&lt;/code&gt; and thus don&amp;rsquo;t need a &lt;code&gt;validate()&lt;/code&gt; method - instead, they should perform their validation via the two other methods above.&lt;/li&gt;
&lt;/ul&gt;





    
        &lt;div class=language-java&gt;
            &lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span class=&#34;nd&#34;&gt;@AutoValue&lt;/span&gt;
&lt;span class=&#34;kd&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;abstract&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;TwiddleThumbs&lt;/span&gt;
    &lt;span class=&#34;kd&#34;&gt;extends&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;PTransform&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;PCollection&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Foo&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;PCollection&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Bar&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;kd&#34;&gt;abstract&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;getMoo&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;();&lt;/span&gt;
  &lt;span class=&#34;kd&#34;&gt;abstract&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;String&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;getBoo&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;();&lt;/span&gt;

  &lt;span class=&#34;o&#34;&gt;...&lt;/span&gt;
  &lt;span class=&#34;c1&#34;&gt;// Validating individual parameters
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;  &lt;span class=&#34;kd&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;TwiddleThumbs&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;withMoo&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;moo&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;checkArgument&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;moo&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;0&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;moo&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;100&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;,&lt;/span&gt;
        &lt;span class=&#34;s&#34;&gt;&amp;#34;Moo must be between 0 (inclusive) and 100 (exclusive), but was: %s&amp;#34;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;,&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;moo&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;);&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;toBuilder&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;().&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;setMoo&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;moo&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;).&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;build&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;();&lt;/span&gt;
  &lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;

  &lt;span class=&#34;kd&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;TwiddleThumbs&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;withBoo&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;String&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;boo&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;checkArgument&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;boo&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;!=&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;null&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;Boo can not be null&amp;#34;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;);&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;checkArgument&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(!&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;boo&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;isEmpty&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(),&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;Boo can not be empty&amp;#34;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;);&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;toBuilder&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;().&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;setBoo&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;boo&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;).&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;build&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;();&lt;/span&gt;
  &lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;

  &lt;span class=&#34;nd&#34;&gt;@Override&lt;/span&gt;
  &lt;span class=&#34;kd&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;validate&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;PipelineOptions&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;options&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;woo&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;options&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;as&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;TwiddleThumbsOptions&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;class&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;).&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;getWoo&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;();&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;checkArgument&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;
       &lt;span class=&#34;n&#34;&gt;woo&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;getMoo&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(),&lt;/span&gt;
      &lt;span class=&#34;s&#34;&gt;&amp;#34;Woo (%s) must be smaller than moo (%s)&amp;#34;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;,&lt;/span&gt;
      &lt;span class=&#34;n&#34;&gt;woo&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;getMoo&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;());&lt;/span&gt;
  &lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;

  &lt;span class=&#34;nd&#34;&gt;@Override&lt;/span&gt;
  &lt;span class=&#34;kd&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;PCollection&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Bar&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;expand&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;PCollection&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Foo&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;input&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;c1&#34;&gt;// Validating that a required parameter is present
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;    &lt;span class=&#34;n&#34;&gt;checkArgument&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;getBoo&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;!=&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;null&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;Must specify boo&amp;#34;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;);&lt;/span&gt;

    &lt;span class=&#34;c1&#34;&gt;// Validating a combination of parameters
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;    &lt;span class=&#34;n&#34;&gt;checkArgument&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;getMoo&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;0&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;||&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;getBoo&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;null&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;,&lt;/span&gt;
        &lt;span class=&#34;s&#34;&gt;&amp;#34;Must specify at most one of moo or boo, but was: moo = %s, boo = %s&amp;#34;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;,&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;getMoo&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(),&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;getBoo&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;());&lt;/span&gt;

    &lt;span class=&#34;o&#34;&gt;...&lt;/span&gt;
  &lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
        &lt;/div&gt;
    


&lt;h4 id=&#34;coders&#34;&gt;Coders&lt;/h4&gt;
&lt;p&gt;&lt;code&gt;Coder&lt;/code&gt;s are a way for a Beam runner to materialize intermediate data or transmit it between workers when necessary. &lt;code&gt;Coder&lt;/code&gt; should not be used as a general-purpose API for parsing or writing binary formats because the particular binary encoding of a &lt;code&gt;Coder&lt;/code&gt; is intended to be its private implementation detail.&lt;/p&gt;
&lt;h5 id=&#34;providing-default-coders-for-types&#34;&gt;Providing default coders for types&lt;/h5&gt;
&lt;p&gt;Provide default &lt;code&gt;Coder&lt;/code&gt;s for all new data types. Use &lt;code&gt;@DefaultCoder&lt;/code&gt; annotations or &lt;code&gt;CoderProviderRegistrar&lt;/code&gt; classes annotated with &lt;code&gt;@AutoService&lt;/code&gt;: see usages of these classes in the SDK for examples. If performance is not important, you can use &lt;code&gt;SerializableCoder&lt;/code&gt; or &lt;code&gt;AvroCoder&lt;/code&gt;. Otherwise, develop an efficient custom coder (subclass &lt;code&gt;AtomicCoder&lt;/code&gt; for concrete types, &lt;code&gt;StructuredCoder&lt;/code&gt; for generic types).&lt;/p&gt;
&lt;h5 id=&#34;setting-coders-on-output-collections&#34;&gt;Setting coders on output collections&lt;/h5&gt;
&lt;p&gt;All &lt;code&gt;PCollection&lt;/code&gt;s created by your &lt;code&gt;PTransform&lt;/code&gt; (both output and intermediate collections) must have a &lt;code&gt;Coder&lt;/code&gt; set on them: a user should never need to call &lt;code&gt;.setCoder()&lt;/code&gt; to &amp;ldquo;fix up&amp;rdquo; a coder on a &lt;code&gt;PCollection&lt;/code&gt; produced by your &lt;code&gt;PTransform&lt;/code&gt; (in fact, Beam intends to eventually deprecate &lt;code&gt;setCoder&lt;/code&gt;). In some cases, coder inference will be sufficient to achieve this; in other cases, your transform will need to explicitly call &lt;code&gt;setCoder&lt;/code&gt; on its collections.&lt;/p&gt;
&lt;p&gt;If the collection is of a concrete type, that type usually has a corresponding coder. Use a specific most efficient coder (e.g. &lt;code&gt;StringUtf8Coder.of()&lt;/code&gt; for strings, &lt;code&gt;ByteArrayCoder.of()&lt;/code&gt; for byte arrays, etc.), rather than a general-purpose coder like &lt;code&gt;SerializableCoder&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;If the type of the collection involves generic type variables, the situation is more complex:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;If it coincides with the transform&amp;rsquo;s input type or is a simple wrapper over it, you can reuse the coder of the input &lt;code&gt;PCollection&lt;/code&gt;, available via &lt;code&gt;input.getCoder()&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Attempt to infer the coder via &lt;code&gt;input.getPipeline().getCoderRegistry().getCoder(TypeDescriptor)&lt;/code&gt;. Use utilities in &lt;code&gt;TypeDescriptors&lt;/code&gt; to obtain the &lt;code&gt;TypeDescriptor&lt;/code&gt; for the generic type. For an example of this approach, see the implementation of &lt;code&gt;AvroIO.parseGenericRecords()&lt;/code&gt;. However, coder inference for generic types is best-effort and in some cases it may fail due to Java type erasure.&lt;/li&gt;
&lt;li&gt;Always make it possible for the user to explicitly specify a &lt;code&gt;Coder&lt;/code&gt; for the relevant type variable(s) as a configuration parameter of your &lt;code&gt;PTransform&lt;/code&gt;. (e.g. &lt;code&gt;AvroIO.&amp;lt;T&amp;gt;parseGenericRecords().withCoder(Coder&amp;lt;T&amp;gt;)&lt;/code&gt;). Fall back to inference if the coder was not explicitly specified.&lt;/li&gt;
&lt;/ul&gt;

      </description>
    </item>
    
    <item>
      <title>Contribute: Release blockers</title>
      <link>/contribute/release-blocking/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/contribute/release-blocking/</guid>
      <description>
        
        
        &lt;!--
Licensed under the Apache License, Version 2.0 (the &#34;License&#34;);
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an &#34;AS IS&#34; BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
--&gt;
&lt;h1 id=&#34;release-blockers&#34;&gt;Release blockers&lt;/h1&gt;
&lt;p&gt;A release blocking Jira is any open Jira that has its &lt;code&gt;Fix Version&lt;/code&gt; field set
to an upcoming version of Beam.&lt;/p&gt;
&lt;h2 id=&#34;release-blocking-bugs&#34;&gt;Release-blocking bugs&lt;/h2&gt;
&lt;p&gt;A bug should block a release if it is a significant regression or loss of
functionality. It should usually have priority Critical/P1. Lower priorities do
not have urgency, while Blocker/P0 is reserved for issues so urgent they do not
wait for a release.&lt;/p&gt;
&lt;h2 id=&#34;release-blocking-features&#34;&gt;Release-blocking features&lt;/h2&gt;
&lt;p&gt;By default, features do not block releases. Beam has a steady 6 week cadence of
cutting release branches and releasing. Features &amp;ldquo;catch the train&amp;rdquo; or else wait
for the next release.&lt;/p&gt;
&lt;p&gt;A feature can block a release if there is community consensus to delay a
release in order to include the feature.&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>Contribute: Runner Authoring Guide</title>
      <link>/contribute/runner-guide/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/contribute/runner-guide/</guid>
      <description>
        
        
        &lt;!--
Licensed under the Apache License, Version 2.0 (the &#34;License&#34;);
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an &#34;AS IS&#34; BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
--&gt;
&lt;h1 id=&#34;runner-authoring-guide&#34;&gt;Runner Authoring Guide&lt;/h1&gt;
&lt;p&gt;This guide walks through how to implement a new runner. It is aimed at someone
who has a data processing system and wants to use it to execute a Beam
pipeline. The guide starts from the basics, to help you evaluate the work
ahead. Then the sections become more and more detailed, to be a resource
throughout the development of your runner.&lt;/p&gt;
&lt;p&gt;Topics covered:&lt;/p&gt;


&lt;nav id=&#34;TableOfContents&#34;&gt;
  &lt;ul&gt;
    &lt;li&gt;&lt;a href=&#34;#basics-of-the-beam-model&#34;&gt;Basics of the Beam model&lt;/a&gt;
      &lt;ul&gt;
        &lt;li&gt;&lt;a href=&#34;#pipeline&#34;&gt;Pipeline&lt;/a&gt;&lt;/li&gt;
        &lt;li&gt;&lt;a href=&#34;#ptransforms&#34;&gt;PTransforms&lt;/a&gt;&lt;/li&gt;
        &lt;li&gt;&lt;a href=&#34;#pcollections&#34;&gt;PCollections&lt;/a&gt;
          &lt;ul&gt;
            &lt;li&gt;&lt;a href=&#34;#bounded-vs-unbounded&#34;&gt;Bounded vs Unbounded&lt;/a&gt;&lt;/li&gt;
            &lt;li&gt;&lt;a href=&#34;#timestamps&#34;&gt;Timestamps&lt;/a&gt;&lt;/li&gt;
            &lt;li&gt;&lt;a href=&#34;#watermarks&#34;&gt;Watermarks&lt;/a&gt;&lt;/li&gt;
            &lt;li&gt;&lt;a href=&#34;#windowed-elements&#34;&gt;Windowed elements&lt;/a&gt;&lt;/li&gt;
            &lt;li&gt;&lt;a href=&#34;#coder&#34;&gt;Coder&lt;/a&gt;&lt;/li&gt;
            &lt;li&gt;&lt;a href=&#34;#windowing-strategy&#34;&gt;Windowing Strategy&lt;/a&gt;&lt;/li&gt;
          &lt;/ul&gt;
        &lt;/li&gt;
        &lt;li&gt;&lt;a href=&#34;#user-defined-functions-udfs&#34;&gt;User-Defined Functions (UDFs)&lt;/a&gt;&lt;/li&gt;
        &lt;li&gt;&lt;a href=&#34;#runner&#34;&gt;Runner&lt;/a&gt;&lt;/li&gt;
      &lt;/ul&gt;
    &lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;#implementing-the-beam-primitives&#34;&gt;Implementing the Beam Primitives&lt;/a&gt;
      &lt;ul&gt;
        &lt;li&gt;&lt;a href=&#34;#what-if-you-havent-implemented-some-of-these-features&#34;&gt;What if you haven&amp;rsquo;t implemented some of these features?&lt;/a&gt;&lt;/li&gt;
        &lt;li&gt;&lt;a href=&#34;#implementing-the-pardo-primitive&#34;&gt;Implementing the ParDo primitive&lt;/a&gt;
          &lt;ul&gt;
            &lt;li&gt;&lt;a href=&#34;#bundles&#34;&gt;Bundles&lt;/a&gt;&lt;/li&gt;
            &lt;li&gt;&lt;a href=&#34;#the-dofn-lifecycle&#34;&gt;The DoFn Lifecycle&lt;/a&gt;&lt;/li&gt;
            &lt;li&gt;&lt;a href=&#34;#dofnrunners&#34;&gt;DoFnRunner(s)&lt;/a&gt;&lt;/li&gt;
            &lt;li&gt;&lt;a href=&#34;#side-inputs&#34;&gt;Side Inputs&lt;/a&gt;&lt;/li&gt;
            &lt;li&gt;&lt;a href=&#34;#state-and-timers&#34;&gt;State and Timers&lt;/a&gt;&lt;/li&gt;
            &lt;li&gt;&lt;a href=&#34;#splittable-dofn&#34;&gt;Splittable DoFn&lt;/a&gt;&lt;/li&gt;
          &lt;/ul&gt;
        &lt;/li&gt;
        &lt;li&gt;&lt;a href=&#34;#implementing-the-groupbykey-and-window-primitive&#34;&gt;Implementing the GroupByKey (and window) primitive&lt;/a&gt;
          &lt;ul&gt;
            &lt;li&gt;&lt;a href=&#34;#group-by-encoded-bytes&#34;&gt;Group By Encoded Bytes&lt;/a&gt;&lt;/li&gt;
            &lt;li&gt;&lt;a href=&#34;#window-merging&#34;&gt;Window Merging&lt;/a&gt;&lt;/li&gt;
            &lt;li&gt;&lt;a href=&#34;#implementing-via-groupbykeyonly--groupalsobywindow&#34;&gt;Implementing via GroupByKeyOnly + GroupAlsoByWindow&lt;/a&gt;&lt;/li&gt;
            &lt;li&gt;&lt;a href=&#34;#dropping-late-data&#34;&gt;Dropping late data&lt;/a&gt;&lt;/li&gt;
            &lt;li&gt;&lt;a href=&#34;#triggering&#34;&gt;Triggering&lt;/a&gt;&lt;/li&gt;
            &lt;li&gt;&lt;a href=&#34;#timestampcombiner&#34;&gt;TimestampCombiner&lt;/a&gt;&lt;/li&gt;
          &lt;/ul&gt;
        &lt;/li&gt;
        &lt;li&gt;&lt;a href=&#34;#implementing-the-window-primitive&#34;&gt;Implementing the Window primitive&lt;/a&gt;&lt;/li&gt;
        &lt;li&gt;&lt;a href=&#34;#implementing-the-read-primitive&#34;&gt;Implementing the Read primitive&lt;/a&gt;
          &lt;ul&gt;
            &lt;li&gt;&lt;a href=&#34;#reading-from-an-unboundedsource&#34;&gt;Reading from an UnboundedSource&lt;/a&gt;&lt;/li&gt;
            &lt;li&gt;&lt;a href=&#34;#reading-from-a-boundedsource&#34;&gt;Reading from a BoundedSource&lt;/a&gt;&lt;/li&gt;
          &lt;/ul&gt;
        &lt;/li&gt;
        &lt;li&gt;&lt;a href=&#34;#implementing-the-flatten-primitive&#34;&gt;Implementing the Flatten primitive&lt;/a&gt;&lt;/li&gt;
        &lt;li&gt;&lt;a href=&#34;#special-mention-the-combine-composite&#34;&gt;Special mention: the Combine composite&lt;/a&gt;&lt;/li&gt;
      &lt;/ul&gt;
    &lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;#working-with-pipelines&#34;&gt;Working with pipelines&lt;/a&gt;
      &lt;ul&gt;
        &lt;li&gt;&lt;a href=&#34;#traversing-a-pipeline&#34;&gt;Traversing a pipeline&lt;/a&gt;&lt;/li&gt;
        &lt;li&gt;&lt;a href=&#34;#altering-a-pipeline&#34;&gt;Altering a pipeline&lt;/a&gt;&lt;/li&gt;
      &lt;/ul&gt;
    &lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;#testing-your-runner&#34;&gt;Testing your runner&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;#integrating-your-runner-nicely-with-sdks&#34;&gt;Integrating your runner nicely with SDKs&lt;/a&gt;
      &lt;ul&gt;
        &lt;li&gt;&lt;a href=&#34;#integrating-with-the-java-sdk&#34;&gt;Integrating with the Java SDK&lt;/a&gt;
          &lt;ul&gt;
            &lt;li&gt;&lt;a href=&#34;#allowing-users-to-pass-options-to-your-runner&#34;&gt;Allowing users to pass options to your runner&lt;/a&gt;&lt;/li&gt;
            &lt;li&gt;&lt;a href=&#34;#registering-your-runner-with-sdks-for-command-line-use&#34;&gt;Registering your runner with SDKs for command line use&lt;/a&gt;&lt;/li&gt;
          &lt;/ul&gt;
        &lt;/li&gt;
        &lt;li&gt;&lt;a href=&#34;#integrating-with-the-python-sdk&#34;&gt;Integrating with the Python SDK&lt;/a&gt;&lt;/li&gt;
      &lt;/ul&gt;
    &lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;#writing-an-sdk-independent-runner&#34;&gt;Writing an SDK-independent runner&lt;/a&gt;
      &lt;ul&gt;
        &lt;li&gt;&lt;a href=&#34;#the-fn-api&#34;&gt;The Fn API&lt;/a&gt;&lt;/li&gt;
        &lt;li&gt;&lt;a href=&#34;#the-runner-api&#34;&gt;The Runner API&lt;/a&gt;&lt;/li&gt;
      &lt;/ul&gt;
    &lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;#the-runner-api-protos&#34;&gt;The Runner API protos&lt;/a&gt;
      &lt;ul&gt;
        &lt;li&gt;&lt;a href=&#34;#functionspec-proto&#34;&gt;&lt;code&gt;FunctionSpec&lt;/code&gt; proto&lt;/a&gt;&lt;/li&gt;
        &lt;li&gt;&lt;a href=&#34;#sdkfunctionspec-proto&#34;&gt;&lt;code&gt;SdkFunctionSpec&lt;/code&gt; proto&lt;/a&gt;&lt;/li&gt;
        &lt;li&gt;&lt;a href=&#34;#primitive-transform-payload-protos&#34;&gt;Primitive transform payload protos&lt;/a&gt;
          &lt;ul&gt;
            &lt;li&gt;&lt;a href=&#34;#pardopayload-proto&#34;&gt;&lt;code&gt;ParDoPayload&lt;/code&gt; proto&lt;/a&gt;&lt;/li&gt;
            &lt;li&gt;&lt;a href=&#34;#readpayload-proto&#34;&gt;&lt;code&gt;ReadPayload&lt;/code&gt; proto&lt;/a&gt;&lt;/li&gt;
            &lt;li&gt;&lt;a href=&#34;#windowintopayload-proto&#34;&gt;&lt;code&gt;WindowIntoPayload&lt;/code&gt; proto&lt;/a&gt;&lt;/li&gt;
            &lt;li&gt;&lt;a href=&#34;#combinepayload-proto&#34;&gt;&lt;code&gt;CombinePayload&lt;/code&gt; proto&lt;/a&gt;&lt;/li&gt;
          &lt;/ul&gt;
        &lt;/li&gt;
        &lt;li&gt;&lt;a href=&#34;#ptransform-proto&#34;&gt;&lt;code&gt;PTransform&lt;/code&gt; proto&lt;/a&gt;&lt;/li&gt;
        &lt;li&gt;&lt;a href=&#34;#pcollection-proto&#34;&gt;&lt;code&gt;PCollection&lt;/code&gt; proto&lt;/a&gt;&lt;/li&gt;
        &lt;li&gt;&lt;a href=&#34;#coder-proto&#34;&gt;&lt;code&gt;Coder&lt;/code&gt; proto&lt;/a&gt;&lt;/li&gt;
      &lt;/ul&gt;
    &lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;#the-runner-api-rpcs&#34;&gt;The Runner API RPCs&lt;/a&gt;
      &lt;ul&gt;
        &lt;li&gt;&lt;a href=&#34;#pipelinerunnerrunpipeline-rpc&#34;&gt;&lt;code&gt;PipelineRunner.run(Pipeline)&lt;/code&gt; RPC&lt;/a&gt;&lt;/li&gt;
        &lt;li&gt;&lt;a href=&#34;#pipelineresult-aka-job-api&#34;&gt;&lt;code&gt;PipelineResult&lt;/code&gt; aka &amp;ldquo;Job API&amp;rdquo;&lt;/a&gt;&lt;/li&gt;
      &lt;/ul&gt;
    &lt;/li&gt;
  &lt;/ul&gt;
&lt;/nav&gt;

&lt;h2 id=&#34;basics-of-the-beam-model&#34;&gt;Basics of the Beam model&lt;/h2&gt;
&lt;p&gt;Suppose you have a data processing engine that can pretty easily process graphs
of operations. You want to integrate it with the Beam ecosystem to get access
to other languages, great event time processing, and a library of connectors.
You need to know the core vocabulary:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#pipeline&#34;&gt;&lt;em&gt;Pipeline&lt;/em&gt;&lt;/a&gt; - A pipeline is a graph of transformations that a user constructs
that defines the data processing they want to do.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#pcollections&#34;&gt;&lt;em&gt;PCollection&lt;/em&gt;&lt;/a&gt; - Data being processed in a pipeline is part of a PCollection.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#ptransforms&#34;&gt;&lt;em&gt;PTransforms&lt;/em&gt;&lt;/a&gt; - The operations executed within a pipeline. These are best
thought of as operations on PCollections.&lt;/li&gt;
&lt;li&gt;&lt;em&gt;SDK&lt;/em&gt; - A language-specific library for pipeline authors (we often call them
&amp;ldquo;users&amp;rdquo; even though we have many kinds of users) to build transforms,
construct their pipelines and submit them to a runner&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Runner&lt;/em&gt; - You are going to write a piece of software called a runner that
takes a Beam pipeline and executes it using the capabilities of your data
processing engine.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;These concepts may be very similar to your processing engine&amp;rsquo;s concepts. Since
Beam&amp;rsquo;s design is for cross-language operation and reusable libraries of
transforms, there are some special features worth highlighting.&lt;/p&gt;
&lt;h3 id=&#34;pipeline&#34;&gt;Pipeline&lt;/h3&gt;
&lt;p&gt;A pipeline in Beam is a graph of PTransforms operating on PCollections. A
pipeline is constructed by a user in their SDK of choice, and makes its way to
your runner either via the SDK directly or via the Runner API&amp;rsquo;s (forthcoming)
RPC interfaces.&lt;/p&gt;
&lt;h3 id=&#34;ptransforms&#34;&gt;PTransforms&lt;/h3&gt;
&lt;p&gt;In Beam, a PTransform can be one of the five primitives or it can be a
composite transform encapsulating a subgraph. The primitives are:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#implementing-the-read-primitive&#34;&gt;&lt;em&gt;Read&lt;/em&gt;&lt;/a&gt; - parallel connectors to external
systems&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#implementing-the-pardo-primitive&#34;&gt;&lt;em&gt;ParDo&lt;/em&gt;&lt;/a&gt; - per element processing&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#implementing-the-groupbykey-and-window-primitive&#34;&gt;&lt;em&gt;GroupByKey&lt;/em&gt;&lt;/a&gt; -
aggregating elements per key and window&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#implementing-the-flatten-primitive&#34;&gt;&lt;em&gt;Flatten&lt;/em&gt;&lt;/a&gt; - union of PCollections&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#implementing-the-window-primitive&#34;&gt;&lt;em&gt;Window&lt;/em&gt;&lt;/a&gt; - set the windowing strategy
for a PCollection&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;When implementing a runner, these are the operations you need to implement.
Composite transforms may or may not be important to your runner. If you expose
a UI, maintaining some of the composite structure will make the pipeline easier
for a user to understand. But the result of processing is not changed.&lt;/p&gt;
&lt;h3 id=&#34;pcollections&#34;&gt;PCollections&lt;/h3&gt;
&lt;p&gt;A PCollection is an unordered bag of elements. Your runner will be responsible
for storing these elements.  There are some major aspects of a PCollection to
note:&lt;/p&gt;
&lt;h4 id=&#34;bounded-vs-unbounded&#34;&gt;Bounded vs Unbounded&lt;/h4&gt;
&lt;p&gt;A PCollection may be bounded or unbounded.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;em&gt;Bounded&lt;/em&gt; - it is finite and you know it, as in batch use cases&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Unbounded&lt;/em&gt; - it may be never end, you don&amp;rsquo;t know, as in streaming use cases&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;These derive from the intuitions of batch and stream processing, but the two
are unified in Beam and bounded and unbounded PCollections can coexist in the
same pipeline. If your runner can only support bounded PCollections, you&amp;rsquo;ll
need to reject pipelines that contain unbounded PCollections. If your
runner is only really targeting streams, there are adapters in our support code
to convert everything to APIs targeting unbounded data.&lt;/p&gt;
&lt;h4 id=&#34;timestamps&#34;&gt;Timestamps&lt;/h4&gt;
&lt;p&gt;Every element in a PCollection has a timestamp associated with it.&lt;/p&gt;
&lt;p&gt;When you execute a primitive connector to some storage system, that connector
is responsible for providing initial timestamps.  Your runner will need to
propagate and aggregate timestamps. If the timestamp is not important, as with
certain batch processing jobs where elements do not denote events, they will be
the minimum representable timestamp, often referred to colloquially as
&amp;ldquo;negative infinity&amp;rdquo;.&lt;/p&gt;
&lt;h4 id=&#34;watermarks&#34;&gt;Watermarks&lt;/h4&gt;
&lt;p&gt;Every PCollection has to have a watermark that estimates how complete the
PCollection is.&lt;/p&gt;
&lt;p&gt;The watermark is a guess that &amp;ldquo;we&amp;rsquo;ll never see an element with an earlier
timestamp&amp;rdquo;. Sources of data are responsible for producing a watermark. Your
runner needs to implement watermark propagation as PCollections are processed,
merged, and partitioned.&lt;/p&gt;
&lt;p&gt;The contents of a PCollection are complete when a watermark advances to
&amp;ldquo;infinity&amp;rdquo;. In this manner, you may discover that an unbounded PCollection is
finite.&lt;/p&gt;
&lt;h4 id=&#34;windowed-elements&#34;&gt;Windowed elements&lt;/h4&gt;
&lt;p&gt;Every element in a PCollection resides in a window. No element resides in
multiple windows (two elements can be equal except for their window, but they
are not the same).&lt;/p&gt;
&lt;p&gt;When elements are read from the outside world they arrive in the global window.
When they are written to the outside world, they are effectively placed back
into the global window (any writing transform that doesn&amp;rsquo;t take this
perspective probably risks data loss).&lt;/p&gt;
&lt;p&gt;A window has a maximum timestamp, and when the watermark exceeds this plus
user-specified allowed lateness the window is expired. All data related
to an expired window may be discarded at any time.&lt;/p&gt;
&lt;h4 id=&#34;coder&#34;&gt;Coder&lt;/h4&gt;
&lt;p&gt;Every PCollection has a coder, a specification of the binary format of the elements.&lt;/p&gt;
&lt;p&gt;In Beam, the user&amp;rsquo;s pipeline may be written in a language other than the
language of the runner. There is no expectation that the runner can actually
deserialize user data. So the Beam model operates principally on encoded data -
&amp;ldquo;just bytes&amp;rdquo;. Each PCollection has a declared encoding for its elements, called
a coder. A coder has a URN that identifies the encoding, and may have
additional sub-coders (for example, a coder for lists may contain a coder for
the elements of the list). Language-specific serialization techniques can, and
frequently are used, but there are a few key formats - such as key-value pairs
and timestamps - that are common so your runner can understand them.&lt;/p&gt;
&lt;h4 id=&#34;windowing-strategy&#34;&gt;Windowing Strategy&lt;/h4&gt;
&lt;p&gt;Every PCollection has a windowing strategy, a specification of essential
information for grouping and triggering operations.&lt;/p&gt;
&lt;p&gt;The details will be discussed below when we discuss the
&lt;a href=&#34;#implementing-the-window-primitive&#34;&gt;Window&lt;/a&gt; primitive, which sets up the
windowing strategy, and
&lt;a href=&#34;#implementing-the-groupbykey-and-window-primitive&#34;&gt;GroupByKey&lt;/a&gt; primitive,
which has behavior governed by the windowing strategy.&lt;/p&gt;
&lt;h3 id=&#34;user-defined-functions-udfs&#34;&gt;User-Defined Functions (UDFs)&lt;/h3&gt;
&lt;p&gt;Beam has seven varieties of user-defined function (UDF). A Beam pipeline
may contain UDFs written in a language other than your runner, or even multiple
languages in the same pipeline (see the &lt;a href=&#34;#the-runner-api&#34;&gt;Runner API&lt;/a&gt;) so the
definitions are language-independent (see the &lt;a href=&#34;#the-fn-api&#34;&gt;Fn API&lt;/a&gt;).&lt;/p&gt;
&lt;p&gt;The UDFs of Beam are:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;em&gt;DoFn&lt;/em&gt; - per-element processing function (used in ParDo)&lt;/li&gt;
&lt;li&gt;&lt;em&gt;WindowFn&lt;/em&gt; - places elements in windows and merges windows (used in Window
and GroupByKey)&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Source&lt;/em&gt; - emits data read from external sources, including initial and
dynamic splitting for parallelism (used in Read)&lt;/li&gt;
&lt;li&gt;&lt;em&gt;ViewFn&lt;/em&gt; - adapts a materialized PCollection to a particular interface (used
in side inputs)&lt;/li&gt;
&lt;li&gt;&lt;em&gt;WindowMappingFn&lt;/em&gt; - maps one element&amp;rsquo;s window to another, and specifies
bounds on how far in the past the result window will be (used in side
inputs)&lt;/li&gt;
&lt;li&gt;&lt;em&gt;CombineFn&lt;/em&gt; - associative and commutative aggregation (used in Combine and
state)&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Coder&lt;/em&gt; - encodes user data; some coders have standard formats and are not really UDFs&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The various types of user-defined functions will be described further alongside
the primitives that use them.&lt;/p&gt;
&lt;h3 id=&#34;runner&#34;&gt;Runner&lt;/h3&gt;
&lt;p&gt;The term &amp;ldquo;runner&amp;rdquo; is used for a couple of things. It generally refers to the
software that takes a Beam pipeline and executes it somehow. Often, this is the
translation code that you write. It usually also includes some customized
operators for your data processing engine, and is sometimes used to refer to
the full stack.&lt;/p&gt;
&lt;p&gt;A runner has just a single method &lt;code&gt;run(Pipeline)&lt;/code&gt;. From here on, I will often
use code font for proper nouns in our APIs, whether or not the identifiers
match across all SDKs.&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;run(Pipeline)&lt;/code&gt; method should be asynchronous and results in a
PipelineResult which generally will be a job descriptor for your data
processing engine, providing methods for checking its status, canceling it, and
waiting for it to terminate.&lt;/p&gt;
&lt;h2 id=&#34;implementing-the-beam-primitives&#34;&gt;Implementing the Beam Primitives&lt;/h2&gt;
&lt;p&gt;Aside from encoding and persisting data - which presumably your engine already
does in some way or another - most of what you need to do is implement the Beam
primitives. This section provides a detailed look at each primitive, covering
what you need to know that might not be obvious and what support code is
provided.&lt;/p&gt;
&lt;p&gt;The primitives are designed for the benefit of pipeline authors, not runner
authors. Each represents a different conceptual mode of operation (external IO,
element-wise, grouping, windowing, union) rather than a specific implementation
decision.  The same primitive may require a very different implementation based
on how the user instantiates it. For example, a &lt;code&gt;ParDo&lt;/code&gt; that uses state or
timers may require key partitioning, a &lt;code&gt;GroupByKey&lt;/code&gt; with speculative triggering
may require a more costly or complex implementation, and &lt;code&gt;Read&lt;/code&gt; is completely
different for bounded and unbounded data.&lt;/p&gt;
&lt;h3 id=&#34;what-if-you-havent-implemented-some-of-these-features&#34;&gt;What if you haven&amp;rsquo;t implemented some of these features?&lt;/h3&gt;
&lt;p&gt;That&amp;rsquo;s OK! You don&amp;rsquo;t have to do it all at once, and there may even be features
that don&amp;rsquo;t make sense for your runner to ever support.  We maintain a
&lt;a href=&#34;/documentation/runners/capability-matrix/&#34;&gt;capability matrix&lt;/a&gt; on the Beam site so you can tell
users what you support. When you receive a &lt;code&gt;Pipeline&lt;/code&gt;, you should traverse it
and determine whether or not you can execute each &lt;code&gt;DoFn&lt;/code&gt; that you find. If
you cannot execute some &lt;code&gt;DoFn&lt;/code&gt; in the pipeline (or if there is any other
requirement that your runner lacks) you should reject the pipeline. In your
native environment, this may look like throwing an
&lt;code&gt;UnsupportedOperationException&lt;/code&gt;.  The Runner API RPCs will make this explicit,
for cross-language portability.&lt;/p&gt;
&lt;h3 id=&#34;implementing-the-pardo-primitive&#34;&gt;Implementing the ParDo primitive&lt;/h3&gt;
&lt;p&gt;The &lt;code&gt;ParDo&lt;/code&gt; primitive describes element-wise transformation for a
&lt;code&gt;PCollection&lt;/code&gt;.  &lt;code&gt;ParDo&lt;/code&gt; is the most complex primitive, because it is where any
per-element processing is described. In addition to very simple operations like
standard &lt;code&gt;map&lt;/code&gt; or &lt;code&gt;flatMap&lt;/code&gt; from functional programming, &lt;code&gt;ParDo&lt;/code&gt; also supports
multiple outputs, side inputs, initialization, flushing, teardown, and stateful
processing.&lt;/p&gt;
&lt;p&gt;The UDF that is applied to each element is called a &lt;code&gt;DoFn&lt;/code&gt;. The exact APIs for
a &lt;code&gt;DoFn&lt;/code&gt; can vary per language/SDK but generally follow the same pattern, so we
can discuss it with pseudocode. I will also often refer to the Java support
code, since I know it and most of our current and future runners are
Java-based.&lt;/p&gt;
&lt;h4 id=&#34;bundles&#34;&gt;Bundles&lt;/h4&gt;
&lt;p&gt;For correctness, a &lt;code&gt;DoFn&lt;/code&gt; &lt;em&gt;should&lt;/em&gt; represent an element-wise function, but in
fact is a long-lived object that processes elements in small groups called
bundles.&lt;/p&gt;
&lt;p&gt;Your runner decides how many elements, and which elements, to include in a
bundle, and can even decide dynamically in the middle of processing that the
current bundle has &amp;ldquo;ended&amp;rdquo;. How a bundle is processed ties in with the rest of
a DoFn&amp;rsquo;s lifecycle.&lt;/p&gt;
&lt;p&gt;It will generally improve throughput to make the largest bundles possible, so
that initialization and finalization costs are amortized over many elements.
But if your data is arriving as a stream, then you will want to terminate a
bundle in order to achieve appropriate latency, so bundles may be just a few
elements.&lt;/p&gt;
&lt;h4 id=&#34;the-dofn-lifecycle&#34;&gt;The DoFn Lifecycle&lt;/h4&gt;
&lt;p&gt;While each language&amp;rsquo;s SDK is free to make different decisions, the Python and
Java SDKs share an API with the following stages of a DoFn&amp;rsquo;s lifecycle.&lt;/p&gt;
&lt;p&gt;However, if you choose to execute a DoFn directly to improve performance or
single-language simplicity, then your runner is responsible for implementing
the following sequence:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;em&gt;Setup&lt;/em&gt; - called once per DoFn instance before anything else; this has not been
implemented in the Python SDK so the user can work around just with lazy
initialization&lt;/li&gt;
&lt;li&gt;&lt;em&gt;StartBundle&lt;/em&gt; - called once per bundle as initialization (actually, lazy
initialization is almost always equivalent and more efficient, but this hook
remains for simplicity for users)&lt;/li&gt;
&lt;li&gt;&lt;em&gt;ProcessElement&lt;/em&gt; / &lt;em&gt;OnTimer&lt;/em&gt; - called for each element and timer activation&lt;/li&gt;
&lt;li&gt;&lt;em&gt;FinishBundle&lt;/em&gt; - essentially &amp;ldquo;flush&amp;rdquo;; required to be called before
considering elements as actually processed&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Teardown&lt;/em&gt; - release resources that were used across bundles; calling this
can be best effort due to failures&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;dofnrunners&#34;&gt;DoFnRunner(s)&lt;/h4&gt;
&lt;p&gt;This is a support class that has manifestations in both the Java codebase and
the Python codebase.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Java&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;In Java, the &lt;code&gt;beam-runners-core-java&lt;/code&gt; library provides an interface
&lt;code&gt;DoFnRunner&lt;/code&gt; for bundle processing, with implementations for many situations.&lt;/p&gt;





    &lt;div class=language-java&amp;#32;no-toggle&gt;
        
            &lt;pre&gt;&lt;code&gt;interface DoFnRunner&amp;lt;InputT, OutputT&amp;gt; {
  void startBundle();
  void processElement(WindowedValue&amp;lt;InputT&amp;gt; elem);
  void onTimer(String timerId, BoundedWindow window, Instant timestamp, TimeDomain timeDomain);
  void finishBundle();
}&lt;/code&gt;&lt;/pre&gt;
        
    &lt;/div&gt;


&lt;p&gt;There are some implementations and variations of this for different scenarios:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/apache/beam/blob/master/runners/core-java/src/main/java/org/apache/beam/runners/core/SimpleDoFnRunner.java&#34;&gt;&lt;code&gt;SimpleDoFnRunner&lt;/code&gt;&lt;/a&gt; -
not actually simple at all; implements lots of the core functionality of
&lt;code&gt;ParDo&lt;/code&gt;. This is how most runners execute most &lt;code&gt;DoFns&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/apache/beam/blob/master/runners/core-java/src/main/java/org/apache/beam/runners/core/LateDataDroppingDoFnRunner.java&#34;&gt;&lt;code&gt;LateDataDroppingDoFnRunner&lt;/code&gt;&lt;/a&gt; -
wraps a &lt;code&gt;DoFnRunner&lt;/code&gt; and drops data from expired windows so the wrapped
&lt;code&gt;DoFnRunner&lt;/code&gt; doesn&amp;rsquo;t get any unpleasant surprises&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/apache/beam/blob/master/runners/core-java/src/main/java/org/apache/beam/runners/core/StatefulDoFnRunner.java&#34;&gt;&lt;code&gt;StatefulDoFnRunner&lt;/code&gt;&lt;/a&gt; -
handles collecting expired state&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/apache/beam/blob/master/runners/core-java/src/main/java/org/apache/beam/runners/core/PushbackSideInputDoFnRunner.java&#34;&gt;&lt;code&gt;PushBackSideInputDoFnRunner&lt;/code&gt;&lt;/a&gt; -
buffers input while waiting for side inputs to be ready&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;These are all used heavily in implementations of Java runners. Invocations
via the &lt;a href=&#34;#the-fn-api&#34;&gt;Fn API&lt;/a&gt; may manifest as another implementation of
&lt;code&gt;DoFnRunner&lt;/code&gt; even though it will be doing far more than running a &lt;code&gt;DoFn&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Python&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;See the &lt;a href=&#34;https://beam.apache.org/releases/pydoc/2.0.0/apache_beam.runners.html#apache_beam.runners.common.DoFnRunner&#34;&gt;DoFnRunner pydoc&lt;/a&gt;.&lt;/p&gt;
&lt;h4 id=&#34;side-inputs&#34;&gt;Side Inputs&lt;/h4&gt;
&lt;p&gt;&lt;em&gt;Main design document:
&lt;a href=&#34;https://s.apache.org/beam-side-inputs-1-pager&#34;&gt;https://s.apache.org/beam-side-inputs-1-pager&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;A side input is a global view of a window of a &lt;code&gt;PCollection&lt;/code&gt;. This distinguishes
it from the main input, which is processed one element at a time. The SDK/user
prepares a &lt;code&gt;PCollection&lt;/code&gt; adequately, the runner materializes it, and then the
runner feeds it to the &lt;code&gt;DoFn&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;What you will need to implement is to inspect the materialization requested for
the side input, and prepare it appropriately, and corresponding interactions
when a &lt;code&gt;DoFn&lt;/code&gt; reads the side inputs.&lt;/p&gt;
&lt;p&gt;The details and available support code vary by language.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Java&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;If you are using one of the above &lt;code&gt;DoFnRunner&lt;/code&gt; classes, then the interface for
letting them request side inputs is
&lt;a href=&#34;https://github.com/apache/beam/blob/master/runners/core-java/src/main/java/org/apache/beam/runners/core/SideInputReader.java&#34;&gt;&lt;code&gt;SideInputReader&lt;/code&gt;&lt;/a&gt;.
It is a simple mapping from side input and window to a value. The &lt;code&gt;DoFnRunner&lt;/code&gt;
will perform a mapping with the
&lt;a href=&#34;https://github.com/apache/beam/blob/master/sdks/java/core/src/main/java/org/apache/beam/sdk/transforms/windowing/WindowMappingFn.java&#34;&gt;&lt;code&gt;WindowMappingFn&lt;/code&gt;&lt;/a&gt;
to request the appropriate window so you do not worry about invoking this UDF.
When using the Fn API, it will be the SDK harness that maps windows as well.&lt;/p&gt;
&lt;p&gt;A simple, but not necessarily optimal approach to building a
&lt;a href=&#34;https://github.com/apache/beam/blob/master/runners/core-java/src/main/java/org/apache/beam/runners/core/SideInputReader.java&#34;&gt;&lt;code&gt;SideInputReader&lt;/code&gt;&lt;/a&gt;
is to use a state backend. In our Java support code, this is called
&lt;a href=&#34;https://github.com/apache/beam/blob/master/runners/core-java/src/main/java/org/apache/beam/runners/core/StateInternals.java&#34;&gt;&lt;code&gt;StateInternals&lt;/code&gt;&lt;/a&gt;
and you can build a
&lt;a href=&#34;https://github.com/apache/beam/blob/master/runners/core-java/src/main/java/org/apache/beam/runners/core/SideInputHandler.java&#34;&gt;&lt;code&gt;SideInputHandler&lt;/code&gt;&lt;/a&gt;
that will use your &lt;code&gt;StateInternals&lt;/code&gt; to materialize a &lt;code&gt;PCollection&lt;/code&gt; into the
appropriate side input view and then yield the value when requested for a
particular side input and window.&lt;/p&gt;
&lt;p&gt;When a side input is needed but the side input has no data associated with it
for a given window, elements in that window must be deferred until the side
input has some data. The aforementioned
&lt;a href=&#34;https://github.com/apache/beam/blob/master/runners/core-java/src/main/java/org/apache/beam/runners/core/PushbackSideInputDoFnRunner.java&#34;&gt;&lt;code&gt;PushBackSideInputDoFnRunner&lt;/code&gt;&lt;/a&gt;
is used to implement this.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Python&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;In Python, &lt;a href=&#34;https://beam.apache.org/releases/pydoc/2.0.0/apache_beam.transforms.html#apache_beam.transforms.sideinputs.SideInputMap&#34;&gt;&lt;code&gt;SideInputMap&lt;/code&gt;&lt;/a&gt; maps
windows to side input values. The &lt;code&gt;WindowMappingFn&lt;/code&gt; manifests as a simple
function. See
&lt;a href=&#34;https://github.com/apache/beam/blob/master/sdks/python/apache_beam/transforms/sideinputs.py&#34;&gt;sideinputs.py&lt;/a&gt;.&lt;/p&gt;
&lt;h4 id=&#34;state-and-timers&#34;&gt;State and Timers&lt;/h4&gt;
&lt;p&gt;&lt;em&gt;Main design document: &lt;a href=&#34;https://s.apache.org/beam-state&#34;&gt;https://s.apache.org/beam-state&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;When a &lt;code&gt;ParDo&lt;/code&gt; includes state and timers, its execution on your runner is usually
very different. See the full details beyond those covered here.&lt;/p&gt;
&lt;p&gt;State and timers are partitioned per key and window. You may need or want to
explicitly shuffle data to support this.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Java&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;We provide
&lt;a href=&#34;https://github.com/apache/beam/blob/master/runners/core-java/src/main/java/org/apache/beam/runners/core/StatefulDoFnRunner.java&#34;&gt;&lt;code&gt;StatefulDoFnRunner&lt;/code&gt;&lt;/a&gt;
to help with state cleanup. The non-user-facing interface
&lt;a href=&#34;https://github.com/apache/beam/blob/master/runners/core-java/src/main/java/org/apache/beam/runners/core/StateInternals.java&#34;&gt;&lt;code&gt;StateInternals&lt;/code&gt;&lt;/a&gt;
is what a runner generally implements, and then the Beam support code can use
this to implement user-facing state.&lt;/p&gt;
&lt;h4 id=&#34;splittable-dofn&#34;&gt;Splittable DoFn&lt;/h4&gt;
&lt;p&gt;&lt;em&gt;Main design document: &lt;a href=&#34;https://s.apache.org/splittable-do-fn&#34;&gt;https://s.apache.org/splittable-do-fn&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Splittable &lt;code&gt;DoFn&lt;/code&gt; is a generalization and combination of &lt;code&gt;ParDo&lt;/code&gt; and &lt;code&gt;Read&lt;/code&gt;. It
is per-element processing where each element has the capability of being &amp;ldquo;split&amp;rdquo;
in the same ways as a &lt;code&gt;BoundedSource&lt;/code&gt; or &lt;code&gt;UnboundedSource&lt;/code&gt;. This enables better
performance for use cases such as a &lt;code&gt;PCollection&lt;/code&gt; of names of large files where
you want to read each of them. Previously they would have to be static data in
the pipeline or be read in a non-splittable manner.&lt;/p&gt;
&lt;p&gt;This feature is still under development, but likely to become the new primitive
for reading. It is best to be aware of it and follow developments.&lt;/p&gt;
&lt;h3 id=&#34;implementing-the-groupbykey-and-window-primitive&#34;&gt;Implementing the GroupByKey (and window) primitive&lt;/h3&gt;
&lt;p&gt;The &lt;code&gt;GroupByKey&lt;/code&gt; operation (sometimes called GBK for short) groups a
&lt;code&gt;PCollection&lt;/code&gt; of key-value pairs by key and window, emitting results according
to the &lt;code&gt;PCollection&lt;/code&gt;&#39;s triggering configuration.&lt;/p&gt;
&lt;p&gt;It is quite a bit more elaborate than simply colocating elements with the same
key, and uses many fields from the &lt;code&gt;PCollection&lt;/code&gt;&#39;s windowing strategy.&lt;/p&gt;
&lt;h4 id=&#34;group-by-encoded-bytes&#34;&gt;Group By Encoded Bytes&lt;/h4&gt;
&lt;p&gt;For both the key and window, your runner sees them as &amp;ldquo;just bytes&amp;rdquo;. So you need
to group in a way that is consistent with grouping by those bytes, even if you
have some special knowledge of the types involved.&lt;/p&gt;
&lt;p&gt;The elements you are processing will be key-value pairs, and you&amp;rsquo;ll need to extract
the keys. For this reason, the format of key-value pairs is standardized and
shared across all SDKS. See either
&lt;a href=&#34;https://beam.apache.org/releases/javadoc/2.0.0/org/apache/beam/sdk/coders/KvCoder.html&#34;&gt;&lt;code&gt;KvCoder&lt;/code&gt;&lt;/a&gt;
in Java or
&lt;a href=&#34;https://beam.apache.org/releases/pydoc/2.0.0/apache_beam.coders.html#apache_beam.coders.coders.TupleCoder.key_coder&#34;&gt;&lt;code&gt;TupleCoder&lt;/code&gt;&lt;/a&gt;
in Python for documentation on the binary format.&lt;/p&gt;
&lt;h4 id=&#34;window-merging&#34;&gt;Window Merging&lt;/h4&gt;
&lt;p&gt;As well as grouping by key, your runner must group elements by their window. A
&lt;code&gt;WindowFn&lt;/code&gt; has the option of declaring that it merges windows on a per-key
basis.  For example, session windows for the same key will be merged if they
overlap. So your runner must invoke the merge method of the &lt;code&gt;WindowFn&lt;/code&gt; during
grouping.&lt;/p&gt;
&lt;h4 id=&#34;implementing-via-groupbykeyonly--groupalsobywindow&#34;&gt;Implementing via GroupByKeyOnly + GroupAlsoByWindow&lt;/h4&gt;
&lt;p&gt;The Java codebase includes support code for a particularly common way of
implementing the full &lt;code&gt;GroupByKey&lt;/code&gt; operation: first group the keys, and then group
by window. For merging windows, this is essentially required, since merging is
per key.&lt;/p&gt;
&lt;h4 id=&#34;dropping-late-data&#34;&gt;Dropping late data&lt;/h4&gt;
&lt;p&gt;&lt;em&gt;Main design document:
&lt;a href=&#34;https://s.apache.org/beam-lateness&#34;&gt;https://s.apache.org/beam-lateness&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;A window is expired in a &lt;code&gt;PCollection&lt;/code&gt;  if the watermark of the input PCollection
has exceeded the end of the window by at least the input &lt;code&gt;PCollection&lt;/code&gt;&#39;s
allowed lateness.&lt;/p&gt;
&lt;p&gt;Data for an expired window can be dropped any time and should be dropped at a
&lt;code&gt;GroupByKey&lt;/code&gt;. If you are using &lt;code&gt;GroupAlsoByWindow&lt;/code&gt;, then just before executing
this transform. You may shuffle less data if you drop data prior to
&lt;code&gt;GroupByKeyOnly&lt;/code&gt;, but should only safely be done for non-merging windows, as a
window that appears expired may merge to become not expired.&lt;/p&gt;
&lt;h4 id=&#34;triggering&#34;&gt;Triggering&lt;/h4&gt;
&lt;p&gt;&lt;em&gt;Main design document:
&lt;a href=&#34;https://s.apache.org/beam-triggers&#34;&gt;https://s.apache.org/beam-triggers&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;The input &lt;code&gt;PCollection&lt;/code&gt;&#39;s trigger and accumulation mode specify when and how
outputs should be emitted from the &lt;code&gt;GroupByKey&lt;/code&gt; operation.&lt;/p&gt;
&lt;p&gt;In Java, there is a lot of support code for executing triggers in the
&lt;code&gt;GroupAlsoByWindow&lt;/code&gt; implementations, &lt;code&gt;ReduceFnRunner&lt;/code&gt; (legacy name), and
&lt;code&gt;TriggerStateMachine&lt;/code&gt;, which is an obvious way of implementing all triggers as
an event-driven machine over elements and timers.&lt;/p&gt;
&lt;h4 id=&#34;timestampcombiner&#34;&gt;TimestampCombiner&lt;/h4&gt;
&lt;p&gt;When an aggregated output is produced from multiple inputs, the &lt;code&gt;GroupByKey&lt;/code&gt;
operation has to choose a timestamp for the combination. To do so, first the
WindowFn has a chance to shift timestamps - this is needed to ensure watermarks
do not prevent progress of windows like sliding windows (the details are beyond
this doc). Then, the shifted timestamps need to be combined - this is specified
by a &lt;code&gt;TimestampCombiner&lt;/code&gt;, which can either select the minimum or maximum of its
inputs, or just ignore inputs and choose the end of the window.&lt;/p&gt;
&lt;h3 id=&#34;implementing-the-window-primitive&#34;&gt;Implementing the Window primitive&lt;/h3&gt;
&lt;p&gt;The window primitive applies a &lt;code&gt;WindowFn&lt;/code&gt; UDF to place each input element into
one or more windows of its output PCollection. Note that the primitive also
generally configures other aspects of the windowing strategy for a &lt;code&gt;PCollection&lt;/code&gt;,
but the fully constructed graph that your runner receives will already have a
complete windowing strategy for each &lt;code&gt;PCollection&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;To implement this primitive, you need to invoke the provided WindowFn on each
element, which will return some set of windows for that element to be a part of
in the output &lt;code&gt;PCollection&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Implementation considerations&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;A &amp;ldquo;window&amp;rdquo; is just a second grouping key that has a &amp;ldquo;maximum timestamp&amp;rdquo;. It can
be any arbitrary user-defined type. The &lt;code&gt;WindowFn&lt;/code&gt; provides the coder for the
window type.&lt;/p&gt;
&lt;p&gt;Beam&amp;rsquo;s support code provides &lt;code&gt;WindowedValue&lt;/code&gt; which is a compressed
representation of an element in multiple windows. You may want to do use this,
or your own compressed representation. Remember that it simply represents
multiple elements at the same time; there is no such thing as an element &amp;ldquo;in
multiple windows&amp;rdquo;.&lt;/p&gt;
&lt;p&gt;For values in the global window, you may want to use an even further compressed
representation that doesn&amp;rsquo;t bother including the window at all.&lt;/p&gt;
&lt;p&gt;In the future, this primitive may be retired as it can be implemented as a
ParDo if the capabilities of ParDo are enhanced to allow output to new windows.&lt;/p&gt;
&lt;h3 id=&#34;implementing-the-read-primitive&#34;&gt;Implementing the Read primitive&lt;/h3&gt;
&lt;p&gt;You implement this primitive to read data from an external system. The APIs are
carefully crafted to enable efficient parallel execution. Reading from an
&lt;code&gt;UnboundedSource&lt;/code&gt; is a bit different than reading from a &lt;code&gt;BoundedSource&lt;/code&gt;.&lt;/p&gt;
&lt;h4 id=&#34;reading-from-an-unboundedsource&#34;&gt;Reading from an UnboundedSource&lt;/h4&gt;
&lt;p&gt;An &lt;code&gt;UnboundedSource&lt;/code&gt; is a source of potentially infinite data; you can think of
it like a stream. The capabilities are:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;split(int)&lt;/code&gt; - your runner should call this to get the desired parallelism&lt;/li&gt;
&lt;li&gt;&lt;code&gt;createReader(...)&lt;/code&gt; - call this to start reading elements; it is an enhanced iterator that also provides:&lt;/li&gt;
&lt;li&gt;watermark (for this source) which you should propagate downstream&lt;/li&gt;
&lt;li&gt;timestamps, which you should associate with elements read&lt;/li&gt;
&lt;li&gt;record identifiers, so you can dedup downstream if needed&lt;/li&gt;
&lt;li&gt;progress indication of its backlog&lt;/li&gt;
&lt;li&gt;checkpointing&lt;/li&gt;
&lt;li&gt;&lt;code&gt;requiresDeduping&lt;/code&gt; - this indicates that there is some chance that the source
may emit duplicates; your runner should do its best to dedupe based on the
identifier attached to emitted records&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;An unbounded source has a custom type of checkpoints and an associated coder for serializing them.&lt;/p&gt;
&lt;h4 id=&#34;reading-from-a-boundedsource&#34;&gt;Reading from a BoundedSource&lt;/h4&gt;
&lt;p&gt;A &lt;code&gt;BoundedSource&lt;/code&gt; is a source of data that you know is finite, such as a static
collection of log files, or a database table. The capabilities are:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;split(int)&lt;/code&gt; - your runner should call this to get desired initial parallelism (but you can often steal work later)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;getEstimatedSizeBytes(...)&lt;/code&gt; - self explanatory&lt;/li&gt;
&lt;li&gt;&lt;code&gt;createReader(...)&lt;/code&gt; - call this to start reading elements; it is an enhanced iterator that also provides:&lt;/li&gt;
&lt;li&gt;timestamps to associate with each element read&lt;/li&gt;
&lt;li&gt;&lt;code&gt;splitAtFraction&lt;/code&gt; for dynamic splitting to enable work stealing, and other
methods to support it - see the &lt;a href=&#34;/blog/2016/05/18/splitAtFraction-method.html&#34;&gt;Beam blog post on dynamic work
rebalancing&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The &lt;code&gt;BoundedSource&lt;/code&gt; does not report a watermark currently. Most of the time, reading
from a bounded source can be parallelized in ways that result in utterly out-of-order
data, so a watermark is not terribly useful.
Thus the watermark for the output &lt;code&gt;PCollection&lt;/code&gt; from a bounded read should
remain at the minimum timestamp throughout reading (otherwise data might get
dropped) and advance to the maximum timestamp when all data is exhausted.&lt;/p&gt;
&lt;h3 id=&#34;implementing-the-flatten-primitive&#34;&gt;Implementing the Flatten primitive&lt;/h3&gt;
&lt;p&gt;This one is easy - take as input a finite set of &lt;code&gt;PCollections&lt;/code&gt; and outputs their
bag union, keeping windows intact.&lt;/p&gt;
&lt;p&gt;For this operation to make sense, it is the SDK&amp;rsquo;s responsibility to make sure
the windowing strategies are compatible.&lt;/p&gt;
&lt;p&gt;Also note that there is no requirement that the coders for all the &lt;code&gt;PCollections&lt;/code&gt;
be the same. If your runner wants to require that (to avoid tedious
re-encoding) you have to enforce it yourself. Or you could just implement the
fast path as an optimization.&lt;/p&gt;
&lt;h3 id=&#34;special-mention-the-combine-composite&#34;&gt;Special mention: the Combine composite&lt;/h3&gt;
&lt;p&gt;A composite transform that is almost always treated specially by a runner is
&lt;code&gt;Combine&lt;/code&gt; (per key), which applies an associative and commutative operator to
the elements of a &lt;code&gt;PCollection&lt;/code&gt;. This composite is not a primitive. It is
implemented in terms of &lt;code&gt;ParDo&lt;/code&gt; and &lt;code&gt;GroupByKey&lt;/code&gt;, so your runner will work
without treating it - but it does carry additional information that you
probably want to use for optimizations: the associative-commutative operator,
known as a &lt;code&gt;CombineFn&lt;/code&gt;.&lt;/p&gt;
&lt;h2 id=&#34;working-with-pipelines&#34;&gt;Working with pipelines&lt;/h2&gt;
&lt;p&gt;When you receive a pipeline from a user, you will need to translate it. This is
a tour of the APIs that you&amp;rsquo;ll use to do it.&lt;/p&gt;
&lt;h3 id=&#34;traversing-a-pipeline&#34;&gt;Traversing a pipeline&lt;/h3&gt;
&lt;p&gt;Something you will likely do is to traverse a pipeline, probably to translate
it into primitives for your engine. The general pattern is to write a visitor
that builds a job specification as it walks the graph of &lt;code&gt;PTransforms&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;The entry point for this in Java is
&lt;a href=&#34;https://beam.apache.org/releases/javadoc/2.0.0/org/apache/beam/sdk/Pipeline.html#traverseTopologically-org.apache.beam.sdk.Pipeline.PipelineVisitor-&#34;&gt;&lt;code&gt;Pipeline.traverseTopologically&lt;/code&gt;&lt;/a&gt;
and
&lt;a href=&#34;https://beam.apache.org/releases/pydoc/2.0.0/apache_beam.html#apache_beam.pipeline.Pipeline.visit&#34;&gt;&lt;code&gt;Pipeline.visit&lt;/code&gt;&lt;/a&gt;
in Python. See the generated documentation for details.&lt;/p&gt;
&lt;h3 id=&#34;altering-a-pipeline&#34;&gt;Altering a pipeline&lt;/h3&gt;
&lt;p&gt;Often, the best way to keep your
translator simple will be to alter the pipeline prior to translation. Some
alterations you might perform:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Elaboration of a Beam primitive into a composite transform that uses
multiple runner-specific primitives&lt;/li&gt;
&lt;li&gt;Optimization of a Beam composite into a specialized primitive for your
runner&lt;/li&gt;
&lt;li&gt;Replacement of a Beam composite with a different expansion more suitable for
your runner&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The Java SDK and the &amp;ldquo;runners core construction&amp;rdquo; library (the artifact is
&lt;code&gt;beam-runners-core-construction-java&lt;/code&gt; and the namespaces is
&lt;code&gt;org.apache.beam.runners.core.construction&lt;/code&gt;) contain helper code for this sort
of work. In Python, support code is still under development.&lt;/p&gt;
&lt;p&gt;All pipeline alteration is done via
&lt;a href=&#34;https://beam.apache.org/releases/javadoc/2.0.0/org/apache/beam/sdk/Pipeline.html#replaceAll-java.util.List-&#34;&gt;&lt;code&gt;Pipeline.replaceAll(PTransformOverride)&lt;/code&gt;&lt;/a&gt;
method. A
&lt;a href=&#34;https://github.com/apache/beam/blob/master/sdks/java/core/src/main/java/org/apache/beam/sdk/runners/PTransformOverride.java&#34;&gt;&lt;code&gt;PTransformOverride&lt;/code&gt;&lt;/a&gt;
is a pair of a
&lt;a href=&#34;https://github.com/apache/beam/blob/master/sdks/java/core/src/main/java/org/apache/beam/sdk/runners/PTransformMatcher.java&#34;&gt;&lt;code&gt;PTransformMatcher&lt;/code&gt;&lt;/a&gt;
to select transforms for replacement and a
&lt;a href=&#34;https://github.com/apache/beam/blob/master/sdks/java/core/src/main/java/org/apache/beam/sdk/runners/PTransformOverrideFactory.java&#34;&gt;&lt;code&gt;PTransformOverrideFactory&lt;/code&gt;&lt;/a&gt;
to produce the replacement. All &lt;code&gt;PTransformMatchers&lt;/code&gt; that have been needed by
runners to date are provided. Examples include: matching a specific class,
matching a &lt;code&gt;ParDo&lt;/code&gt; where the &lt;code&gt;DoFn&lt;/code&gt; uses state or timers, etc.&lt;/p&gt;
&lt;h2 id=&#34;testing-your-runner&#34;&gt;Testing your runner&lt;/h2&gt;
&lt;p&gt;The Beam Java SDK and Python SDK have suites of runner validation tests. The
configuration may evolve faster than this document, so check the configuration
of other Beam runners. But be aware that we have tests and you can use them
very easily!  To enable these tests in a Java-based runner using Gradle, you
scan the dependencies of the SDK for tests with the JUnit category
&lt;code&gt;ValidatesRunner&lt;/code&gt;.&lt;/p&gt;





    &lt;div class=no-toggle&gt;
        
            &lt;pre&gt;&lt;code&gt;task validatesRunner(type: Test) {
  group = &amp;#34;Verification&amp;#34;
  description = &amp;#34;Validates the runner&amp;#34;
  def pipelineOptions = JsonOutput.toJson([&amp;#34;--runner=MyRunner&amp;#34;, ... misc test options ...])
  systemProperty &amp;#34;beamTestPipelineOptions&amp;#34;, pipelineOptions
  classpath = configurations.validatesRunner
  testClassesDirs = files(project(&amp;#34;:sdks:java:core&amp;#34;).sourceSets.test.output.classesDirs)
  useJUnit {
    includeCategories &amp;#39;org.apache.beam.sdk.testing.ValidatesRunner&amp;#39;
  }
}&lt;/code&gt;&lt;/pre&gt;
        
    &lt;/div&gt;


&lt;p&gt;Enabling these tests in other languages is unexplored.&lt;/p&gt;
&lt;h2 id=&#34;integrating-your-runner-nicely-with-sdks&#34;&gt;Integrating your runner nicely with SDKs&lt;/h2&gt;
&lt;p&gt;Whether or not your runner is based in the same language as an SDK (such as
Java), you will want to provide a shim to invoke it from another SDK if you
want the users of that SDK (such as Python) to use it.&lt;/p&gt;
&lt;h3 id=&#34;integrating-with-the-java-sdk&#34;&gt;Integrating with the Java SDK&lt;/h3&gt;
&lt;h4 id=&#34;allowing-users-to-pass-options-to-your-runner&#34;&gt;Allowing users to pass options to your runner&lt;/h4&gt;
&lt;p&gt;The mechanism for configuration is
&lt;a href=&#34;https://beam.apache.org/releases/javadoc/2.0.0/org/apache/beam/sdk/options/PipelineOptions.html&#34;&gt;&lt;code&gt;PipelineOptions&lt;/code&gt;&lt;/a&gt;,
an interface that works completely differently than normal Java objects. Forget
what you know, and follow the rules, and &lt;code&gt;PipelineOptions&lt;/code&gt; will treat you well.&lt;/p&gt;
&lt;p&gt;You must implement a sub-interface for your runner with getters and setters
with matching names, like so:&lt;/p&gt;





    &lt;div class=language-java&amp;#32;no-toggle&gt;
        
            &lt;pre&gt;&lt;code&gt;public interface MyRunnerOptions extends PipelineOptions {
  @Description(&amp;#34;The Foo to use with MyRunner&amp;#34;)
  @Required
  public Foo getMyRequiredFoo();
  public void setMyRequiredFoo(Foo newValue);

  @Description(&amp;#34;Enable Baz; on by default&amp;#34;)
  @Default.Boolean(true)
  public Boolean isBazEnabled();
  public void setBazEnabled(Boolean newValue);
}&lt;/code&gt;&lt;/pre&gt;
        
    &lt;/div&gt;


&lt;p&gt;You can set up defaults, etc. See the javadoc for details.  When your runner is
instantiated with a &lt;code&gt;PipelineOptions&lt;/code&gt; object, you access your interface by
&lt;code&gt;options.as(MyRunnerOptions.class)&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;To make these options available on the command line, you register your options
with a &lt;code&gt;PipelineOptionsRegistrar&lt;/code&gt;. It is easy if you use &lt;code&gt;@AutoService&lt;/code&gt;:&lt;/p&gt;





    &lt;div class=language-java&amp;#32;no-toggle&gt;
        
            &lt;pre&gt;&lt;code&gt;@AutoService(PipelineOptionsRegistrar.class)
public static class MyOptionsRegistrar implements PipelineOptionsRegistrar {
  @Override
  public Iterable&amp;lt;Class&amp;lt;? extends PipelineOptions&amp;gt;&amp;gt; getPipelineOptions() {
    return ImmutableList.&amp;lt;Class&amp;lt;? extends PipelineOptions&amp;gt;&amp;gt;of(MyRunnerOptions.class);
  }
}&lt;/code&gt;&lt;/pre&gt;
        
    &lt;/div&gt;


&lt;h4 id=&#34;registering-your-runner-with-sdks-for-command-line-use&#34;&gt;Registering your runner with SDKs for command line use&lt;/h4&gt;
&lt;p&gt;To make your runner available on the command line, you register your options
with a &lt;code&gt;PipelineRunnerRegistrar&lt;/code&gt;. It is easy if you use &lt;code&gt;@AutoService&lt;/code&gt;:&lt;/p&gt;





    &lt;div class=language-java&amp;#32;no-toggle&gt;
        
            &lt;pre&gt;&lt;code&gt;@AutoService(PipelineRunnerRegistrar.class)
public static class MyRunnerRegistrar implements PipelineRunnerRegistrar {
  @Override
  public Iterable&amp;lt;Class&amp;lt;? extends PipelineRunner&amp;gt;&amp;gt; getPipelineRunners() {
    return ImmutableList.&amp;lt;Class&amp;lt;? extends PipelineRunner&amp;gt;&amp;gt;of(MyRunner.class);
  }
}&lt;/code&gt;&lt;/pre&gt;
        
    &lt;/div&gt;


&lt;h3 id=&#34;integrating-with-the-python-sdk&#34;&gt;Integrating with the Python SDK&lt;/h3&gt;
&lt;p&gt;In the Python SDK the registration of the code is not automatic. So there are
few things to keep in mind when creating a new runner.&lt;/p&gt;
&lt;p&gt;Any dependencies on packages for the new runner should be options so create a
new target in &lt;code&gt;extra_requires&lt;/code&gt; in &lt;code&gt;setup.py&lt;/code&gt; that is needed for the new runner.&lt;/p&gt;
&lt;p&gt;All runner code should go in it&amp;rsquo;s own package in &lt;code&gt;apache_beam/runners&lt;/code&gt; directory.&lt;/p&gt;
&lt;p&gt;Register the new runner in the &lt;code&gt;create_runner&lt;/code&gt; function of &lt;code&gt;runner.py&lt;/code&gt; so that the
partial name is matched with the correct class to be used.&lt;/p&gt;
&lt;h2 id=&#34;writing-an-sdk-independent-runner&#34;&gt;Writing an SDK-independent runner&lt;/h2&gt;
&lt;p&gt;There are two aspects to making your runner SDK-independent, able to run
pipelines written in other languages: The Fn API and the Runner API.&lt;/p&gt;
&lt;h3 id=&#34;the-fn-api&#34;&gt;The Fn API&lt;/h3&gt;
&lt;p&gt;&lt;em&gt;Design documents:&lt;/em&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;em&gt;&lt;a href=&#34;https://s.apache.org/beam-fn-api&#34;&gt;https://s.apache.org/beam-fn-api&lt;/a&gt;&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;&lt;a href=&#34;https://s.apache.org/beam-fn-api-processing-a-bundle&#34;&gt;https://s.apache.org/beam-fn-api-processing-a-bundle&lt;/a&gt;&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;&lt;a href=&#34;https://s.apache.org/beam-fn-api-send-and-receive-data&#34;&gt;https://s.apache.org/beam-fn-api-send-and-receive-data&lt;/a&gt;&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;To run a user&amp;rsquo;s pipeline, you need to be able to invoke their UDFs.  The Fn API
is an RPC interface for the standard UDFs of Beam, implemented using protocol
buffers over gRPC.&lt;/p&gt;
&lt;p&gt;The Fn API includes:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;APIs for registering a subgraph of UDFs&lt;/li&gt;
&lt;li&gt;APIs for streaming elements of a bundle&lt;/li&gt;
&lt;li&gt;Shared data formats (key-value pairs, timestamps, iterables, etc)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;You are fully welcome to &lt;em&gt;also&lt;/em&gt; use the SDK for your language for utility code,
or provide optimized implementations of bundle processing for same-language
UDFs.&lt;/p&gt;
&lt;h3 id=&#34;the-runner-api&#34;&gt;The Runner API&lt;/h3&gt;
&lt;p&gt;The Runner API is an SDK-independent schema for a pipeline along with RPC
interfaces for launching a pipeline and checking the status of a job. The RPC
interfaces are still in development so for now we focus on the SDK-agnostic
representation of a pipeline. By examining a pipeline only through Runner API
interfaces, you remove your runner&amp;rsquo;s dependence on the SDK for its language for
pipeline analysis and job translation.&lt;/p&gt;
&lt;p&gt;To execute such an SDK-independent pipeline, you will need to support the Fn
API. UDFs are embedded in the pipeline as a specification of the function
(often just opaque serialized bytes for a particular language) plus a
specification of an environment that can execute it (essentially a particular
SDK). So far, this specification is expected to be a URI for a Docker container
hosting the SDK&amp;rsquo;s Fn API harness.&lt;/p&gt;
&lt;p&gt;You are fully welcome to &lt;em&gt;also&lt;/em&gt; use the SDK for your language, which may offer
useful utility code.&lt;/p&gt;
&lt;p&gt;The language-independent definition of a pipeline is described via a protocol
buffers schema, covered below for reference. But your runner &lt;em&gt;should not&lt;/em&gt;
directly manipulate protobuf messages.  Instead, the Beam codebase provides
utilities for working with pipelines so that you don&amp;rsquo;t need to be aware of
whether or not the pipeline has ever been serialized or transmitted, or what
language it may have been written in to begin with.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Java&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;If your runner is Java-based, the tools to interact with pipelines in an
SDK-agnostic manner are in the &lt;code&gt;beam-runners-core-construction-java&lt;/code&gt;
artifact, in the &lt;code&gt;org.apache.beam.runners.core.construction&lt;/code&gt; namespace.
The utilities are named consistently, like so:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;PTransformTranslation&lt;/code&gt; - registry of known transforms and standard URNs&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ParDoTranslation&lt;/code&gt; - utilities for working with &lt;code&gt;ParDo&lt;/code&gt; in a
language-independent manner&lt;/li&gt;
&lt;li&gt;&lt;code&gt;WindowIntoTranslation&lt;/code&gt; - same for &lt;code&gt;Window&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;FlattenTranslation&lt;/code&gt; - same for &lt;code&gt;Flatten&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;WindowingStrategyTranslation&lt;/code&gt; - same for windowing strategies&lt;/li&gt;
&lt;li&gt;&lt;code&gt;CoderTranslation&lt;/code&gt; - same for coders&lt;/li&gt;
&lt;li&gt;&amp;hellip; etc, etc &amp;hellip;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;By inspecting transforms only through these classes, your runner will not
depend on the particulars of the Java SDK.&lt;/p&gt;
&lt;h2 id=&#34;the-runner-api-protos&#34;&gt;The Runner API protos&lt;/h2&gt;
&lt;p&gt;The &lt;a href=&#34;https://github.com/apache/beam/blob/master/model/pipeline/src/main/proto/beam_runner_api.proto&#34;&gt;Runner
API&lt;/a&gt;
refers to a specific manifestation of the concepts in the Beam model, as a
protocol buffers schema.  Even though you should not manipulate these messages
directly, it can be helpful to know the canonical data that makes up a
pipeline.&lt;/p&gt;
&lt;p&gt;Most of the API is exactly the same as the high-level description; you can get
started implementing a runner without understanding all the low-level details.&lt;/p&gt;
&lt;p&gt;The most important takeaway of the Runner API for you is that it is a
language-independent definition of a Beam pipeline. You will probably always
interact via a particular SDK&amp;rsquo;s support code wrapping these definitions with
sensible idiomatic APIs, but always be aware that this is the specification and
any other data is not necessarily inherent to the pipeline, but may be
SDK-specific enrichments (or bugs!).&lt;/p&gt;
&lt;p&gt;The UDFs in the pipeline may be written for any Beam SDK, or even multiple in
the same pipeline. So this is where we will start, taking a bottom-up approach
to understanding the protocol buffers definitions for UDFs before going back to
the higher-level, mostly obvious, record definitions.&lt;/p&gt;
&lt;h3 id=&#34;functionspec-proto&#34;&gt;&lt;code&gt;FunctionSpec&lt;/code&gt; proto&lt;/h3&gt;
&lt;p&gt;The heart of cross-language portability is the &lt;code&gt;FunctionSpec&lt;/code&gt;. This is a
language-independent specification of a function, in the usual programming
sense that includes side effects, etc.&lt;/p&gt;





    &lt;div class=no-toggle&gt;
        
            &lt;pre&gt;&lt;code&gt;message FunctionSpec {
  string urn;
  google.protobuf.Any parameter;
}&lt;/code&gt;&lt;/pre&gt;
        
    &lt;/div&gt;


&lt;p&gt;A &lt;code&gt;FunctionSpec&lt;/code&gt; includes a URN identifying the function as well as an arbitrary
fixed parameter. For example the (hypothetical) &amp;ldquo;max&amp;rdquo; CombineFn might have the
URN &lt;code&gt;beam:combinefn:max:0.1&lt;/code&gt; and a parameter that indicates by what
comparison to take the max.&lt;/p&gt;
&lt;p&gt;For most UDFs in a pipeline constructed using a particular language&amp;rsquo;s SDK, the
URN will indicate that the SDK must interpret it, for example
&lt;code&gt;beam:dofn:javasdk:0.1&lt;/code&gt; or &lt;code&gt;beam:dofn:pythonsdk:0.1&lt;/code&gt;. The parameter
will contain serialized code, such as a Java-serialized &lt;code&gt;DoFn&lt;/code&gt; or a Python
pickled &lt;code&gt;DoFn&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;A &lt;code&gt;FunctionSpec&lt;/code&gt; is not only for UDFs. It is just a generic way to name/specify
any function. It is also used as the specification for a &lt;code&gt;PTransform&lt;/code&gt;. But when
used in a &lt;code&gt;PTransform&lt;/code&gt; it describes a function from &lt;code&gt;PCollection&lt;/code&gt; to &lt;code&gt;PCollection&lt;/code&gt;
and cannot be specific to an SDK because the runner is in charge of evaluating
transforms and producing &lt;code&gt;PCollections&lt;/code&gt;.&lt;/p&gt;
&lt;h3 id=&#34;sdkfunctionspec-proto&#34;&gt;&lt;code&gt;SdkFunctionSpec&lt;/code&gt; proto&lt;/h3&gt;
&lt;p&gt;When a &lt;code&gt;FunctionSpec&lt;/code&gt; represents a UDF, in general only the SDK that serialized
it will be guaranteed to understand it. So in that case, it will always come
with an environment that can understand and execute the function. This is
represented by the &lt;code&gt;SdkFunctionSpec&lt;/code&gt;.&lt;/p&gt;





    &lt;div class=no-toggle&gt;
        
            &lt;pre&gt;&lt;code&gt;message SdkFunctionSpec {
  FunctionSpec spec;
  bytes environment_id;
}&lt;/code&gt;&lt;/pre&gt;
        
    &lt;/div&gt;


&lt;p&gt;In the Runner API, many objects are stored by reference. Here in the
&lt;code&gt;environment_id&lt;/code&gt; is a pointer, local to the pipeline and just made up by the
SDK that serialized it, that can be dereferenced to yield the actual
environment proto.&lt;/p&gt;
&lt;p&gt;Thus far, an environment is expected to be a Docker container specification for
an SDK harness that can execute the specified UDF.&lt;/p&gt;
&lt;h3 id=&#34;primitive-transform-payload-protos&#34;&gt;Primitive transform payload protos&lt;/h3&gt;
&lt;p&gt;The payload for the primitive transforms are just proto serializations of their
specifications. Rather than reproduce their full code here, I will just
highlight the important pieces to show how they fit together.&lt;/p&gt;
&lt;p&gt;It is worth emphasizing again that while you probably will not interact
directly with these payloads, they are the only data that is inherently part of
the transform.&lt;/p&gt;
&lt;h4 id=&#34;pardopayload-proto&#34;&gt;&lt;code&gt;ParDoPayload&lt;/code&gt; proto&lt;/h4&gt;
&lt;p&gt;A &lt;code&gt;ParDo&lt;/code&gt; transform carries its &lt;code&gt;DoFn&lt;/code&gt; in an &lt;code&gt;SdkFunctionSpec&lt;/code&gt; and then
provides language-independent specifications for its other features - side
inputs, state declarations, timer declarations, etc.&lt;/p&gt;





    &lt;div class=no-toggle&gt;
        
            &lt;pre&gt;&lt;code&gt;message ParDoPayload {
  SdkFunctionSpec do_fn;
  map&amp;lt;string, SideInput&amp;gt; side_inputs;
  map&amp;lt;string, StateSpec&amp;gt; state_specs;
  map&amp;lt;string, TimerSpec&amp;gt; timer_specs;
  ...
}&lt;/code&gt;&lt;/pre&gt;
        
    &lt;/div&gt;


&lt;h4 id=&#34;readpayload-proto&#34;&gt;&lt;code&gt;ReadPayload&lt;/code&gt; proto&lt;/h4&gt;
&lt;p&gt;A &lt;code&gt;Read&lt;/code&gt; transform carries an &lt;code&gt;SdkFunctionSpec&lt;/code&gt; for its &lt;code&gt;Source&lt;/code&gt; UDF.&lt;/p&gt;





    &lt;div class=no-toggle&gt;
        
            &lt;pre&gt;&lt;code&gt;message ReadPayload {
  SdkFunctionSpec source;
  ...
}&lt;/code&gt;&lt;/pre&gt;
        
    &lt;/div&gt;


&lt;h4 id=&#34;windowintopayload-proto&#34;&gt;&lt;code&gt;WindowIntoPayload&lt;/code&gt; proto&lt;/h4&gt;
&lt;p&gt;A &lt;code&gt;Window&lt;/code&gt; transform carries an &lt;code&gt;SdkFunctionSpec&lt;/code&gt; for its &lt;code&gt;WindowFn&lt;/code&gt; UDF. It is
part of the Fn API that the runner passes this UDF along and tells the SDK
harness to use it to assign windows (as opposed to merging).&lt;/p&gt;





    &lt;div class=no-toggle&gt;
        
            &lt;pre&gt;&lt;code&gt;message WindowIntoPayload {
  SdkFunctionSpec window_fn;
  ...
}&lt;/code&gt;&lt;/pre&gt;
        
    &lt;/div&gt;


&lt;h4 id=&#34;combinepayload-proto&#34;&gt;&lt;code&gt;CombinePayload&lt;/code&gt; proto&lt;/h4&gt;
&lt;p&gt;&lt;code&gt;Combine&lt;/code&gt; is not a primitive. But non-primitives are perfectly able to carry
additional information for better optimization. The most important thing that a
&lt;code&gt;Combine&lt;/code&gt; transform carries is the &lt;code&gt;CombineFn&lt;/code&gt; in an &lt;code&gt;SdkFunctionSpec&lt;/code&gt; record.
In order to effectively carry out the optimizations desired, it is also
necessary to know the coder for intermediate accumulations, so it also carries
a reference to this coder.&lt;/p&gt;





    &lt;div class=no-toggle&gt;
        
            &lt;pre&gt;&lt;code&gt;message CombinePayload {
  SdkFunctionSpec combine_fn;
  string accumulator_coder_id;
  ...
}&lt;/code&gt;&lt;/pre&gt;
        
    &lt;/div&gt;


&lt;h3 id=&#34;ptransform-proto&#34;&gt;&lt;code&gt;PTransform&lt;/code&gt; proto&lt;/h3&gt;
&lt;p&gt;A &lt;code&gt;PTransform&lt;/code&gt; is a function from &lt;code&gt;PCollection&lt;/code&gt; to &lt;code&gt;PCollection&lt;/code&gt;. This is
represented in the proto using a FunctionSpec. Note that this is not an
&lt;code&gt;SdkFunctionSpec&lt;/code&gt;, since it is the runner that observes these. They will never
be passed back to an SDK harness; they do not represent a UDF.&lt;/p&gt;





    &lt;div class=no-toggle&gt;
        
            &lt;pre&gt;&lt;code&gt;message PTransform {
  FunctionSpec spec;
  repeated string subtransforms;

  // Maps from local string names to PCollection ids
  map&amp;lt;string, bytes&amp;gt; inputs;
  map&amp;lt;string, bytes&amp;gt; outputs;
  ...
}&lt;/code&gt;&lt;/pre&gt;
        
    &lt;/div&gt;


&lt;p&gt;A &lt;code&gt;PTransform&lt;/code&gt; may have subtransforms if it is a composite, in which case the
&lt;code&gt;FunctionSpec&lt;/code&gt; may be omitted since the subtransforms define its behavior.&lt;/p&gt;
&lt;p&gt;The input and output &lt;code&gt;PCollections&lt;/code&gt; are unordered and referred to by a local
name. The SDK decides what this name is, since it will likely be embedded in
serialized UDFs.&lt;/p&gt;
&lt;h3 id=&#34;pcollection-proto&#34;&gt;&lt;code&gt;PCollection&lt;/code&gt; proto&lt;/h3&gt;
&lt;p&gt;A &lt;code&gt;PCollection&lt;/code&gt; just stores a coder, windowing strategy, and whether or not it
is bounded.&lt;/p&gt;





    &lt;div class=no-toggle&gt;
        
            &lt;pre&gt;&lt;code&gt;message PCollection {
  string coder_id;
  IsBounded is_bounded;
  string windowing_strategy_id;
  ...
}&lt;/code&gt;&lt;/pre&gt;
        
    &lt;/div&gt;


&lt;h3 id=&#34;coder-proto&#34;&gt;&lt;code&gt;Coder&lt;/code&gt; proto&lt;/h3&gt;
&lt;p&gt;This is a very interesting proto. A coder is a parameterized function that may
only be understood by a particular SDK, hence an &lt;code&gt;SdkFunctionSpec&lt;/code&gt;, but also
may have component coders that fully define it. For example, a &lt;code&gt;ListCoder&lt;/code&gt; is
only a meta-format, while &lt;code&gt;ListCoder(VarIntCoder)&lt;/code&gt; is a fully specified format.&lt;/p&gt;





    &lt;div class=no-toggle&gt;
        
            &lt;pre&gt;&lt;code&gt;message Coder {
  SdkFunctionSpec spec;
  repeated string component_coder_ids;
}&lt;/code&gt;&lt;/pre&gt;
        
    &lt;/div&gt;


&lt;h2 id=&#34;the-runner-api-rpcs&#34;&gt;The Runner API RPCs&lt;/h2&gt;
&lt;p&gt;While your language&amp;rsquo;s SDK will probably insulate you from touching the Runner
API protos directly, you may need to implement adapters for your runner, to
expose it to another language. So this section covers proto that you will
possibly interact with quite directly.&lt;/p&gt;
&lt;p&gt;The specific manner in which the existing runner method calls will be expressed
as RPCs is not implemented as proto yet. This RPC layer is to enable, for
example, building a pipeline using the Python SDK and launching it on a runner
that is written in Java. It is expected that a small Python shim will
communicate with a Java process or service hosting the Runner API.&lt;/p&gt;
&lt;p&gt;The RPCs themselves will necessarily follow the existing APIs of PipelineRunner
and PipelineResult, but altered to be the minimal backend channel, versus a
rich and convenient API.&lt;/p&gt;
&lt;h3 id=&#34;pipelinerunnerrunpipeline-rpc&#34;&gt;&lt;code&gt;PipelineRunner.run(Pipeline)&lt;/code&gt; RPC&lt;/h3&gt;
&lt;p&gt;This will take the same form, but &lt;code&gt;PipelineOptions&lt;/code&gt; will have to be serialized
to JSON (or a proto &lt;code&gt;Struct&lt;/code&gt;) and passed along.&lt;/p&gt;





    &lt;div class=no-toggle&gt;
        
            &lt;pre&gt;&lt;code&gt;message RunPipelineRequest {
  Pipeline pipeline;
  Struct pipeline_options;
}&lt;/code&gt;&lt;/pre&gt;
        
    &lt;/div&gt;







    &lt;div class=no-toggle&gt;
        
            &lt;pre&gt;&lt;code&gt;message RunPipelineResponse {
  bytes pipeline_id;

  // TODO: protocol for rejecting pipelines that cannot be executed
  // by this runner. May just be REJECTED job state with error message.

  // totally opaque to the SDK; for the shim to interpret
  Any contents;
}&lt;/code&gt;&lt;/pre&gt;
        
    &lt;/div&gt;


&lt;h3 id=&#34;pipelineresult-aka-job-api&#34;&gt;&lt;code&gt;PipelineResult&lt;/code&gt; aka &amp;ldquo;Job API&amp;rdquo;&lt;/h3&gt;
&lt;p&gt;The two core pieces of functionality in this API today are getting the state of
a job and canceling the job. It is very much likely to evolve, for example to
be generalized to support draining a job (stop reading input and let watermarks
go to infinity). Today, verifying our test framework benefits (but does not
depend upon wholly) querying metrics over this channel.&lt;/p&gt;





    &lt;div class=no-toggle&gt;
        
            &lt;pre&gt;&lt;code&gt;message CancelPipelineRequest {
  bytes pipeline_id;
  ...
}

message GetStateRequest {
  bytes pipeline_id;
  ...
}

message GetStateResponse {
  JobState state;
  ...
}

enum JobState {
  ...
}&lt;/code&gt;&lt;/pre&gt;
        
    &lt;/div&gt;



      </description>
    </item>
    
  </channel>
</rss>
